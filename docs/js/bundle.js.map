{"version":3,"file":"js/bundle.js","mappings":";;;AAiBA;AACA;;AAGA;;;;ACGA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAsBA;;AASA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAIA;;;AClDA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAGA;AACA;AACA;;;AAGA;;;AAGA;;;;;AAKA;;;;;;AAOA;AAIA;;;;;AAKA;AACA;;;AAGA;;AAEA;;ACpEA;AACA;AACA;;;;;;;;;;AAUA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;AAMA;;AAKA;;;AAGA;;AAMA;;AAIA;;;;;ACjDA;;;ACFA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;;;;AASA;;;;AAIA;;;;;;AAMA;AACA;;;;AAIA;AACA;;AAEA;;;;;;AAMA;;;AAGA;;;;;;;;;;;;;AAcA;;;AASA;;;;AAIA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;AAGA;;AArCA;;AA6CA;AACA;AACA;AACA;;AAGA;AA0IA;;AAEA;AACA;AACA;;AAUA;;;;ACtSA;;ACMA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;;AAKA;;;AAGA;;AAOA;;AAEA;;;;AAIA;AACA;;;AAGA;;AAGA;;AC9FA;AACA;AACA;AACA;;AAGA;;AA4BA;AACA;AACA;AACA;;AAGA;;ACnDA;AACA;AACA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;;;;;;AAcA;;;;;AAKA;;;;;;AAMA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AAIA;;;AAGA;;;;AAIA;;;AAGA;;ACtKA;AACA;AACA;;AAGA;;;ACEA;;;;;;AAMA;AACA;;AAEA;;;;;;;AAOA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;;;AAGA;;;;;;;AAOA;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;AAIA;AACA;;AAEA;;;;;;AAMA;;;;;AAKA;AACA;AACA;;;AAIA;AAYA;AACA;;;AAKA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;;AAGA;AAEA;;;AC5BA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;;AAIA;AACA;;AAGA;AAqBA;AACA;;;AC7EA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;AAeA;;;;;;;;AA2CA;;;;;;;;;;;;;;;;AC8EA;;;;;;;;;;;AAWA;;;;;;;;;;;AAWA;;;;;AAKA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;;;ACjLA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;AAOA;;;;;;;;AAQA;AAIA;AACA;;AAEA;;;;AAQA;AACA;AACA;AACA;AACA;;AAIA;;;AAKA;AACA;;AAEA;;AAGA;;;;;;;;;;AAcA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;;;;;;;;AASA;;ACxBA;;AAEA;;;;;AAKA;;AAEA;AACA;;;AAGA;;AAKA;;AAEA;AACA;;AAEA;AAEA;;;;;ACjBA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;;;;AAMA;;;AAGA;;;AAGA;;;;;;;;;;AAUA;;;;;;;AAOA;AACA;AACA;;AAGA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;;;;AA0CA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;ACjJA;AACA;;AAGA;AAIA;;AAKA;;;AAIA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAIA;;AAKA;;;;;;;AASA;AACA;;AAGA;AAMA;;AAEA;AACA;;;AAGA;;;;AAIA;;AAGA;;AAKA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AAEA;;;;;;;;;AAaA;;AAEA;;AAEA;AACA;;;;;;;;;;;AAWA;AACA;AACA;;;;AAIA;;;;;;;;;;AAUA;AACA;AACA;;;;AAIA;;;;;;;;;AASA;AACA;;;;AAIA;;;;;;;;;AASA;AACA;;;;AAIA;;;;AAKA;;;;;;;;;;;ACxLA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;;;AASA;;;;;;AAMA;;;;AAIA;;;;AAIA;;;;;;;;;;;AAYA;;;;AAMA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AAEA;;;;ACpEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;;;;AAIA;;;AAIA;;;AAKA;AACA;AACA;AACA;;;;AAKA;;AChDA;AACA;AACA;AACA;;AAGA;;;;AAOA;AAmBA;AAGA;AACA;;;;AAcA;;AAKA;;;AAGA;AACA;AACA;;;AAOA;AACA;;AAEA;;AAEA;;;;;;AAMA;;;;;;;;AAQA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAKA;;;AAMA;;AAEA;;AAEA;AACA;AACA;;AAGA;AAMA;AAHA;;AC5FA;AACA;;AAGA;;;AAKA;;AAIA;;AAEA;AACA;;AAEA;;;AAGA;;;AAKA;;AAIA;;AAEA;AACA;;AAEA;;;;;;;;AASA;;AAqIA;AACA;AACA;;AAGA;;AAIA;AACA;AACA;AACA;;;;AAKA;;;;;;;;ACnOA;;;;AAIA;;;AAGA;;;;;;AAMA;;;;;AAKA;;;;;;;;;AAUA;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAMA;;AC7BA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;AAEA;;;;AAKA;ACnCA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AAEA;;;AChBA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;;;AAKA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;;AAKA;AACA;AACA;;;;;;;AAOA;;;;;;;;;;AAUA;AACA;;;;;;AAMA;AACA;;;;;;;;;;AAUA;AACA;;AAEA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;;;;;AAMA;AAGA;AACA;AACA;;;;;AAKA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAOA;AACA;AACA;;AAGA;;;;;AC9JA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;;;;;;AAOA;AAQA;;AAEA;;;AAIA;;AC5CA;;;AAOA;AACA;;;AAGA;AACA;;;AAGA;;;;AAKA;AACA;AACA;;;;AAIA;AACA;;AAGA;;ACaA;AACA;;AAEA;;AAGA;;;;;;;;ACvBA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;;;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AAQA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAcA;;;AAKA;;;;;;;AAOA;AACA;;;AAGA;;;AAIA;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;;;;;;ACrNA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;;;AAGA;;;;;;;;;;AAUA;AACA;;AAGA;;;AAOA;;;;AAIA;;;;AAIA;;AAEA;;;;AAIA;AACA;;;AAGA;;;;;;;AAQA;;ACnEA;AACA;;AAGA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAGA;;;;;;ACxDA;;;;;;;;;;;;;;;AAgBA;AAMA;;;;AAKA;;;AAKA;;AAGA;AC9CA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;ACJA;;;;AAIA;;;AAGA;;;;;;;AAOA;;;;AAIA;;;;;;;;;AAUA;;;AAKA;AACA;AACA;;AAEA;;;;;AAMA;;;ACnDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;;;;;;;AAQA;;AAIA;AAEA;;AC2BA;AACA;AACA;AACA;;AAGA;;AAOA;;AAEA;AACA;;AAEA;;;;AAKA;;;;;AAOA;;;AAGA;AACA;AACA;;;;AAIA;;;AAKA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAKA;;AAIA;;AAEA;AACA;;AAEA;;;;;;;;AASA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACrIA;AACA;AACA;;;;AAIA;AACA;;;;;;AAhBA;;;;;;;;;AA+BA;;;;;AAKA;;;;;;AAMA;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAlEA;;;;;;;;;;;;AAkFA;;;;;;;AAQA;;;AASA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;;;AAOA;;;;;;ACtGA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAIA;;AAIA;AACA;AACA;;;AAIA","sources":["webpack://gl-effects/./src/components/theme.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/loader.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/tooltip.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/menu.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/grid-layout.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/dialog.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/form.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/popover.js","webpack://gl-effects/./src/components/gauss-blur-generator.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/style/global-style.js","webpack://gl-effects/./src/components/svg-polar-sampling.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/list.js","webpack://gl-effects/./src/docs.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/resizer.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/icon.js","webpack://gl-effects/./src/aegl-ui/aegl-encoding-config.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/select.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/buttongroup.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/navigation.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/input.js","webpack://gl-effects/./src/aegl-ui/aegl-scene-editor.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/search.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/switch.js","webpack://gl-effects/./src/aegl-ui/aegl-preview.ts","webpack://gl-effects/./src/color-correction/color-correction-preview.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/checkbox.js","webpack://gl-effects/./src/components/function-curve.ts","webpack://gl-effects/./src/tools/fix-video-black-surrounding.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/notification.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/progress.js","webpack://gl-effects/./src/components/function-generator.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/bindings/tooltip.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/table.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/modal.js","webpack://gl-effects/./src/bg-erase/bg-erase-preview.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/dropdown.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/contextmenu.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/radio.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/tag.js","webpack://gl-effects/./src/transitions/transition-preview.ts","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/slider.js","webpack://gl-effects/./node_modules/@pucelle/flit-ui/out/components/popup.js"],"sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ThemeSelect = void 0;\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nlet ThemeSelect = class ThemeSelect extends flit_1.Component {\n    theme = ff_1.storage.get('theme', 'light');\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"theme\">\n\t\t\t<div class=\"theme-light-btn\" @click=${() => this.setTheme('light')} :tooltip=\"白色主题\"></div>\n\t\t\t<div class=\"theme-dark-btn\" @click=${() => this.setTheme('dark')} :tooltip=\"黑色主题\"></div>\n\t\t</template>\n\t\t`;\n    }\n    onCreated() {\n        if (this.theme === 'dark') {\n            flit_ui_1.theme.changeTheme('dark');\n        }\n        this.watchImmediately(() => flit_ui_1.theme.mode, (mode) => {\n            document.body.classList.remove('theme-light', 'theme-dark');\n            document.body.classList.add('theme-' + mode);\n        });\n    }\n    setTheme(name) {\n        flit_ui_1.theme.changeTheme(name);\n        ff_1.storage.set('theme', name);\n    }\n};\nexports.ThemeSelect = ThemeSelect;\nexports.ThemeSelect = ThemeSelect = __decorate([\n    (0, flit_1.define)('theme-select')\n], ThemeSelect);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar Loader_1;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Loader = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Loader = Loader_1 = class Loader extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.size = 'medium';\r\n        this.asCover = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, backgroundColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.as-cover{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tz-index: 10;\n\t\t\tbackground: ${backgroundColor.alpha(0.9)};\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\tsvg{\n\t\t\tmargin: auto;\n\t\t}\n\n\t\tpath{\n\t\t\tstroke: currentColor;\n\t\t\tfill: none;\n\t\t\tstroke-linecap: square;\n\t\t}\n\n\t\t.bg{\n\t\t\tstroke-opacity: 0.3;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let strokeWidth = this.getStrokeWidth();\r\n        let halfWidth = strokeWidth / 2;\r\n        let size = Loader_1.sizes[this.size];\r\n        let d = `M${halfWidth} ${halfWidth} H${size - halfWidth} V${size - halfWidth} H${halfWidth}Z`;\r\n        let dashArray = `${size - strokeWidth} ${(size - strokeWidth) * 3}`;\r\n        return flit_1.html `\n\t\t<template\n\t\t\t:class=\"size-${this.size}\"\n\t\t\t:class.as-cover=${this.asCover}\n\t\t\t:style.width.px=${size}\n\t\t\t:style.height.px=${size}\n\t\t\t:style.animation=\"loader-snake-${this.size} 2s linear infinite\"\n\t\t>\n\t\t\t<svg viewBox=\"0 0 ${size} ${size}\" width=${size} height=${size}>\n\t\t\t\t<path class=\"bg\" d=${d} style=\"stroke-width: ${strokeWidth}\" />\n\t\t\t\t<path :ref=\"snake\" d=${d} style=\"stroke-width: ${strokeWidth}; stroke-dasharray: ${dashArray};\" />\n\t\t\t</svg>\n\t\t</template>\n\t\t`;\r\n    }\r\n    getStrokeWidth() {\r\n        return Loader_1.strokeWidths[this.size];\r\n    }\r\n    onReady() {\r\n        let strokeWidth = this.getStrokeWidth();\r\n        let size = Loader_1.sizes[this.size];\r\n        this.refs.snake.animate([\r\n            {\r\n                strokeDashoffset: 0,\r\n            },\r\n            {\r\n                strokeDashoffset: -(size - strokeWidth) * 4,\r\n            }\r\n        ], {\r\n            duration: 1500,\r\n            iterations: Infinity\r\n        });\r\n    }\r\n};\r\nLoader.sizes = {\r\n    small: 18,\r\n    medium: 28,\r\n    large: 48,\r\n};\r\nLoader.strokeWidths = {\r\n    small: 3,\r\n    medium: 4,\r\n    large: 5,\r\n};\r\nLoader = Loader_1 = __decorate([\r\n    flit_1.define('f-loader')\r\n], Loader);\r\nexports.Loader = Loader;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tooltip = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../components/popup\");\r\nlet Tooltip = class Tooltip extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'default';\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, backgroundColor, textColor, errorColor } = theme_1.theme;\r\n        let types = [\r\n            ['default', backgroundColor.toMiddle(5)],\r\n            ['prompt', textColor.toMiddle(30)],\r\n            ['error', errorColor.toMiddle(5)]\r\n        ];\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tmax-width: ${adjust(220)}px;\n\t\t\tpadding: ${adjust(4)}px ${adjust(8)}px;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpointer-events: none;\n\t\t}\n\n\t\t.text{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: ${adjust(-4)}px;\n\t\t\tmargin-bottom: ${adjust(-4)}px;\n\t\t\tmargin-right: ${adjust(-8)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\n\t\t${types.map(([type, color]) => {\r\n            let textColor = color.getLightness() > 0.5 ? '#000' : '#fff';\r\n            return flit_1.css `\n\t\t\t.type-${type}{\n\t\t\t\tbackground: ${color};\n\t\t\t\tcolor: ${textColor};\n\n\t\t\t\t.triangle{\n\t\t\t\t\tborder-bottom-color: ${color};\n\n\t\t\t\t\t&-herizontal{\n\t\t\t\t\t\tborder-right-color: ${color};\n\t\t\t\t\t\tborder-bottom-color: transparent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t`;\r\n        })}\n\n\t\t.type-prompt{\n\t\t\tpointer-events: auto;\n\t\t}\n\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template class=\"type-${this.type}\">\n\t\t\t<div class=\"text\">\n\t\t\t\t<slot />\n\t\t\t</div>\n\n\t\t\t${this.type === 'prompt' ? flit_1.html `\n\t\t\t\t<div class=\"close\" @click=${this.close}>\n\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t</div>\n\t\t\t` : ''}\n\t\t</template>\n\t\t`.extends(super.render());\r\n    }\r\n};\r\nTooltip = __decorate([\r\n    flit_1.define('f-tooltip')\r\n], Tooltip);\r\nexports.Tooltip = Tooltip;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Menu = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"./popup\");\r\n// Compare to `<popover>`, it can set title too,but contains a List.\r\nlet Menu = class Menu extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n        this.defaultPopupOptions = {\r\n            // `trigger` not work here because when handle it, current component is not created.\r\n            alignPosition: 'bc',\r\n            fixTriangle: true,\r\n        };\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, textColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tmin-width: ${adjust(180)}px;\n\t\t\tmax-width: ${adjust(320)}px;\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\n\t\t\tf-list{\n\t\t\t\tborder-bottom: none;\n\t\t\t\tmax-height: 100%;\n\t\t\t\toverflow-y: auto;\n\t\t\t}\n\t\t}\n\n\t\t.triangle{\n\t\t\tleft: ${adjust(15)}px;\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 ${adjust(16)}px 0 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<f-popup>\t\n\t\t\t${this.renderHead()}\n\t\t\t<slot />\n\t\t</f-popup>\n\t\t`.extends(super.render());\r\n    }\r\n    renderHead() {\r\n        if (this.title) {\r\n            return flit_1.html `\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"title\">${this.title}</div>\n\t\t\t</div>\n\t\t\t`;\r\n        }\r\n        return '';\r\n    }\r\n};\r\nMenu = __decorate([\r\n    flit_1.define('f-menu')\r\n], Menu);\r\nexports.Menu = Menu;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColLayout = exports.RowLayout = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\n/**\r\n * Note these components only used to align, not for responsive layout.\r\n * Will extend later when needed.\r\n */\r\nlet RowLayout = class RowLayout extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.columnCount = 24;\r\n        this.gutter = 0;\r\n        this.justify = 'start';\r\n        this.cols = [];\r\n    }\r\n    static style() {\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t}\n\t\t`;\r\n    }\r\n    onUpdated() {\r\n        this.el.style.justifyContent = this.justify === 'start' ? '' : this.justify === 'end' ? 'flex-end' : this.justify;\r\n    }\r\n    register(col) {\r\n        this.cols.push(col);\r\n    }\r\n    getLeftColCount(col) {\r\n        let { columnCount } = this;\r\n        let count = 0;\r\n        for (let c of this.cols) {\r\n            if (c === col) {\r\n                break;\r\n            }\r\n            let span = Math.min(c.span, columnCount);\r\n            let offset = c.offset % columnCount;\r\n            count += span + offset;\r\n        }\r\n        return count;\r\n    }\r\n    isFirstCol(col) {\r\n        return col === this.cols[0];\r\n    }\r\n};\r\nRowLayout = __decorate([\r\n    flit_1.define('f-row')\r\n], RowLayout);\r\nexports.RowLayout = RowLayout;\r\nlet ColLayout = class ColLayout extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.span = 1;\r\n        this.offset = 0;\r\n    }\r\n    onCreated() {\r\n        let row = flit_1.getComponent(this.el.parentElement);\r\n        if (!(row instanceof RowLayout)) {\r\n            throw new Error(`\"<f-col>\" must be included in a \"<f-row>\"`);\r\n        }\r\n        row.register(this);\r\n        this.row = row;\r\n    }\r\n    onUpdated() {\r\n        this.el.style.marginLeft = this.getMarginLeft();\r\n        this.el.style.width = this.getWidth();\r\n    }\r\n    getMarginLeft() {\r\n        let leftColCount = this.row.getLeftColCount(this);\r\n        let { columnCount, gutter } = this.row;\r\n        let offset = this.offset % columnCount;\r\n        let isFirstCol = (leftColCount + offset) % columnCount === 0;\r\n        if (offset > 0) {\r\n            return (offset / gutter) * 100 + '%';\r\n        }\r\n        else {\r\n            return isFirstCol ? '0' : gutter + 'px';\r\n        }\r\n    }\r\n    getWidth() {\r\n        let { gutter, columnCount } = this.row;\r\n        let span = Math.min(this.span, columnCount);\r\n        let percent = span / columnCount;\r\n        let gutterPXs = gutter * (span - 1 - (columnCount - 1) * percent);\r\n        return `calc(${percent * 100}% - ${-gutterPXs}px)`;\r\n    }\r\n};\r\nColLayout = __decorate([\r\n    flit_1.define('f-col')\r\n], ColLayout);\r\nexports.ColLayout = ColLayout;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dialog = exports.QuickDialog = exports.Dialog = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nlet Dialog = class Dialog extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.appendTo = 'body';\r\n        this.options = null;\r\n        /** Also as a marker to know if current options are expired. */\r\n        this.resolve = null;\r\n        this.stack = [];\r\n        this.opened = true;\r\n    }\r\n    static style() {\r\n        let { textColor, adjust, adjustFontSize, popupBorderRadius, popupShadowBlurRadius, popupShadowColor, popupBackgroundColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tz-index: 1100;\t// Higher that modal, popup, tooltip\n\t\t\twidth: ${adjust(360)}px;\n\t\t\tposition: fixed;\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tmax-width: 96%;\n\t\t\tmax-height: 96%;\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px ${adjust(16)}px;\n\t\t}\n\n\t\t.mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 1000;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 ${adjust(16)}px 0 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.content{\n\t\t\tdisplay: flex;\n\t\t\tmargin-top: ${adjust(8)}px;\n\t\t}\n\n\t\t.icon{\n\t\t\tpadding-right: ${adjust(12)}px;\n\t\t}\n\n\t\t.message{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpadding: ${adjust(4)}px 0;\n\t\t}\n\n\t\t.list{\n\t\t\tmargin: ${adjust(8)}px 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tlist-style-type: square;\n\t\t\tpadding-left: ${adjust(28)}px;\n\t\t}\n\n\t\t.actions{\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: flex-end;\n\t\t\tmargin-top: ${adjust(16)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(8)}px;\n\t\t\t}\n\n\t\t\t.third{\n\t\t\t\tmargin-left: 0;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t}\n\n\t\t.input{\n\t\t\tmargin-top: 8px;\n\t\t\twidth: 100%;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let options = this.options;\r\n        if (!options) {\r\n            return '';\r\n        }\r\n        return flit_1.html `\n\t\t<template\n\t\t\ttabindex=\"0\"\n\t\t\t${flit_1.show(this.opened, { transition: 'fade', enterAtStart: true, onend: this.onTransitionEnd })}\n\t\t>\n\t\t\t<div class=\"mask\"\n\t\t\t\t:ref=\"mask\"\n\t\t\t\t${flit_1.show(this.opened, { transition: 'fade', enterAtStart: true })}\n\t\t\t/>\n\n\t\t\t${options.title ? flit_1.html `\n\t\t\t\t<div class=\"header\">\n\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t${options.title}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t` : ''}\n\n\t\t\t<div class=\"content\">\n\n\t\t\t\t${options.icon ? flit_1.html `<div class=\"icon\">\n\t\t\t\t\t<f-icon .type=\"${options.icon}\" />\n\t\t\t\t</div>` : ''}\n\n\t\t\t\t<div class=\"message\">\n\t\t\t\t\t${options.message}\n\t\t\t\t</div>\n\n\t\t\t\t${options.list && options.list.length > 0 ? flit_1.html `\n\t\t\t\t\t<ul class=\"list\">\n\t\t\t\t\t\t${options.list.map(text => flit_1.html `<li>${text}</li>`)}\n\t\t\t\t\t</ul>\n\t\t\t\t` : ''}\n\t\t\t</div>\n\n\t\t\t${this.renderActions(options.actions)}\n\t\t</template>\n\t\t`;\r\n    }\r\n    renderActions(actions) {\r\n        if (actions && actions.length > 0) {\r\n            let results = actions.map(action => flit_1.html `\n\t\t\t\t<button class=\"action\"\n\t\t\t\t\t?primary=${action.primary}\n\t\t\t\t\t:class.third=${action.third}\n\t\t\t\t\t@click=${() => this.onClickActionButton(action)}>\n\t\t\t\t\t${action.text}\n\t\t\t\t</button>\n\t\t\t`);\r\n            return flit_1.html `<div class=\"actions\">${results}</div>`;\r\n        }\r\n        return '';\r\n    }\r\n    onClickActionButton(action) {\r\n        if (this.resolve) {\r\n            this.resolve(action.value);\r\n            this.resolve = null;\r\n        }\r\n        if (this.stack.length > 0) {\r\n            let item = this.stack.shift();\r\n            this.assignOptions(item.options, item.resolve);\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    }\r\n    triggerAction(value) {\r\n        if (!this.options || !this.options.actions) {\r\n            return;\r\n        }\r\n        let action = this.options.actions.find(action => action.value === value);\r\n        if (action) {\r\n            this.onClickActionButton(action);\r\n        }\r\n    }\r\n    onTransitionEnd(type, finish) {\r\n        if (type === 'leave' && finish) {\r\n            if (this.refs.mask) {\r\n                this.refs.mask.remove();\r\n            }\r\n            this.el.remove();\r\n        }\r\n        else if (type === 'enter') {\r\n            let input = this.el.querySelector('input');\r\n            if (input) {\r\n                input.focus();\r\n            }\r\n        }\r\n    }\r\n    async onConnected() {\r\n        await flit_1.renderComplete();\r\n        if (this.refs.mask && this.el.previousElementSibling !== this.refs.mask) {\r\n            this.el.before(this.refs.mask);\r\n        }\r\n        this.toCenter();\r\n        if (this.el.tabIndex === 0) {\r\n            this.el.focus();\r\n        }\r\n        flit_1.on(window, 'resize', ff_1.debounce(this.onWindowResize, 200).wrapped, this);\r\n    }\r\n    onDisconnected() {\r\n        flit_1.off(window, 'resize', this.onWindowResize, this);\r\n    }\r\n    onWindowResize() {\r\n        if (this.opened) {\r\n            this.toCenter();\r\n        }\r\n    }\r\n    toCenter() {\r\n        ff_1.align(this.el, document.documentElement, 'c');\r\n    }\r\n    show() {\r\n        this.opened = true;\r\n        if (this.appendTo) {\r\n            flit_1.appendTo(this.el, this.appendTo);\r\n        }\r\n    }\r\n    hide() {\r\n        this.opened = false;\r\n    }\r\n    assignOptions(options, resolve) {\r\n        this.options = options;\r\n        this.resolve = resolve;\r\n    }\r\n    async addOptions(options) {\r\n        let resolve;\r\n        let promise = new Promise(scopedResolve => {\r\n            resolve = scopedResolve;\r\n        });\r\n        if (this.resolve) {\r\n            this.stack.push({\r\n                options,\r\n                resolve: resolve,\r\n            });\r\n        }\r\n        else {\r\n            this.assignOptions(options, resolve);\r\n            this.show();\r\n        }\r\n        return promise;\r\n    }\r\n};\r\nDialog = __decorate([\r\n    flit_1.define('f-dialog')\r\n], Dialog);\r\nexports.Dialog = Dialog;\r\nclass QuickDialog {\r\n    constructor() {\r\n        this.dialogComponent = null;\r\n        this.actionLabels = {\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            yes: 'Yes',\r\n            no: 'No'\r\n        };\r\n    }\r\n    addOptions(options) {\r\n        if (!this.dialogComponent) {\r\n            this.dialogComponent = flit_1.renderComponent(flit_1.html `<f-dialog />`).component;\r\n        }\r\n        return this.dialogComponent.addOptions(options);\r\n    }\r\n    setLabels(labels) {\r\n        Object.assign(this.actionLabels, labels);\r\n    }\r\n    /** Show default type dialog or add it to dialog stack. */\r\n    show(message, options = {}) {\r\n        return this.addOptions(Object.assign({\r\n            message,\r\n            actions: [{ value: 'ok', text: this.actionLabels.ok }],\r\n        }, options));\r\n    }\r\n    /** Show confirm type dialog or add it to dialog stack. */\r\n    confirm(message, options = {}) {\r\n        return this.addOptions(Object.assign({\r\n            icon: 'confirm',\r\n            message,\r\n            actions: [\r\n                { value: 'cancel', text: this.actionLabels.cancel },\r\n                { value: 'ok', text: this.actionLabels.ok, primary: true },\r\n            ],\r\n        }, options));\r\n    }\r\n    /** Show prompt type dialog or add it to dialog stack. */\r\n    async prompt(message, options = {}) {\r\n        let value = options.value ? String(options.value) : '';\r\n        let messageWithInput = flit_1.html `\n\t\t\t${message}\n\t\t\t<f-input class=\"input\" \n\t\t\t\t.placeholder=${options.placeholder}\n\t\t\t\t@input=${(v) => value = v}\n\t\t\t\t@@keydown.enter=${() => this.dialogComponent.triggerAction('ok')}\n\t\t\t/>\n\t\t`;\r\n        let btn = await this.addOptions(Object.assign({\r\n            message: messageWithInput,\r\n            actions: [\r\n                { value: 'cancel', text: this.actionLabels.cancel },\r\n                { value: 'ok', text: this.actionLabels.ok, primary: true },\r\n            ],\r\n        }, options));\r\n        if (btn === 'ok') {\r\n            return value;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexports.QuickDialog = QuickDialog;\r\nexports.dialog = new QuickDialog();\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Form = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nlet Form = class Form extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.valid = true;\r\n        this.inputs = [];\r\n    }\r\n    static style() {\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\r\n    }\r\n    register(input) {\r\n        this.inputs.push(input);\r\n        this.valid = this.valid && input.valid !== false;\r\n        input.on('change', this.onInputChange, this);\r\n    }\r\n    onInputChange(_value, valid) {\r\n        if (valid !== this.valid) {\r\n            if (valid) {\r\n                this.valid = this.inputs.every(input => input.valid);\r\n            }\r\n            else {\r\n                this.valid = false;\r\n            }\r\n        }\r\n    }\r\n    validate() {\r\n        for (let input of this.inputs) {\r\n            input.setTouched(true);\r\n        }\r\n    }\r\n    reset() {\r\n        for (let input of this.inputs) {\r\n            input.setTouched(false);\r\n        }\r\n    }\r\n};\r\nForm = __decorate([\r\n    flit_1.define('f-form')\r\n], Form);\r\nexports.Form = Form;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Popover = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"./popup\");\r\n// Compare to `<popup>`, it can set title and actions.\r\nlet Popover = class Popover extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n        this.closable = false;\r\n        this.defaultPopupOptions = {\r\n            // `trigger` not work here because when handle it, current component is not created.\r\n            alignPosition: 'bc',\r\n            fixTriangle: true,\r\n        };\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, textColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\tmin-width: ${adjust(240)}px;\n\t\t\tmax-width: ${adjust(400)}px;\n\t\t}\n\n\t\t.triangle{\n\t\t\tleft: ${adjust(12)}px;\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: ${adjust(-6)}px;\n\t\t\tmargin-right: ${adjust(-9)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-left: ${adjust(15)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(6)}px;\n\t\t\t\theight: ${adjust(22)}px;\n\t\t\t\tline-height: ${20}px;\n\t\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<f-popup>\t\n\t\t\t${this.renderHead()}\n\t\t\t<div class=\"content\"><slot /></div>\n\t\t</f-popup>\n\t\t`.extends(super.render());\r\n    }\r\n    renderHead() {\r\n        if (this.title) {\r\n            let shouldRenderClose = this.closable && !this.slots.action;\r\n            return flit_1.html `\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"title\">${this.title}</div>\n\n\t\t\t\t<div class=\"actions\" :show=${this.slots.action}>\n\t\t\t\t\t<slot name=\"action\" />\n\t\t\t\t</div>\n\n\t\t\t\t${shouldRenderClose ? flit_1.html `\n\t\t\t\t\t<div class=\"close\" @click=${this.close}>\n\t\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\t\t\t</div>\n\t\t\t`;\r\n        }\r\n        return '';\r\n    }\r\n};\r\nPopover = __decorate([\r\n    flit_1.define('f-popover')\r\n], Popover);\r\nexports.Popover = Popover;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GaussBlur2DGenerator = exports.GaussBlur1DGenerator = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst gauss_blur_1 = require(\"../libs/math/gauss-blur\");\nlet GaussBlur1DGenerator = class GaussBlur1DGenerator extends flit_1.Component {\n    radius = ff_1.storage.get('gauss_blur_1d_radius', 4);\n    template = ff_1.storage.get('gauss_blur_1d_template', '\tcolor += texture(iChannel[0], fTextureCoord + {x}.0 * d) * {p};');\n    output = '';\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"gauss-blur\">\n\t\t\t<f-input .value=${this.radius} :tooltip=\"半径像素\" @change=${this.onChangeRadius} />\n\t\t\t<f-input .value=${this.template} :tooltip=\"代码模板\" @change=${this.onChangeTemplate}\" />\n\t\t\t<button @click=${this.generate} :enable=${this.radius}>生成高斯模糊权重代码</button>\n\t\t\t<f-textarea .value=${this.output} .placeholder=\"点击上面的按钮然后在此拷贝\" />\n\t\t</template>\n\t\t`;\n    }\n    onChangeRadius(radius) {\n        this.radius = radius;\n        ff_1.storage.set('gauss_blur_1d_radius', radius);\n    }\n    onChangeTemplate(template) {\n        this.template = template;\n        ff_1.storage.set('gauss_blur_1d_template', template);\n    }\n    generate() {\n        let priorities = (0, gauss_blur_1.generate1DGaussBlurPriorities)(this.radius);\n        priorities.forEach(v => v.p = (0, ff_1.toDecimal)(v.p, 4));\n        this.output = priorities.map(({ x, p }) => {\n            return (0, ff_1.format)(this.template, { x, p });\n        }).join('\\n').replace(/\\+(\\s*)-/g, '-$1');\n    }\n};\nexports.GaussBlur1DGenerator = GaussBlur1DGenerator;\nexports.GaussBlur1DGenerator = GaussBlur1DGenerator = __decorate([\n    (0, flit_1.define)('gauss-blur-1d-generator')\n], GaussBlur1DGenerator);\nlet GaussBlur2DGenerator = class GaussBlur2DGenerator extends flit_1.Component {\n    radius = ff_1.storage.get('gauss_blur_2d_radius', 4);\n    template = ff_1.storage.get('gauss_blur_2d_template', '\tcolor += texture(iChannel[0], fTextureCoord + vec2({x}.0, {y}.0) * d) * {p};');\n    output = '';\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"gauss-blur\">\n\t\t\t<f-input .value=${this.radius} :tooltip=\"半径像素\" @change=${this.onChangeRadius} />\n\t\t\t<f-input .value=${this.template} :tooltip=\"代码模板\" @change=${this.onChangeTemplate}\" />\n\t\t\t<button @click=${this.generate} :enable=${this.radius}>生成高斯模糊权重代码</button>\n\t\t\t<f-textarea .value=${this.output} .placeholder=\"点击上面的按钮然后在此拷贝\" />\n\t\t</template>\n\t\t`;\n    }\n    onChangeRadius(radius) {\n        this.radius = radius;\n        ff_1.storage.set('gauss_blur_2d_radius', radius);\n    }\n    onChangeTemplate(template) {\n        this.template = template;\n        ff_1.storage.set('gauss_blur_2d_template', template);\n    }\n    generate() {\n        let priorities = (0, gauss_blur_1.generate2DGaussBlurPriorities)(this.radius);\n        priorities.forEach(v => v.p = (0, ff_1.toDecimal)(v.p, 4));\n        this.output = priorities.map(({ x, y, p }) => {\n            return (0, ff_1.format)(this.template, { x, y, p });\n        }).join('\\n').replace(/\\+(\\s*)-/g, '-$1');\n    }\n};\nexports.GaussBlur2DGenerator = GaussBlur2DGenerator;\nexports.GaussBlur2DGenerator = GaussBlur2DGenerator = __decorate([\n    (0, flit_1.define)('gauss-blur-2d-generator')\n], GaussBlur2DGenerator);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"./theme\");\r\nflit_1.addGlobalStyle(() => {\r\n    let { mainColor, textColor, borderColor, errorColor, fontSize, borderRadius, focusBlurRadius, adjust, adjustFontSize, backgroundColor } = theme_1.theme;\r\n    return flit_1.css `\n\thtml{\n\t\tcolor: ${textColor};\n\t\tfont-size: ${fontSize}px;\n\t\tline-height: ${adjust(28)}px;\n\t\tbackground-color: ${backgroundColor};\n\t}\n\n\th1{\n\t\tfont-size: ${adjustFontSize(68)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 700;\n\t}\n\n\th2{\n\t\tfont-size: ${adjustFontSize(36)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 100;\n\t}\n\n\th3{\n\t\tfont-size: ${adjustFontSize(26)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 400;\n\t}\n\n\th4{\n\t\tfont-size: ${adjustFontSize(22)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 400;\n\t}\n\n\th5{\n\t\tfont-size: ${adjustFontSize(18)}px;\n\t\tline-height: 1.2;\n\t}\n\n\th6{\n\t\tfont-size: ${adjustFontSize(14)}px;\n\t\tline-height: 1.2;\n\t}\n\n\tbutton{\n\t\tdisplay: inline-flex;\n\t\tjustify-content: center;\n\t\theight: ${adjust(28)}px;\n\t\tline-height: ${adjust(28) - 2}px;\n\t\tborder: 1px solid ${borderColor};\n\t\tcolor: ${textColor};\n\t\tborder-radius: ${borderRadius}px;\n\t\tpadding: 0 ${adjust(12)}px;\n\t\tbackground: ${backgroundColor};\n\t\ttext-align: center;\n\t\tcursor: pointer;\n\t\tvertical-align: top;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\t\n\t\t&:hover, &:focus{\n\t\t\tborder-color: #666;\n\t\t\tbackground-color: #666;\n\t\t\tcolor: #fff;\n\t\t}\n\n\t\t&:active{\n\t\t\tbackground: ${textColor};\n\t\t\tborder-color: ${textColor};\n\t\t\tcolor: ${backgroundColor};\n\t\t}\n\n\t\t&:focus{\n\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t}\n\n\t\tf-icon, f-icon-loading{\n\t\t\t&:first-child{\n\t\t\t\tmargin-right: ${adjust(8)}px;\n\t\t\t}\n\n\t\t\t&:last-child{\n\t\t\t\tmargin-left: ${adjust(8)}px;\n\t\t\t}\n\n\t\t\t&:only-child{\n\t\t\t\tmargin-left: 0;\n\t\t\t\tmargin-right: 0;\n\t\t\t}\n\t\t}\n\n\t\t&[primary]{\n\t\t\tbackground: ${mainColor};\n\t\t\tborder-color: ${mainColor};\n\t\t\tcolor: #fff;\n\n\t\t\t&:hover, &:focus{\n\t\t\t\tbackground: ${mainColor.darken(15)};\n\t\t\t\tborder-color: ${mainColor.darken(15)};\n\t\t\t}\n\t\t\n\t\t\t&:active{\n\t\t\t\tbackground: ${mainColor.darken(30)};\n\t\t\t\tborder-color: ${mainColor.darken(30)};\n\t\t\t}\n\t\t}\n\n\t\t&[flat]{\n\t\t\tborder: none;\n\t\t\tpadding-left: 0;\n\t\t\tpadding-right: 0;\n\t\t\tline-height: ${adjust(28)}px;\n\n\t\t\t&:hover, &:focus{\n\t\t\t\tbackground: none;\n\t\t\t\tcolor: ${textColor};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\tbackground: none;\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t}\n\t}\n\n\ta[primary]{\n\t\tcolor: ${mainColor};\n\t}\n\n\tlabel{\n\t\tfont-weight: bold;\n\t\tfont-size: ${adjustFontSize(13)}px;\n\n\t\t&[required]{\n\t\t\t&::after{\n\t\t\t\tposition: relative;\n\t\t\t\tcontent: '*';\n\t\t\t\tcolor: ${errorColor};\n\t\t\t\tmargin-left: 2px;\n\t\t\t\ttop: ${adjust(-5)}px;\n\t\t\t}\n\t\t}\n\n\t\tf-icon{\n\t\t\tmargin-left: 4px;\n\t\t\tcolor: ${textColor.toMiddle(20)};\n\t\t}\n\t}\n\n\n\t.fade-enter, .fade-leave{\n\t\ttransition: opacity 0.2s ease-out;\n\t}\n\t\n\t.fade-enter-from, .fade-leave-to{\n\t\topacity: 0;\n\t}\n\t\n\t.fade-enter-to, .fade-leave-from{\n\t\topacity: 1;\n\t}\n\n\n\t::-webkit-scrollbar{\n\t\theight: 10px;\n\t\twidth: 10px;\n\t\tbackground: ${backgroundColor.toMiddle(10)};\n\t}\n\n\t::-webkit-scrollbar-thumb{\n\t\tbackground: ${backgroundColor.toMiddle(30)};\n\n\t\t&:hover{\n\t\t\tbackground: ${backgroundColor.toMiddle(40)};\n\t\t}\n\n\t\t&:active{\n\t\t\tbackground: ${backgroundColor.toMiddle(50)};\n\t\t}\n\t}\n`;\r\n});\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SVGPolarSampling = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst vector4_1 = require(\"../libs/math/vector4\");\nconst ff_1 = require(\"@pucelle/ff\");\nlet SVGPolarSampling = class SVGPolarSampling extends flit_1.Component {\n    code = '';\n    output = '';\n    polarRadius = new Array(360);\n    svgRect;\n    svgCenter;\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"polar-sampling\">\n\t\t\t<f-textarea @change=${this.onTextareaChange} .placeholder=\"在这里黏贴 SVG 代码, 请确保你的代码使用 stroke 描边路径\" />\n\t\t\t<button @click=${this.generate} :enable=${this.code}>生成极坐标采样数据</button>\n\t\t\t<f-input .value=${this.output} .placeholder=\"点击上面的按钮然后在此拷贝\" />\n\t\t</template>\n\t\t`;\n    }\n    onTextareaChange(code) {\n        this.code = code;\n    }\n    generate() {\n        let div = document.createElement('div');\n        div.style.cssText = 'dispaly: fixed; left: 0; top: 0; visibility: hidden;';\n        div.innerHTML = this.code;\n        let svg = div.querySelector('svg');\n        if (!svg) {\n            flit_ui_1.notification.error(`未包含任何 \"<svg>\".`);\n            throw '';\n        }\n        document.body.append(div);\n        let paths = div.querySelectorAll('path');\n        if (!paths.length) {\n            flit_ui_1.notification.error(`未包含任何 \"<path>\".`);\n            throw '';\n        }\n        this.svgRect = svg.getBBox();\n        this.svgCenter = new vector4_1.Vector2(this.svgRect.x + this.svgRect.width / 2, this.svgRect.y + this.svgRect.height / 2);\n        for (let path of paths) {\n            this.processPath(path);\n        }\n        this.makesureAllRadiusFilled();\n        let diagonalLength = new vector4_1.Vector2(this.svgRect.width, this.svgRect.height).length() / 2;\n        let relativePolarRadius = this.polarRadius.map(v => (0, ff_1.toDecimal)(v / diagonalLength, 4));\n        this.output = JSON.stringify(relativePolarRadius);\n    }\n    processPath(path) {\n        let totalLength = path.getTotalLength();\n        let step = Math.min(this.svgRect.width, this.svgRect.height) / 2 * Math.PI / 180; // 大约 1° 对应的弧长.\n        let lastAngle = null;\n        let lastLength = 0;\n        for (let l = 0; l < totalLength; l += step) {\n            [lastAngle, lastLength] = this.processLengthAtPath(path, l, lastAngle, lastLength);\n        }\n        this.processLengthAtPath(path, totalLength, lastAngle, lastLength);\n    }\n    processLengthAtPath(path, length, lastAngle, lastLength) {\n        let coord = path.getPointAtLength(length);\n        let vector = new vector4_1.Vector2(coord.x - this.svgCenter.x, -(coord.y - this.svgCenter.y)); // 注意由于坐标轴 Y 轴相反, 我们把 Y 取负值.\n        let angle = Math.atan2(vector.y, vector.x) / Math.PI * 180;\n        if (lastAngle !== null) {\n            lastAngle = this.fixAngleFrom(lastAngle, angle);\n            if (Math.abs(angle - lastAngle) > 5) {\n                flit_ui_1.notification.error(`过大的采样跨度, 请确保你的 SVG 路径为单一的 stroke 描边路径, 您可以使用 Adobe Illustrator 进行编辑`);\n                throw '';\n            }\n            this.markRadiusAtIntegarAngle(path, lastAngle, lastLength, angle, length);\n        }\n        return [angle, length];\n    }\n    fixAngleFrom(angle, fromAngle) {\n        if (Math.abs(fromAngle - angle) > 180) {\n            angle = fromAngle < 0 ? angle - 360 : angle + 360;\n        }\n        return angle;\n    }\n    markRadiusAtIntegarAngle(path, startAngle, startLength, endAngle, endLength) {\n        // 确保角度增长, 则长度是否增长不确定.\n        if (startAngle > endAngle) {\n            [startAngle, endAngle] = [endAngle, startAngle];\n            [startLength, endLength] = [endLength, startLength];\n        }\n        let startIntAngle = Math.ceil(startAngle);\n        let endIntAngle = Math.floor(endAngle);\n        for (let i = startIntAngle; i <= endIntAngle; i++) {\n            let positiveIndex = (i + 360) % 360;\n            this.polarRadius[positiveIndex] = this.binarySearchRadius(path, i, startLength, endLength);\n        }\n    }\n    binarySearchRadius(path, intAngle, startLength, endLength) {\n        let vector;\n        // 此时角度增长, 长度是否增长不确定.\n        // 需要达到小数点 4 位精度.\n        for (let i = 0; i < 20; i++) {\n            let centerLength = (startLength + endLength) / 2;\n            let coord = path.getPointAtLength(centerLength);\n            vector = new vector4_1.Vector2(coord.x - this.svgCenter.x, -(coord.y - this.svgCenter.y));\n            let angle = Math.atan2(vector.y, vector.x) / Math.PI * 180;\n            angle = this.fixAngleFrom(angle, intAngle);\n            if (angle > intAngle) {\n                endLength = centerLength;\n            }\n            else if (angle < intAngle) {\n                startLength = centerLength;\n            }\n            else {\n                break;\n            }\n        }\n        return vector.length();\n    }\n    makesureAllRadiusFilled() {\n        let filledCount = this.polarRadius.filter(v => v !== undefined).length;\n        if (filledCount < 2) {\n            flit_ui_1.notification.error(`采样到的数据少于两个.`);\n            throw '';\n        }\n        for (let i = 0; i < this.polarRadius.length; i++) {\n            if (this.polarRadius[i] === undefined) {\n                this.makesureRadiusFilled(i);\n            }\n        }\n    }\n    makesureRadiusFilled(index) {\n        let prevIndex = index;\n        let nextIndex = index;\n        let prevValue = 0;\n        let nextValue = 0;\n        while (prevIndex-- > -360) {\n            let prevValue = this.polarRadius[(prevIndex + 360) % 360];\n            if (prevValue !== undefined) {\n                break;\n            }\n        }\n        while (nextIndex++ < 720) {\n            let nextValue = this.polarRadius[(nextIndex + 360) % 360];\n            if (nextValue !== undefined) {\n                break;\n            }\n        }\n        this.polarRadius[index] = (prevValue * (nextIndex - index) + nextValue * (index - prevIndex)) / (nextIndex - prevIndex);\n    }\n};\nexports.SVGPolarSampling = SVGPolarSampling;\nexports.SVGPolarSampling = SVGPolarSampling = __decorate([\n    (0, flit_1.define)('svg-polar-sampling')\n], SVGPolarSampling);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.List = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\n/** List shouldn't have many levels, it doesn't have overflow setting like Tree. */\r\nlet List = class List extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'selection';\r\n        this.selectable = false;\r\n        this.multipleSelect = false;\r\n        this.data = [];\r\n        this.selected = [];\r\n        this.active = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, borderColor, adjustFontSize } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: block;\n\t\t\tborder-bottom: 1px solid ${borderColor.alpha(0.4)};\n\t\t}\n\t\t\n\t\t.option{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\tpadding-top: ${adjust(2)}px;\n\t\t\tpadding-bottom: ${adjust(2)}px;\n\t\t\tcursor: pointer;\n\t\t\tborder-top: 1px solid ${borderColor.alpha(0.4)};\n\n\t\t\t&:first-child{\n\t\t\t\tborder-top: none;\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&.selected{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&.active{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t&::after{\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: ${adjust(3)}px;\n\t\t\t\t\tbottom: ${adjust(3)}px;\n\t\t\t\t\tright: 0;\n\t\t\t\t\twidth: 2px;\n\t\t\t\t\tbackground: ${mainColor.alpha(0.8)};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.toggle{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(22)}px;\n\t\t\topacity: 0.7;\n\t\t}\n\n\t\t.icon{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(22)}px;\n\t\t}\n\n\t\t.text{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding-right: 4px;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.selected-icon{\n\t\t\tmargin: 0 ${adjust(6)}px;\n\t\t}\n\n\t\t.subsection{\n\t\t\tpadding-left: ${adjust(22)}px;\n\t\t\tpadding-bottom: ${adjust(4)}px;\n\t\t\toverflow: hidden;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\n\t\t\t.option{\n\t\t\t\tpadding-top: 0;\n\t\t\t\tpadding-bottom: 0;\n\t\t\t\tborder-top: none;\n\t\t\t\tline-height: ${adjust(26)}px;\n\t\t\t}\n\n\t\t\t.subsection{\n\t\t\t\tpadding-top: 0;\n\t\t\t\tpadding-bottom: ${adjust(3)}px;\n\t\t\t\tmargin-bottom: ${adjust(3)}px;\n\t\t\t\tborder-bottom: 1px solid ${borderColor.alpha(0.4)};\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `${this.renderDataOrChildren(this.data)}`;\r\n    }\r\n    renderDataOrChildren(items) {\r\n        let siblingsHaveIcon = items.some(item => item.icon);\r\n        let siblingsHaveChildren = items.some(item => item.children);\r\n        let options = flit_1.repeat(items, item => this.renderOption(item, siblingsHaveIcon, siblingsHaveChildren));\r\n        return options;\r\n    }\r\n    renderOption(item, siblingsHaveIcon, siblingsHaveChildren) {\r\n        let subsection = item.children && item.opened ? flit_1.html `\n\t\t\t<div class=\"subsection\">${this.renderDataOrChildren(item.children)}</div>\n\t\t` : null;\r\n        let tip = item.tip ? tooltip_1.tooltip(item.tip) : null;\r\n        return flit_1.html `\n\t\t<div\n\t\t\tclass=\"option\"\n\t\t\t:class=${this.renderClassName(item)}\n\t\t\t@click.prevent=${() => this.onClickOption(item)}\n\t\t\t${tip}\n\n\t\t>\n\t\t\t${item.children ? flit_1.html `\n\t\t\t\t<div class='toggle' @click.stop=${() => this.toggle(item)}>\n\t\t\t\t\t<f-icon .type=${item.opened ? 'triangle-down' : 'triangle-right'} />\n\t\t\t\t</div>\n\t\t\t` : siblingsHaveChildren ? flit_1.html `\n\t\t\t\t<div class='toggle' />\n\t\t\t` : ''}\n\n\t\t\t${siblingsHaveIcon ? flit_1.html `\n\t\t\t\t<div class='icon'>\n\t\t\t\t\t<f-icon .type=${item.icon} />\n\t\t\t\t</div>\n\t\t\t` : ''}\n\t\n\t\t\t<div class=\"text\">\n\t\t\t\t${item.text}\n\t\t\t</div>\n\n\t\t\t${this.isSelected(item) ? flit_1.html `<f-icon class=\"selected-icon\" .type=\"checked\" />` : ''}\n\t\t</div>\n\n\t\t${flit_1.play(subsection, { transition: { properties: ['height', 'opacity'] } })}\n\t\t`;\r\n    }\r\n    renderClassName(item) {\r\n        if (this.type === 'navigation') {\r\n            if (this.active === item.value) {\r\n                return 'active';\r\n            }\r\n        }\r\n        else {\r\n            if (this.isSelected(item)) {\r\n                return 'selected';\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    isSelected(item) {\r\n        return this.selected.includes(item.value);\r\n    }\r\n    onClickOption(item) {\r\n        if (this.type === 'navigation') {\r\n            this.active = item.value;\r\n            this.emit('navigate', item.value);\r\n        }\r\n        else if (this.selectable) {\r\n            if (this.multipleSelect) {\r\n                if (this.selected.includes(item.value)) {\r\n                    ff_1.remove(this.selected, item.value);\r\n                }\r\n                else {\r\n                    ff_1.add(this.selected, item.value);\r\n                }\r\n            }\r\n            else {\r\n                this.selected = [item.value];\r\n            }\r\n            this.emit('select', this.selected);\r\n        }\r\n        else {\r\n            this.emit('click', item.value);\r\n        }\r\n    }\r\n    toggle(item) {\r\n        if (item.children) {\r\n            item.opened = !item.opened;\r\n        }\r\n    }\r\n    onCreated() {\r\n        if (this.active) {\r\n            this.ensureActiveItemVisible(this.data);\r\n        }\r\n    }\r\n    ensureActiveItemVisible(items) {\r\n        return items.some(item => {\r\n            if (item.value === this.active) {\r\n                return true;\r\n            }\r\n            if (item.children) {\r\n                let hasActiveChildItem = this.ensureActiveItemVisible(item.children);\r\n                if (hasActiveChildItem) {\r\n                    item.opened = true;\r\n                }\r\n            }\r\n            return item.opened;\r\n        });\r\n    }\r\n};\r\nList = __decorate([\r\n    flit_1.define('f-list')\r\n], List);\r\nexports.List = List;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GLDocs = void 0;\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst flit_1 = require(\"@pucelle/flit\");\nconst flit = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst aegl_1 = require(\"./aegl\");\nwindow.flit = flit;\nflit_ui_1.theme.changeTheme('large');\nlet GLDocs = class GLDocs extends flit_1.Component {\n    pageName = location.hash.slice(1) || 'about';\n    navData = [\n        { value: 'about', text: '关于 (About)' },\n        // {value: 'environment', text: '环境'},\n        // {value: 'code-standard', text: '代码规范'},\n        { value: 'references/', text: '参考 (References)', children: [\n                { value: 'references/computer-graphics', text: '计算机图形学 (Computer Graphics)' },\n                { value: 'references/computational-geometry', text: '计算几何 (Computational Geometry)' },\n            ] },\n        { value: 'math/', text: '数学 (Math)', children: [\n                { value: 'math/function-fitting', text: '函数拟合 (Function Fitting)' },\n                { value: 'math/continuous', text: '连续 (Continous)' },\n                { value: 'math/vector-modeling', text: '向量建模 (Vector Modeling)' },\n                { value: 'math/filtering', text: '滤波 (Filtering)' },\n                { value: 'math/gradient-sampling', text: '梯度采样 (Gradient Sampling)' },\n                { value: 'math/transform', text: '变换的数学原理 (Transform)' },\n            ] },\n        { value: 'algorithms/', text: '算法 (Algorithms)', children: [\n                { value: 'algorithms/easing', text: '缓动 (Easing)' },\n                { value: 'algorithms/blur', text: '模糊 (Blur)' },\n            ] },\n        { value: 'opengl/', text: 'OpenGL', children: [\n                { value: 'opengl/architecture', text: '架构 (Architecture)' },\n                { value: 'opengl/shader-program', text: '着色程序 (Shader Program)' },\n                { value: 'opengl/vertex', text: '顶点数据 (Vertex Data)' },\n                { value: 'opengl/texture-units', text: '纹理单元 (Texture Units)' },\n                { value: 'opengl/sampling', text: '采样 (Sampling)' },\n                { value: 'opengl/glsl', text: 'GLSL' },\n                { value: 'opengl/performance', text: '性能 (Performance)' },\n                { value: 'opengl/blending', text: '混合 (blending)' },\n            ] },\n        { value: 'color-correction/', text: '调色 (Color Grading)', children: [\n                { value: 'color-correction/color-balance', text: '色彩平衡 (Color Balance)' },\n                { value: 'color-correction/lightness', text: '亮度 (Lightness)' },\n                { value: 'color-correction/exposure', text: '曝光度 (Exposure)' },\n                { value: 'color-correction/contrast', text: '对比度 (Contrast)' },\n                { value: 'color-correction/saturation', text: '饱和度 (Saturation)' },\n                { value: 'color-correction/vibrance', text: '自然饱和度 (Vibrance)' },\n                { value: 'color-correction/hue', text: '色相 (Hue)' },\n                { value: 'color-correction/hue-by-color', text: '单色色相 (Hue)' },\n                { value: 'color-correction/saturation-by-color', text: '单色饱和度 (Saturation)' },\n                { value: 'color-correction/lightness-by-color', text: '单色亮度 (Lightness)' },\n                { value: 'color-correction/shadows', text: '阴影 (Shadows)' },\n                { value: 'color-correction/highlights', text: '高光 (Highlights)' },\n            ] },\n        // {value: 'bg-erase', text: '抠图', children: [\n        // \t{value: 'bg-erase/green-screen', text: '绿幕抠图 (Erase Green Screen)'},\n        // \t{value: 'bg-erase/erase-by-mask', text: '蒙版抠图 (Erase by Mask)'},\n        // ]},\n        { value: 'transitions/', text: '转场 (Transitions)', children: [\n                { value: 'transitions/geometry', text: '几何 (Geometry)', children: [\n                        { value: 'transitions/geometry/push', text: '滑动 (Push)' },\n                        { value: 'transitions/geometry/wipe', text: '擦除 (Wipe)' },\n                        { value: 'transitions/geometry/slant-wipe', text: '斜线擦除 (Slant-Wipe)' },\n                        { value: 'transitions/geometry/radar', text: '雷达 (Radar)' },\n                        { value: 'transitions/geometry/rays', text: '射线 (Rays)' },\n                        { value: 'transitions/geometry/enlarge', text: '放大 (Enlarge)' },\n                        { value: 'transitions/geometry/alternate', text: '轮换 (Alternate)' },\n                        { value: 'transitions/geometry/shuffle', text: '洗牌 (Shuffle)' },\n                        { value: 'transitions/geometry/split', text: '分割 (Split)' },\n                        { value: 'transitions/geometry/face-transform', text: '脸部变换 (Face Transform)' },\n                    ] },\n                { value: 'transitions/pixelate', text: '像素化 (Pixelate)', children: [\n                        { value: 'transitions/pixelate/cube-pixelate', text: '方格像素化 (Cube Pixelate)' },\n                        { value: 'transitions/pixelate/hexagon-pixelate', text: '六边形像素化 (Hexagon Pixelate)' },\n                    ] },\n                { value: 'transitions/dissolve', text: '溶解 (Dissolve)', children: [\n                        { value: 'transitions/dissolve/fade', text: '淡入淡出 (Fade)' },\n                        { value: 'transitions/dissolve/flash', text: '闪烁 (Flash)' },\n                        { value: 'transitions/dissolve/mask', text: '蒙版 (Mask)' },\n                        { value: 'transitions/dissolve/mask-fade', text: '渐变蒙版 (Mask Fade)' },\n                        { value: 'transitions/dissolve/mask-of-shape', text: '形状蒙版 (Mask of Shape)' },\n                        { value: 'transitions/dissolve/mask-of-polar-sampling', text: '极坐标采样蒙版 (Mask of Polar Sampling)' },\n                    ] },\n                { value: 'transitions/distortion', text: '扭曲 (Distortion)', children: [\n                        { value: 'transitions/distortion/morph', text: '变形 (Morph)' },\n                        { value: 'transitions/distortion/color-offset', text: '颜色偏离 (Color Offset)' },\n                        { value: 'transitions/distortion/fly-eye', text: '蝇眼 (Fly Eye)' },\n                        { value: 'transitions/wave', text: '波浪 (Wave)' },\n                    ] },\n                { value: 'transitions/blur', text: '模糊 (Blur)', children: [\n                        { value: 'transitions/blur/zoom-blur', text: '缩放模糊 (Zoom Blur)' },\n                        { value: 'transitions/blur/motion-blur', text: '运动模糊 (Motion Blur)' },\n                    ] },\n                { value: 'transitions/stripe-or-grid', text: '条纹和网格 (Stripe or Grid)', children: [\n                        { value: 'transitions/stripe-or-grid/stripe-merge', text: '条纹合并 (Stripe-Merge)' },\n                        { value: 'transitions/stripe-or-grid/grid-zoom', text: '网格缩放 (Grid Zoom)' },\n                        { value: 'transitions/stripe-or-grid/shutter', text: '百叶窗 (Shutter)' },\n                    ] },\n                { value: 'transitions/3d', text: '3D', children: [\n                        { value: 'transitions/3d/page-curl', text: '卷页 (Page Curl)' },\n                        { value: 'transitions/3d/cube', text: '立方体 (Cube)' },\n                    ] },\n                // {value: 'transitions/analysis', text: '逆向分析', children: [\n                // \t{value: 'transitions/analysis/video-editor', text: 'Video Editor'},\n                // \t{value: 'transitions/analysis/filmora', text: 'Filmora'},\n                // \t{value: 'transitions/analysis/gl-transitions', text: 'GLTransitions'},\n                // \t{value: 'transitions/analysis/shadertoy', text: 'ShaderToy'},\n                // ]},\n            ] },\n        { value: 'aegl/', text: 'AEGL', children: [\n            // {value: 'aegl/compare-to-ae', text: '和 AE 的渲染区别'},\n            // {value: 'aegl/architecture', text: 'AEGL 架构'},\n            ] },\n        // {value: 'tools', text: '工具', children: [\n        // \t{value: 'tools/fix-video-black-surrounding', text: '修正视频半透明黑边'},\n        // ]}\n    ];\n    aeglTemplateList;\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"docs\">\n\t\t\t<div class=\"wrapper docs-wrapper\">\n\t\t\t\t<f-navigation :ref=\"navigation\" class=\"navigation\" @navigate=${this.navigateTo} .data=${this.navData} .active=${this.pageName} />\n\t\t\t\t<div class=\"content\" :ref=\"content\"></div>\n\t\t\t</div>\n\t\t</template>\n\t\t`;\n    }\n    onCreated() {\n        this.watchImmediately(() => flit_ui_1.theme.mode, (mode) => {\n            document.body.classList.remove('theme-light', 'theme-dark');\n            document.body.classList.add('theme-' + mode);\n        });\n    }\n    async onReady() {\n        await this.loadAEGLTemplateList();\n        await this.load(this.pageName);\n        window.onhashchange = () => {\n            this.navigateTo(location.hash.slice(1));\n        };\n    }\n    async loadAEGLTemplateList() {\n        this.aeglTemplateList = await aegl_1.TemplateList.get();\n        let navMenu = this.navData.find(v => v.value === 'aegl/');\n        let listItems = this.aeglTemplateList.map(({ id, name }) => {\n            return { value: `aegl/${id}`, text: `${name}` };\n        });\n        navMenu.children.push(...listItems);\n    }\n    async navigateTo(value) {\n        if (this.pageName !== value) {\n            this.pageName = value;\n            location.hash = '#' + value;\n            this.load(value);\n        }\n    }\n    async load(value) {\n        if (/^aegl\\/(\\d+)$/.test(value)) {\n            let id = Number((0, ff_1.firstMatch)(value, /^aegl\\/(\\d+)$/));\n            let { name } = this.aeglTemplateList.find(v => v.id === id);\n            let code = `\n# ${id} - ${name}\n<aegl-preview .id=\"${id}\"></aegl-preview>\n`;\n            this.loadHTML(marked(code));\n        }\n        else {\n            let url = 'md/' + value.replace(/\\/$/, '/index') + '.md';\n            let res = await fetch(url, { credentials: 'include' });\n            let code = await res.text();\n            this.loadHTML(marked(code));\n        }\n    }\n    async loadHTML(html) {\n        let result = new flit_1.TemplateResult('html', [html], []);\n        this.refs.content.innerHTML = '';\n        this.refs.content.append((0, flit_1.render)(result, this).fragment);\n        this.refs.content.querySelectorAll('pre[class^=\"language-\"]').forEach((pre) => {\n            Prism.highlightElement(pre);\n        });\n        MathJax.typeset();\n    }\n};\nexports.GLDocs = GLDocs;\nexports.GLDocs = GLDocs = __decorate([\n    (0, flit_1.define)('gl-docs')\n], GLDocs);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Resizer = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\n/** Resizer can only adjust in one direction, will extend if needed. */\r\nlet Resizer = class Resizer extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.position = 'right';\r\n        this.rate = 1; // You may set this to `2` if element aligns to center .\r\n        this.max = Infinity;\r\n        this.min = 0;\r\n        this.resizedValue = -1;\r\n    }\r\n    static style() {\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tposition: absolute;\n\t\t\tz-index: 100;\n\t\t}\n\n\t\t.top{\n\t\t\twidth: 100%;\n\t\t\theight: 10px;\n\t\t\ttop: -5px;\n\t\t\tleft: 0;\n\t\t\tcursor: ns-resize;\n\t\t}\n\n\t\t.bottom{\n\t\t\twidth: 100%;\n\t\t\theight: 10px;\n\t\t\tbottom: -5px;\n\t\t\tleft: 0;\n\t\t\tcursor: ns-resize;\n\t\t}\n\n\t\t.left{\n\t\t\twidth: 10px;\n\t\t\theight: 100%;\n\t\t\ttop: 0;\n\t\t\tleft: -5px;\n\t\t\tcursor: ew-resize;\n\t\t}\n\n\t\t.right{\n\t\t\twidth: 10px;\n\t\t\theight: 100%;\n\t\t\ttop: 0;\n\t\t\tright: -5px;\n\t\t\tcursor: ew-resize;\n\t\t}\n\n\t\t.resizing-mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 9999;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\n\t\t\t&.herizontal{\n\t\t\t\tcursor: ew-resize;\n\t\t\t}\n\n\t\t\t&.vertical{\n\t\t\t\tcursor: ns-resize;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template\n\t\t\t:class=${this.position}\n\t\t\t@@mousedown=${this.onStartResize}\n\t\t/>\n\t\t`;\r\n    }\r\n    onReady() {\r\n        if (ff_1.getStyle(this.el.parentElement, 'position') === 'static') {\r\n            throw new Error('Parent of \"<f-resizer>\" must can\\'t have an \"static\" position');\r\n        }\r\n    }\r\n    onStartResize(e) {\r\n        let startX = e.clientX;\r\n        let startY = e.clientY;\r\n        let startParentWidth = this.el.parentElement.offsetWidth;\r\n        let startParentHeight = this.el.parentElement.offsetHeight;\r\n        let onMouseMove = (e) => {\r\n            e.preventDefault();\r\n            this.resize(startParentWidth, startParentHeight, e.clientX - startX, e.clientY - startY);\r\n        };\r\n        let onMouseUp = () => {\r\n            flit_1.off(document, 'mousemove', onMouseMove);\r\n            cursorMask.remove();\r\n            this.emit('change', this.resizedValue);\r\n        };\r\n        let cursorMask = flit_1.render(flit_1.html `\n\t\t\t<div class=\"resizing-mask\" class=\"${this.position === 'left' || this.position === 'right' ? 'herizontal' : 'vertical'}\"\n\t\t/>`, this).fragment.firstElementChild;\r\n        document.body.append(cursorMask);\r\n        flit_1.on(document, 'mousemove', onMouseMove);\r\n        flit_1.once(document, 'mouseup', onMouseUp);\r\n    }\r\n    resize(startParentWidth, startParentHeight, movementX, movementY) {\r\n        let value;\r\n        if (this.position === 'top' || this.position === 'bottom') {\r\n            let flag = this.position === 'bottom' ? 1 : -1;\r\n            value = startParentHeight + flag * movementY * this.rate;\r\n            value = ff_1.constrain(value, this.min, this.max);\r\n            this.el.parentElement.style.height = value + 'px';\r\n        }\r\n        else {\r\n            let flag = this.position === 'right' ? 1 : -1;\r\n            value = startParentWidth + flag * movementX * this.rate;\r\n            value = ff_1.constrain(value, this.min, this.max);\r\n            this.el.parentElement.style.width = value + 'px';\r\n        }\r\n        this.resizedValue = value;\r\n    }\r\n};\r\nResizer = __decorate([\r\n    flit_1.define('f-resizer')\r\n], Resizer);\r\nexports.Resizer = Resizer;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IconLoading = exports.Icon = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst svg_symbol_1 = require(\"../icons/svg-symbol\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Icon = class Icon extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = '';\r\n    }\r\n    render() {\r\n        let svgCode = svg_symbol_1.svgSymbols[this.type];\r\n        if (!svgCode) {\r\n            return '';\r\n        }\r\n        let [viewBox, inner] = ff_1.subMatches(svgCode, /<svg viewBox=\"(.+?)\">([\\s\\S]+?)<\\/svg>/)[0];\r\n        let [, , w, h] = viewBox.split(' ');\r\n        let width = theme_1.theme.adjust(Number(w));\r\n        let height = theme_1.theme.adjust(Number(h));\r\n        return flit_1.html `\n\t\t<template>\n\t\t\t<svg\n\t\t\t\tviewBox=${viewBox}\n\t\t\t\twidth=${width}\n\t\t\t\theight=${height}\n\t\t\t\t:html=${inner}\n\t\t\t/>\n\t\t</template>\n\t\t`;\r\n    }\r\n};\r\nIcon.style = flit_1.css `\n\t:host{\n\t\tdisplay: inline-flex;\n\t\tstroke: currentColor;\n\t\tfill: none;\n\t\tmargin: auto 0;\n\t\tvertical-align: middle;\n\n\t\tsvg{\n\t\t\tmargin: auto;\n\t\t}\n\t}\n\t`;\r\nIcon = __decorate([\r\n    flit_1.define('f-icon')\r\n], Icon);\r\nexports.Icon = Icon;\r\nlet IconLoading = class IconLoading extends Icon {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'loading';\r\n        this.loading = false;\r\n        this.playing = false;\r\n    }\r\n    onCreated() {\r\n        this.watchImmediately(() => this.loading, (value) => {\r\n            if (value && !this.playing) {\r\n                this.play();\r\n                this.playing = true;\r\n            }\r\n        });\r\n    }\r\n    play() {\r\n        let fn = (value) => {\r\n            this.el.style.transform = 'rotate(' + value + 'deg)';\r\n        };\r\n        // Playing web animation will cause it becomes fuzzy.\r\n        ff_1.animateByFunction(fn, 0, 360, 1000, 'linear').promise.then(() => {\r\n            if (this.loading) {\r\n                this.play();\r\n            }\r\n            else {\r\n                this.playing = false;\r\n            }\r\n        });\r\n    }\r\n};\r\nIconLoading.style = flit_1.css `\n\t:host{\n\t\tdisplay: inline-flex;\n\t\tstroke: currentColor;\n\t\tfill: none;\n\t\tmargin: auto 0;\n\t\tvertical-align: top;\n\t\tposition: relative;\n\t}`;\r\nIconLoading = __decorate([\r\n    flit_1.define('f-icon-loading')\r\n], IconLoading);\r\nexports.IconLoading = IconLoading;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AEGLEncodingConfig = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst video_encoder_1 = require(\"../aegl/project/video-encoder\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst debug_1 = require(\"../libs/util/debug\");\nlet AEGLEncodingConfig = class AEGLEncodingConfig extends flit_ui_1.Modal {\n    title = 'Export Video';\n    project;\n    config;\n    heightData;\n    frameRateData;\n    crfData;\n    encoder = null;\n    encodingAnalyser;\n    progress = 0;\n    canceled = false;\n    onCreated() {\n        this.initializeConfig();\n        this.initializeFrameRates();\n        this.initializeResolution();\n        this.encodingAnalyser = new video_encoder_1.VideoEncodingAnalyser(this.project);\n        this.crfData = [\n            { value: 'very-low', text: 'Very Low' }, //1080P 下 12M\n            { value: 'low', text: 'Low' }, //1080P 下 8M\n            { value: 'medium', text: 'Medium' }, //1080P 下 crf 24 6M, 和 AE 默认输出一致.\n            { value: 'high', text: 'High' },\n            { value: 'very-high', text: 'Very High' },\n        ];\n    }\n    /** 初始化配置信息. */\n    initializeConfig() {\n        this.config = ff_1.storage.get('aegl_encoding_config', {\n            name: '',\n            frameRate: 30,\n            height: 720,\n            quality: 'medium',\n        });\n        this.config.name = this.project.data.name;\n    }\n    /** 初始化帧率. */\n    initializeFrameRates() {\n        let frameRates = [25, 30, 60];\n        let templateFrameRate = Math.round(this.project.footages.getTemplateVideoFrameRate());\n        let userFrameRate = Math.round(this.project.footages.getUserVideoFrameRate());\n        // 如果模板素材或者用户素材有其他帧率设置, 将他们推送入选项.\n        if (templateFrameRate && !frameRates.includes(templateFrameRate)) {\n            frameRates.push(templateFrameRate);\n        }\n        if (userFrameRate && !frameRates.includes(userFrameRate)) {\n            frameRates.push(userFrameRate);\n        }\n        frameRates.sort();\n        // 选择默认帧率.\n        if (templateFrameRate && userFrameRate) {\n            this.config.frameRate = Math.min(templateFrameRate, userFrameRate);\n        }\n        else if (templateFrameRate) {\n            this.config.frameRate = templateFrameRate;\n        }\n        else if (userFrameRate) {\n            this.config.frameRate = userFrameRate;\n        }\n        this.frameRateData = frameRates.map(frameRateOption => {\n            let text = frameRateOption + ' fps';\n            let tip = undefined;\n            if (templateFrameRate === frameRateOption && templateFrameRate && userFrameRate && templateFrameRate === userFrameRate) {\n                tip = `Framerate of template assets and your videos is all ${templateFrameRate} fps, suggest you to choose ${frameRateOption} fps`;\n            }\n            else if (frameRateOption === userFrameRate) {\n                tip = `Framerate of your videos is  ${userFrameRate} fps, suggest you to choose ${frameRateOption} fps`;\n            }\n            else if (frameRateOption === templateFrameRate) {\n                tip = `Framerate of template assets is ${templateFrameRate} fps, suggest you to choose ${frameRateOption} fps`;\n            }\n            else if (userFrameRate) {\n                text = (0, flit_1.html) `<span class=\"secondary-choice\">${text}<span>`;\n                if (frameRateOption >= userFrameRate * 2) {\n                    tip = `Framerate of your videos is  ${userFrameRate} fps, choose ${frameRateOption} fps would not provide the expected boost`;\n                }\n                else {\n                    tip = `Framerate of your videos is  ${userFrameRate} fps, choose ${frameRateOption} fps may result in framerate mismatch artifacts.`;\n                }\n            }\n            else if (templateFrameRate) {\n                text = (0, flit_1.html) `<span class=\"secondary-choice\">${text}<span>`;\n                // 使用 60 帧渲染 25 或者 30 不会有啥明显质量损失, 但是 25 和 30 帧混合就会很糟糕.\n                if (frameRateOption >= templateFrameRate * 2) {\n                    tip = `Framerate of template assets is ${templateFrameRate} fps, choose ${frameRateOption} fps would not provide the expected boost`;\n                }\n                else {\n                    tip = `Framerate of template assets is ${templateFrameRate} fps, choose ${frameRateOption} fps may result in framerate mismatch artifacts.`;\n                }\n            }\n            return {\n                value: frameRateOption,\n                text,\n                tip,\n            };\n        });\n    }\n    /** 初始化分辨率选择. */\n    initializeResolution() {\n        let heights = [\n            360,\n            480,\n            720,\n            1080,\n            1440,\n            2160,\n        ];\n        let aspectRatio = this.project.data.width / this.project.data.height;\n        if (aspectRatio === 1) {\n            heights.push(1000);\n            heights.sort((a, b) => a - b);\n        }\n        if (aspectRatio < 1) {\n            heights = heights.map(height => Math.round(height / aspectRatio / 2) * 2);\n        }\n        let heightData = heights.map(height => {\n            let width = Math.round(aspectRatio * height / 2) * 2;\n            return {\n                value: height,\n                text: `${height}P`,\n                tip: `${width}x${height}`,\n            };\n        });\n        // 例如推荐使用 1080P 渲染 940P 以及其以上的照片.\n        const AllowedScalingDown = 1.15;\n        let templateFootageHeight = Math.round(this.project.footages.getTemplateFootageHeight());\n        let userFootageHeight = Math.round(this.project.footages.getUserFootageHeight());\n        let matchItem = heightData.filter(v => v.value <= userFootageHeight * AllowedScalingDown).pop();\n        this.config.height = matchItem ? matchItem.value : this.project.data.height;\n        this.heightData = heightData.map(({ value, text, tip }) => {\n            if (value >= userFootageHeight * AllowedScalingDown) {\n                text = (0, flit_1.html) `<span class=\"secondary-choice\">${text}<span>`;\n                tip += `. Average resolution of your resources is ${userFootageHeight}P, choose ${value}P would not provide the expected boost`;\n            }\n            else if (templateFootageHeight && value > templateFootageHeight) {\n                tip += `. Average resolution of template assets is ${templateFootageHeight}P, choose ${value}P would not provide the expected boost`;\n            }\n            return {\n                value,\n                text,\n                tip,\n            };\n        });\n    }\n    render() {\n        return (0, flit_1.html) `<template class=\"aegl-encoding-config\">\n\t\t<f-row>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\tVideo Name:\n\t\t\t</f-col>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\t<f-input :model=\"config.name\" />\n\t\t\t</f-col>\n\t\t</f-row>\n\n\t\t<f-row>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\tResolution:\n\t\t\t</f-col>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\t<f-select :model=\"config.height\"\n\t\t\t\t\t.data=${this.heightData}\n\t\t\t\t/>\n\t\t\t</f-col>\n\t\t</f-row>\n\n\t\t<f-row>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\tFramerate:\n\t\t\t</f-col>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\t<f-select :model=\"config.frameRate\"\n\t\t\t\t\t.data=${this.frameRateData}\n\t\t\t\t/>\n\t\t\t</f-col>\n\t\t</f-row>\n\n\t\t<f-row>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\tVideo Quality:\n\t\t\t</f-col>\n\t\t\t<f-col .span=\"12\">\n\t\t\t\t<f-select :model=\"config.quality\"\n\t\t\t\t\t.data=${this.crfData}\n\t\t\t\t/>\n\t\t\t</f-col>\n\t\t</f-row>\n\n\t\t<div :show=${!this.encoder} class=\"encoding-tips\">\n\t\t\tVideo export will take about ${this.getExportTimeInMinutes()} mins, file size is about ${this.getExportFileSizeInM()} MB.\n\t\t</div>\n\n\t\t<button :show=${!this.encoder} primary @click=${this.export}>Export</button>\n\n\t\t<div :show=${this.encoder} class=\"encoding-progress\">\n\t\t\t<f-progress .value=${this.progress} />\n\t\t</div>\n\t\t<button :show=${this.encoder} @click=${this.cancelExport}>Cancel</button>\n\n\t\t</template>`.extends(super.render());\n    }\n    /** 获得大致的导出时间. */\n    getExportTimeInMinutes() {\n        return this.encodingAnalyser.guessEncodingTimeInMinutes(this.config.height, this.config.frameRate, this.config.quality);\n    }\n    /** 获得视频的大致文件大小. */\n    getExportFileSizeInM() {\n        return this.encodingAnalyser.guessExportFileSizeInM(this.config.height, this.config.quality);\n    }\n    async export() {\n        onbeforeunload = () => {\n            return `Encoding video, current progress is ${this.progress * 100}%, are you sure you want to quit?`;\n        };\n        let options = {\n            name: this.config.name,\n            frameRate: this.config.frameRate,\n            height: this.config.height,\n            quality: this.config.quality,\n        };\n        let timeEnd = debug_1.debug.timeStart('Video Encoding');\n        this.emit('beginexport');\n        this.encoder = new video_encoder_1.FFVideoEncoder(this.project, options);\n        this.progress = 0;\n        this.encoder.on('progress', (loaded, total) => {\n            this.progress = (0, ff_1.toDecimal)(loaded / total, 3);\n        });\n        try {\n            if (window.VideoEncoder) {\n                await this.encoder.encodeByWeb();\n            }\n            else {\n                await this.encoder.encodeByFF();\n                flit_ui_1.notification.warn('You are encoding videos by wasm version of ffmpeg, which is 10x slower. try switch to modern browsers supports WebCodecs like Chrome or Edge.', { hideDelay: 10000 });\n            }\n            timeEnd();\n            this.saveEncodingResults();\n        }\n        catch (err) {\n            if (!this.canceled) {\n                console.warn(err);\n                flit_ui_1.notification.error('Failed to encode video!', { hideDelay: 10000 });\n            }\n        }\n        this.encoder = null;\n        onbeforeunload = null;\n        this.emit('endexport');\n    }\n    /** 保存视频的大致编码时间比率. */\n    saveEncodingResults() {\n        ff_1.storage.set('aegl_encoding_config', this.config);\n        this.encodingAnalyser.saveEncodingSpeed(this.encoder);\n    }\n    cancelExport() {\n        this.encoder.terminate();\n        this.canceled = true;\n        this.encoder = null;\n    }\n};\nexports.AEGLEncodingConfig = AEGLEncodingConfig;\nexports.AEGLEncodingConfig = AEGLEncodingConfig = __decorate([\n    (0, flit_1.define)('aegl-encoding-config')\n], AEGLEncodingConfig);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Select = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst dropdown_1 = require(\"./dropdown\");\r\nlet Select = class Select extends dropdown_1.Dropdown {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.trigger = 'click';\r\n        this.triangle = false;\r\n        this.alignMargin = 0;\r\n        this.data = [];\r\n        this.value = null;\r\n        this.multiple = false;\r\n        this.searchable = false;\r\n        this.ordered = false;\r\n        this.placeholder = '';\r\n        this.inputed = '';\r\n        this.editing = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, borderColor, popupShadowBlurRadius, backgroundColor, popupShadowColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tbackground: ${backgroundColor.toMiddle(5)};\n\t\t\tline-height: ${adjust(28)}px;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${borderColor};\n\n\t\t\t&:hover, &.opened{\n\t\t\t\tbox-shadow: inset 0 -1px 0 0 ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tcolor: ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&.not-inputable input{\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t}\n\n\t\t.down-icon{\n\t\t\tmargin-left: auto;\n\t\t\tmargin-right: 4px;\n\t\t}\n\t\n\t\t.display, .input{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 0 0 ${adjust(8)}px;\n\t\t\theight: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: transparent;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tbox-shadow: none;\n\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t}\n\n\t\t.placeholder{\n\t\t\topacity: 0.5;\n\t\t}\n\t\n\t\t.popup{\n\t\t\tpadding: 0;\n\t\t\tborder-radius: 0;\n\t\t\tfilter: none;\n\t\t\tbox-shadow: 0 1px ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t}\n\n\t\t.list{\n\t\t\tborder-bottom: none;\n\n\t\t\t.option__f-list{\n\t\t\t\tpadding-left: ${adjust(8)}px;\n\t\t\t\tborder-top: none;\n\t\t\t}\n\t\t}\n\n\t\t.selected-icon{\n\t\t\tmargin-right: -4px;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template :class.not-inputable=${!this.searchable}>\n\t\t\t${this.renderDisplayOrInput()}\n\t\t</template>\n\t\t`.extends(super.render());\r\n    }\r\n    renderDisplayOrInput() {\r\n        if (this.editing) {\r\n            return flit_1.html `\n\t\t\t<input type=\"text\"\n\t\t\t\tclass=\"input\"\n\t\t\t\t:ref=\"input\"\n\t\t\t\t.value=${this.inputed}\n\t\t\t\t.placeholder=${this.placeholder}\n\t\t\t\t?readonly=${!this.editing}\n\t\t\t\t@click=${this.onClick}\n\t\t\t\t@input=${this.onInput}\n\t\t\t>\n\t\t\t`;\r\n        }\r\n        else {\r\n            let text = this.renderCurrentDisplay();\r\n            return flit_1.html `\n\t\t\t<div\n\t\t\t\tclass=\"input\"\n\t\t\t\t:class.placeholder=${!text}\n\t\t\t\t@click=${this.onClick}\n\t\t\t>\n\t\t\t\t${text || this.placeholder}\n\t\t\t</div>\n\t\t\t`;\r\n        }\r\n    }\r\n    renderPopup() {\r\n        let data = this.getOptionData();\r\n        return flit_1.html `\n\t\t<f-popup\n\t\t\tclass=\"popup\"\n\t\t\t:ref=\"popup\"\n\t\t\t.triangle=\"false\"\n\t\t>\n\t\t\t<f-list class=\"list\"\n\t\t\t\t:ref=\"list\"\n\t\t\t\t.type=\"selection\"\n\t\t\t\t.selectable\n\t\t\t\t.data=${data}\n\t\t\t\t.multipleSelect=${this.multiple}\n\t\t\t\t.selected=${this.multiple ? this.value : [this.value]}\n\t\t\t\t@select=${this.select}\n\t\t\t/>\n\t\t</f-popup>\n\t\t`;\r\n    }\r\n    renderCurrentDisplay() {\r\n        if (this.multiple) {\r\n            let displays = [];\r\n            for (let { value, text } of this.data) {\r\n                if (this.value.includes(value)) {\r\n                    // Here may render `<>` tags as value into `input` element\r\n                    displays.push(text.toString());\r\n                }\r\n            }\r\n            return displays.join('; ');\r\n        }\r\n        else {\r\n            for (let { value, text } of this.data) {\r\n                if (this.value === value) {\r\n                    return text;\r\n                }\r\n            }\r\n            return '';\r\n        }\r\n    }\r\n    getOptionData() {\r\n        if (this.searchable && this.inputed) {\r\n            let lowerSearchWord = this.inputed.toLowerCase();\r\n            let filteredData = [];\r\n            for (let item of this.data) {\r\n                if (String(item.value).includes(lowerSearchWord)) {\r\n                    filteredData.push(item);\r\n                }\r\n            }\r\n            return filteredData;\r\n        }\r\n        else {\r\n            return this.data;\r\n        }\r\n    }\r\n    onCreated() {\r\n        this.initValue();\r\n        this.initEditing();\r\n    }\r\n    initValue() {\r\n        if (this.multiple && !Array.isArray(this.value)) {\r\n            this.value = [];\r\n        }\r\n    }\r\n    initEditing() {\r\n        if (this.searchable) {\r\n            this.watch(() => this.opened, (opened) => {\r\n                if (!opened && this.editing) {\r\n                    this.endEditing();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onClick() {\r\n        if (this.searchable && !this.editing) {\r\n            this.startEditing();\r\n        }\r\n    }\r\n    select(values) {\r\n        if (this.multiple) {\r\n            this.value = values;\r\n        }\r\n        else {\r\n            this.value = values[0];\r\n            this.hidePopup();\r\n        }\r\n        this.emit('change', this.value);\r\n    }\r\n    async startEditing() {\r\n        this.editing = true;\r\n        this.inputed = '';\r\n        await flit_1.renderComplete();\r\n        this.refs.input.focus();\r\n    }\r\n    endEditing() {\r\n        this.editing = false;\r\n    }\r\n    async onPopupOpened() {\r\n        await flit_1.renderComplete();\r\n        if (this.editing && this.refs.input) {\r\n            this.refs.input.focus();\r\n        }\r\n        // We should not ref popup el by `:ref`, or it will can't be released.\r\n        if (this.popupBinding && this.popupBinding.popup) {\r\n            let popupEl = this.popupBinding.popup.el;\r\n            popupEl.style.minWidth = String(this.el.offsetWidth) + 'px';\r\n            await flit_1.renderComplete();\r\n            let el = popupEl.querySelector('.selected__f-list');\r\n            if (el && ff_1.getScrollDirection(this.refs.list) === 'y') {\r\n                ff_1.scrollToTop(el);\r\n            }\r\n        }\r\n    }\r\n    onInput() {\r\n        this.inputed = this.refs.input.value;\r\n        this.showPopup();\r\n    }\r\n};\r\nSelect = __decorate([\r\n    flit_1.define('f-select')\r\n], Select);\r\nexports.Select = Select;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ButtonGroup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet ButtonGroup = class ButtonGroup extends flit_1.Component {\r\n    static style() {\r\n        let { textColor, backgroundColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t}\n\n\t\tbutton{\n\t\t\t&:nth-child(n+2){\n\t\t\t\tmargin-left: -1px;\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-bottom-left-radius: 0;\n\t\t\t}\n\t\n\t\t\t&:nth-last-child(n+2){\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t\tborder-bottom-right-radius: 0;\n\t\t\t}\n\t\n\t\t\t&[primary]{\n\t\t\t\tposition: relative;\n\t\t\t\tz-index: 1;\n\t\t\t\tbackground: ${textColor};\n\t\t\t\tborder-color: ${textColor};\n\t\t\t\tcolor: ${backgroundColor};\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tposition: relative;\n\t\t\t\tz-index: 1;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n};\r\nButtonGroup = __decorate([\r\n    flit_1.define('f-buttongroup')\r\n], ButtonGroup);\r\nexports.ButtonGroup = ButtonGroup;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Navigation = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst list_1 = require(\"./list\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Navigation = class Navigation extends list_1.List {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'navigation';\r\n        this.title = '';\r\n    }\r\n    static style() {\r\n        let { backgroundColor, adjust, adjustFontSize } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\tborder-bottom: none;\n\t\t\tbackground: ${backgroundColor.toMiddle(9)};\n\t\t\toverflow-y: auto;\n\t\t}\n\n\t\t.title{\n\t\t\tfont-size: ${adjustFontSize(18)}px;\n\t\t\tfont-weight: 300;\n\t\t\tmargin-top: ${adjust(4)}px;\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<tempalte>\n\t\t\t${this.title ? flit_1.html `\n\t\t\t<div class=\"title\">\n\t\t\t\t${this.title}\n\t\t\t</div>` : ''}\n\n\t\t\t${this.renderDataOrChildren(this.data)}\n\t\t</tempalte>`;\r\n    }\r\n};\r\nNavigation = __decorate([\r\n    flit_1.define('f-navigation')\r\n], Navigation);\r\nexports.Navigation = Navigation;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Textarea = exports.Input = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst form_1 = require(\"./form\");\r\nlet Input = class Input extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'text';\r\n        this.touched = false;\r\n        this.valid = null;\r\n        this.placeholder = '';\r\n        this.value = '';\r\n        this.validator = null;\r\n        this.error = '';\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, errorColor, borderColor, backgroundColor, mainColor, successColor, focusBlurRadius } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tbackground: ${backgroundColor.toMiddle(5)};\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${borderColor};\n\t\t}\n\n\t\tinput, textarea{\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: none;\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor.alpha(0.5)};\n\t\t\t}\n\t\t}\n\n\t\tinput{\n\t\t\theight: 100%;\n\t\t\tpadding: 0 0 0 ${adjust(8)}px;\n\t\t}\n\n\t\ttextarea{\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpadding: ${adjust(4)}px ${adjust(8)}px;\n\t\t}\n\n\t\t.valid{\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${successColor};\n\n\t\t\tinput, textarea{\n\t\t\t\tpadding-right: ${adjust(28)}px;\n\n\t\t\t\t&:focus{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${successColor.alpha(0.5)};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.invalid{\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${errorColor};\n\n\t\t\tinput, textarea{\n\t\t\t\tpadding-right: ${adjust(28)}px;\n\n\t\t\t\t&:focus{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${errorColor.alpha(0.5)};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.valid-icon{\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 6px;\n\t\t\tcolor: ${successColor};\n\t\t}\n\n\t\t.error{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 100%;\n\t\t\tmargin-bottom: -${adjust(28)}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tcolor: ${errorColor};\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template\n\t\t\t:class.valid=${this.touched && this.valid === true}\n\t\t\t:class.invalid=${this.touched && this.valid === false}\n\t\t>\n\t\t\t<input type=${this.type}\n\t\t\t\tplaceholder=${this.placeholder || ''}\n\t\t\t\t.value=${this.value}\n\t\t\t\t:ref=\"input\"\n\t\t\t\t@blur=${this.onBlur}\n\t\t\t\t@input=${(e) => this.onInput(e)}\n\t\t\t\t@change=${(e) => this.onChange(e)}\n\t\t\t/>\n\t\t\t${this.touched && this.valid === true ? flit_1.html `<f-icon class=\"valid-icon\" .type=\"checked\" />` : ''}\n\t\t\t${this.touched && this.error ? flit_1.html `<div class=\"error\">${this.error}</div>` : ''}\n\t\t</template>\n\t\t`;\r\n    }\r\n    onBlur() {\r\n        this.touched = true;\r\n    }\r\n    onInput(e) {\r\n        let input = e.target;\r\n        let value = input.value;\r\n        this.emit('input', value);\r\n    }\r\n    onChange(e) {\r\n        let input = e.target;\r\n        let value = this.value = input.value;\r\n        this.validate();\r\n        this.emit('change', value, this.valid);\r\n    }\r\n    onCreated() {\r\n        this.validate();\r\n        let form = flit_1.getClosestComponent(this.el, form_1.Form);\r\n        if (form) {\r\n            form.register(this);\r\n        }\r\n    }\r\n    validate() {\r\n        if (this.validator) {\r\n            this.error = this.validator(this.value);\r\n            this.valid = !this.error;\r\n        }\r\n    }\r\n    setTouched(touched) {\r\n        this.touched = touched;\r\n    }\r\n};\r\nInput = __decorate([\r\n    flit_1.define('f-input')\r\n], Input);\r\nexports.Input = Input;\r\nlet Textarea = class Textarea extends Input {\r\n    static style() {\r\n        return flit_1.css `\n\t\t:host{\n\t\t\theight: auto;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<textarea\n\t\t\tplaceholder=${this.placeholder}\n\t\t\t.value=${this.value}\n\t\t\t:ref=\"input\"\n\t\t\t:class.valid=${this.touched && this.valid === true}\n\t\t\t:class.invalid=${this.touched && this.valid === false}\n\t\t\t@focus=${this.onBlur}\n\t\t\t@input=${(e) => this.onInput(e)}\n\t\t\t@change=${(e) => this.onChange(e)}\n\t\t/>\n\t\t`;\r\n    }\r\n};\r\nTextarea = __decorate([\r\n    flit_1.define('f-textarea')\r\n], Textarea);\r\nexports.Textarea = Textarea;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AEGLFontWeightSelect = exports.AEGLFontFamilySelect = exports.AEGLSceneEditor = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst scene_editor_1 = require(\"../aegl-scene/scene-editor\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst color_1 = require(\"../aegl/helpers/color\");\nconst fonts_list_1 = require(\"../aegl/helpers/fonts-list\");\nlet globalUserSceneData = null;\n/** 负责进行场景数据编辑. */\nlet AEGLSceneEditor = class AEGLSceneEditor extends flit_1.Component {\n    project;\n    editor;\n    ready;\n    currentScene = null;\n    includedFontNames = [];\n    adjustingDuration = false;\n    render() {\n        let showSceneEditor = this.currentScene && this.project.renderer.paused;\n        let editorResult = showSceneEditor ? this.renderCurrentSceneEditor() : null;\n        return (0, flit_1.html) `\n\t\t<div class=\"aegl-editor\">\n\t\t\t${this.renderScenes()}\n\t\t\t${(0, flit_1.cache)(editorResult, { transition: 'fade' })}\n\t\t</div>\n\t\t`;\n    }\n    renderScenes() {\n        let drop = (0, flit_ui_1.droppable)((scene, index) => this.onDropScene(scene, index));\n        return (0, flit_1.html) `\n\t\t\t<div class=\"editor-scenes\" ${drop}>\n\t\t\t\t<div class=\"editor-scenes-slider\">\n\t\t\t\t\t${\n        // 这里使用 info 作为数据进行枚举是因为场景总是位置不变, 只是交换数据,\n        // 我们想让数据交换的顺序和元素交换顺序保持一致, 因此对 info 进行枚举.\n        (0, flit_1.repeat)(this.editor.scenes.map(scene => scene.info), (_info, index) => this.renderScene(this.editor.scenes[index], index))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n    }\n    renderScene(scene, index) {\n        let path = scene.info.thumbnailPath;\n        let left = scene.main.root.inPoint / this.project.data.duration;\n        let width = (scene.main.root.outPoint - scene.main.root.inPoint) / this.project.data.duration;\n        let mediaPosition = scene.info.mediaPosition;\n        // 只要有多媒体资源就可以拖动.\n        let drag = scene.canBeMoved ? (0, flit_ui_1.draggable)(scene, index) : null;\n        let menu = scene.canBeRemoved && this.editor.scenes.length >= 2 ? (0, flit_ui_1.contextmenu)(this.renderSceneContextMenu(scene)) : null;\n        return (0, flit_1.html) `\n\t\t\t<div class=\"editor-scene\"\n\t\t\t\t:style.left=${`calc(${left * 100}% - 2px)`}\n\t\t\t\t:style.width=${`calc(${width * 100}% + 4px)`}\n\t\t\t\t:class.active=${this.currentScene === scene}\n\t\t\t\t:class.covered=${!scene.media}\n\t\t\t\t@click=${() => this.viewScene(scene)}\n\t\t\t\t${drag}\n\t\t\t\t${menu}\n\t\t\t>\n\t\t\t\t<img :src=${path} :style.object-position=\"${mediaPosition[0] * 100}% ${mediaPosition[1] * 100}%\" />\n\t\t\t</div>\n\t\t`;\n    }\n    renderSceneContextMenu(scene) {\n        return () => (0, flit_1.html) `\n\t\t<f-contextmenu>\n\t\t\t<f-list .data=${[\n            { text: (0, flit_1.html) `<div @click=${() => this.removeScene(scene)}>Remove Scene</div>` },\n        ]}/>\n\t\t</f-contextmenu>\n\t\t`;\n    }\n    renderCurrentSceneEditor() {\n        return (0, flit_1.html) `\n\t\t<div class=\"current-scene\">\n\t\t\t<header class=\"scene-title\">\n\t\t\t\tEdit Scene\n\t\t\t</header>\n\n\t\t\t<div class=\"scene-content\">\n\t\t\t\t${this.renderPhotoAdjustment()}\n\t\t\t\t${this.renderRightEditing()}\n\t\t\t</div>\n\t\t</div>`;\n    }\n    renderPhotoAdjustment() {\n        let currentScene = this.currentScene;\n        let src = currentScene.info.thumbnailPath;\n        let { imageRect, containerSize } = this.generatePhotoStyle();\n        return (0, flit_1.html) `\n\t\t<div class=\"scene-photo\" :style.width.px=${containerSize.width + 8}>\n\t\t\t<div class=\"photo-area\">\n\t\t\t\t<div class=\"photo-clip\" :style.width.px=${containerSize.width}>\n\t\t\t\t\t<img :src=${src} :style=${imageRect}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"photo-full\">\n\t\t\t\t\t<img :src=${src} :style=${imageRect} @mousedown=${this.startDraggingPhoto} />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<button :show=${src} flat @click=${() => this.changeSceneMedia(currentScene)}>Replace Photo</button>\n\t\t</div>\n\t\t`;\n    }\n    renderRightEditing() {\n        let scene = this.currentScene;\n        return (0, flit_1.html) `\n\t\t<div class=\"scene-text\">\n\t\t\t<f-row :show=${scene.canSetDuration}>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"min-width: 100px;\">\n\t\t\t\t\tDuration:\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"10\" style=\"display: flex;\">\n\t\t\t\t\t<f-slider .value=${scene.getDuration()} .min=\"1\" .max=\"20\" .step=\"0.1\" .decimalCount=\"1\"\n\t\t\t\t\t\t@change=${(duration) => this.changeDuration(scene, duration)}\n\t\t\t\t\t\t@dragstart=${() => this.adjustingDuration = true}\n\t\t\t\t\t\t@dragend=${() => { this.adjustingDuration = false; this.checkCurrentScene(); }}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"4\">\n\t\t\t\t\t<button style=\"margin-left: 8px; font-size: 12px;\" @click=${() => this.resetDuration(scene)}>Reset</button>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\n\t\t\t${(0, flit_1.cache)(scene.text ? this.renderTextEdit() : '', { transition: 'fade' })}\n\t\t</div>`;\n    }\n    renderTextEdit() {\n        let scene = this.currentScene;\n        let textLayer = scene.text.layers[0];\n        return (0, flit_1.html) `\n\t\t<div>\n\t\t\t<f-row>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"padding-top: 3px; min-width: 100px;\">\n\t\t\t\t\tText:\n\t\t\t\t</f-col>\n\n\t\t\t\t<f-col .span=\"22\" style=\"max-width: calc(100% - 100px);\">\n\t\t\t\t\t<f-textarea type=\"text\"\n\t\t\t\t\t\t.value=${textLayer.text}\n\t\t\t\t\t\t.placeholder=\"Add Text Here\"\n\t\t\t\t\t\t:style='font-family: \"${textLayer.fontFamily}\"'\n\t\t\t\t\t\t:ref=\"textarea\"\n\t\t\t\t\t\t@@keydown.stop=${() => { }}\n\t\t\t\t\t\t@input=${(value) => this.changeText(scene, value)}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\n\t\t\t<f-row>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"min-width: 100px;\">\n\t\t\t\t\tFont Family:\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"10\">\n\t\t\t\t\t<aegl-font-family-select\n\t\t\t\t\t\t.additionalFontNames=${this.includedFontNames}\n\t\t\t\t\t\t.value=${textLayer.fontFamily}\n\t\t\t\t\t\t@change=${(value) => this.changeFontFamily(scene, value)}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"4\">\n\t\t\t\t\t<button style=\"margin-left: 8px; font-size: 12px;\" @click=${() => this.resetFontFamily(scene)}>Reset</button>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\t\t\t\n\t\t\t<f-row>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"min-width: 100px;\">\n\t\t\t\t\tFont Weight:\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"10\">\n\t\t\t\t\t<aegl-font-weight-select\n\t\t\t\t\t\t.family=${textLayer.fontFamily}\n\t\t\t\t\t\t.value=${textLayer.fauxBold ? 'Bold' : fonts_list_1.FontList.getFontWeight(textLayer.fontStyle || '')}\n\t\t\t\t\t\t@change=${(fontWeight) => this.changeFontStyle(scene, fontWeight)}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"4\">\n\t\t\t\t\t<button style=\"margin-left: 8px; font-size: 12px;\" @click=${() => this.resetFontStyle(scene)}>Reset</button>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\n\t\t\t<f-row>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"min-width: 100px;\">\n\t\t\t\t\tFont Size:\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"10\">\n\t\t\t\t\t<f-slider .value=${textLayer.fontSize} .min=\"1\" .max=\"400\" .step=\"1\" .decimalCount=\"0\"\n\t\t\t\t\t\t@change=${(fontSize) => this.changeFontSize(scene, fontSize)}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"4\">\n\t\t\t\t\t<button style=\"margin-left: 8px; font-size: 12px;\" @click=${() => this.resetFontSize(scene)}>Reset</button>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\n\t\t\t<f-row>\n\t\t\t\t<f-col .span=\"2\" class=\"text-label\" style=\"min-width: 100px;\">\n\t\t\t\t\tText Color:\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"10\">\n\t\t\t\t\t<input type=\"color\" .value=${(0, color_1.colorArrayToString)(textLayer.fillColor || [0, 0, 0])}\n\t\t\t\t\t\t@input=${(e) => this.changeTextColor(scene, e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</f-col>\n\t\t\t\t<f-col .span=\"4\">\n\t\t\t\t\t<button style=\"margin-left: 8px; font-size: 12px;\" @click=${() => this.resetTextColor(scene)}>Reset</button>\n\t\t\t\t</f-col>\n\t\t\t</f-row>\n\t\t</div>\n\t\t`;\n    }\n    onCreated() {\n        // 初始化编辑器.\n        this.editor = new scene_editor_1.SceneEditor(this.project, globalUserSceneData);\n        // 渲染树更新后更新 UI.\n        this.project.renderer.on('updatetree', this.onUpdateTree, this);\n        this.ready = this.editor.ready.then();\n    }\n    async onReady() {\n        await fonts_list_1.FontList.ensure();\n        // 查找包含的字体.\n        this.includedFontNames = this.project.footages.getIncludedFontFamilies().sort();\n    }\n    onDisconnected() {\n        globalUserSceneData = this.editor.extractLocalSceneData();\n    }\n    /** 当渲染树更新时触发. */\n    onUpdateTree(time) {\n        if (!this.adjustingDuration) {\n            this.checkSceneAtTime(time);\n        }\n    }\n    /** 查找当前激活的场景. */\n    checkCurrentScene() {\n        this.checkSceneAtTime(this.project.renderer.time);\n    }\n    /** 查找当前激活的场景. */\n    checkSceneAtTime(time) {\n        this.currentScene = this.editor.getActiveSceneAtTime(time);\n    }\n    /** 上传用户照片. 返回一个建议的宽高比. */\n    async useMyPhotos() {\n        let noti = flit_ui_1.notification.unique();\n        let count = await this.editor.uploadMedias((loaded, total) => {\n            noti.info(`Appending scenes (${loaded} / ${total})...`);\n        });\n        if (count > 0) {\n            noti.success(`Appended ${count} scenes.`);\n        }\n        this.project.notifyProjectUpdated();\n    }\n    /** 更换音乐. */\n    async changeMusic() {\n        await this.editor.changeMusic();\n        let audioLayer = this.project.footages.getReplaceableAudioLayerData();\n        this.project.notifyLayerUpdated(audioLayer);\n        flit_ui_1.notification.success(`Replaces audio.`);\n    }\n    /** 将时间轴拉倒场景的中央. */\n    viewScene(scene) {\n        this.project.renderer.pause();\n        let time = (scene.main.root.inPoint + scene.main.root.outPoint) / 2;\n        this.project.renderer.setTime(time);\n    }\n    /** 拖动以交换场景. */\n    onDropScene(scene, index) {\n        let changedScenes = this.editor.moveSceneTo(scene, index);\n        for (let scene of changedScenes) {\n            scene.notifyMediaChanged();\n        }\n    }\n    /** 移除场景. */\n    removeScene(scene) {\n        this.editor.removeScene(scene);\n        this.project.notifyProjectUpdated();\n    }\n    /** 生成图片的位置信息. */\n    generatePhotoStyle() {\n        let aspectRatio = this.project.data.width / this.project.data.height;\n        let h = 180;\n        let w = h * aspectRatio;\n        let currentScene = this.currentScene;\n        if (!currentScene.media) {\n            return {\n                imageRect: {\n                    left: 0,\n                    top: 0,\n                    width: w,\n                    height: h,\n                },\n                containerSize: {\n                    width: w,\n                    height: h,\n                }\n            };\n        }\n        let { mediaWidth, mediaHeight, mediaPosition } = currentScene.info;\n        let scaling = w / mediaWidth;\n        if (mediaHeight * scaling < h) {\n            scaling = h / mediaHeight;\n        }\n        let width = mediaWidth * scaling;\n        let height = mediaHeight * scaling;\n        let left = (w - width) * mediaPosition[0];\n        let top = (h - height) * mediaPosition[1];\n        return {\n            imageRect: {\n                left,\n                top,\n                width,\n                height,\n            },\n            containerSize: {\n                width: w,\n                height: h,\n            }\n        };\n    }\n    /** 拖动图片并且动态更改其位置. */\n    startDraggingPhoto(e) {\n        let currentScene = this.currentScene;\n        if (!currentScene.media || !currentScene.willCropMedia()) {\n            return;\n        }\n        let { mediaWidth, mediaHeight, mediaPosition } = currentScene.info;\n        let aspectRatio = this.project.data.width / this.project.data.height;\n        let h = 180;\n        let w = h * aspectRatio;\n        let startPositionX = mediaPosition[0];\n        let startPositionY = mediaPosition[1];\n        let startX = e.clientX;\n        let startY = e.clientY;\n        let scaling = w / mediaWidth;\n        if (mediaHeight * scaling < h) {\n            scaling = h / mediaHeight;\n        }\n        let width = mediaWidth * scaling;\n        let height = mediaHeight * scaling;\n        let moved = false;\n        let onMouseMove = (e) => {\n            e.preventDefault();\n            let moveX = e.clientX - startX;\n            let moveY = e.clientY - startY;\n            let newPositionX = moveX / (w - width) + startPositionX;\n            let newPositionY = moveY / (h - height) + startPositionY;\n            moved = moveX !== 0 || moveY !== 0;\n            newPositionX = (0, ff_1.constrain)(newPositionX || 0, 0, 1);\n            newPositionY = (0, ff_1.constrain)(newPositionY || 0, 0, 1);\n            currentScene.setMediaPosition([newPositionX, newPositionY]);\n        };\n        let onMouseUp = async () => {\n            (0, flit_1.off)(document, 'mousemove', onMouseMove);\n            if (moved) {\n                await currentScene.updateCroppedMedia();\n                currentScene.notifyMediaChanged();\n                //this.saveMediaPositionToJSON(currentScene)\n            }\n        };\n        e.preventDefault();\n        (0, flit_1.on)(document, 'mousemove', onMouseMove);\n        (0, flit_1.once)(document, 'mouseup', onMouseUp);\n    }\n    /** 保存原始模板图片的位置. */\n    // private async saveMediaPositionToJSON(scene: Scene) {\n    // \tif (!scene.info.replaced && scene.media && location.hostname === 'localhost') {\n    // \t\tlet params = {\n    // \t\t\ttemplate_id: this.project.data.id,\n    // \t\t\tfile_name: getPathName(scene.media.layers[0].path as string),\n    // \t\t\taspect_ratio: this.project.data.width / this.project.data.height,\n    // \t\t} as any\n    // \t\tlet query = new URLSearchParams(params).toString()\n    // \t\ttry {\n    // \t\t\tawait fetch('http://localhost:8081/media-position/update?' + query, {\n    // \t\t\t\tmethod: 'PATCH',\n    // \t\t\t\theaders: {\n    // \t\t\t\t\t\"Content-Type\": \"application/json\",\n    // \t\t\t\t},\n    // \t\t\t\tbody: JSON.stringify(scene.info.mediaPosition),\n    // \t\t\t})\n    // \t\t}\n    // \t\tcatch (err) {\n    // \t\t\tnotification.warn(`请运行 \"npm run start-dev\" 来开启 Web 服务以保存模板默认图片的位置调整!`)\n    // \t\t}\n    // \t}\n    // }\n    /** 修改图片. */\n    async changeSceneMedia(scene) {\n        await this.editor.changeSceneMedia(scene);\n        scene.notifyMediaChanged();\n    }\n    /** 修改文本. */\n    changeText(scene, text) {\n        scene.setText(text);\n        this.project.notifyUpdated();\n        this.refs.textarea.style.height = this.refs.textarea.querySelector('textarea').scrollHeight + 'px';\n    }\n    /** 修改字体. */\n    changeFontFamily(scene, fontFamily) {\n        this.editor.setBunchFontFamily(scene, fontFamily);\n        let fontWeights = fonts_list_1.FontList.getFontWeightList(fontFamily) || ['Regular', 'Bold'];\n        let keepOldFontStyle = scene.info.fontStyle && fontWeights.includes(scene.info.fontStyle);\n        if (!keepOldFontStyle) {\n            this.editor.setBunchFontStyle(scene, fontWeights.includes('Regular') ? 'Regular' : fontWeights[0]);\n        }\n        this.project.notifyUpdated();\n    }\n    /** 修改字号. */\n    changeFontSize(scene, fontSize) {\n        this.editor.setBunchFontSize(scene, fontSize);\n        this.project.notifyUpdated();\n    }\n    /** 修改颜色. */\n    changeTextColor(scene, color) {\n        this.editor.setBunchFillColor(scene, new flit_ui_1.Color(color).getRGB());\n        this.project.notifyUpdated();\n    }\n    /** 修改是否为粗体 */\n    changeFontStyle(scene, fontStyle) {\n        this.editor.setBunchFontStyle(scene, fontStyle);\n        this.project.notifyUpdated();\n    }\n    /** 重置字体. */\n    resetFontFamily(scene) {\n        this.changeFontFamily(scene, scene.startFontFamily);\n    }\n    /** 重置字号. */\n    resetFontSize(scene) {\n        this.changeFontSize(scene, scene.startFontSize);\n    }\n    /** 重置字粗. */\n    resetFontStyle(scene) {\n        this.changeFontStyle(scene, scene.startFontStyle);\n    }\n    /** 重置文字颜色. */\n    resetTextColor(scene) {\n        this.changeTextColor(scene, scene.startFillColor);\n    }\n    /** 修改场景长度. */\n    changeDuration(scene, duration) {\n        this.editor.setSceneDuration(scene, duration);\n        this.project.notifyTimelineUpdated();\n    }\n    /** 重置场景长度. */\n    resetDuration(scene) {\n        this.editor.resetSceneDuration(scene);\n        this.project.notifyTimelineUpdated();\n    }\n    /** 调整总时长. */\n    // async adjustTotalDuration() {\n    // \tlet newDurationText = await dialog.prompt(`请输入你所期望的总时长, 单位为秒, 当前时长为 ${toDecimal(this.project.data.duration, 1)} 秒:`)\n    // \tif (!newDurationText && !Number(newDurationText)) {\n    // \t\treturn\n    // \t}\n    // \tlet newDuration = Number(newDurationText)\n    // \tawait this.adjustWithTotalDuration(newDuration)\n    // }\n    /** 调整总时长. */\n    async adjustWithTotalDuration(newDuration) {\n        newDuration = (0, ff_1.toDecimal)(newDuration, 1);\n        let oldDuration = this.project.data.duration;\n        let adjustable = this.editor.getAdjustableDuration();\n        let freezeDuration = oldDuration - adjustable.duration;\n        //let averageLoopSceneDuration = this.editor.getAverageLoopSceneStartDuration()\n        // 全部为视频素材或者都不可以调整.\n        if (adjustable.duration === 0) {\n            flit_ui_1.notification.error(`Can't adjust duration since scenes contain video assets.`);\n            return;\n        }\n        else {\n            let scaling = (0, ff_1.toDecimal)((newDuration - freezeDuration) / adjustable.duration, 2);\n            if (scaling === 1) {\n                flit_ui_1.notification.success(`Adjusted total duration to ${newDuration} seconds.`);\n                return;\n            }\n            // let sceneIncreaseCountToBalance = Math.round((newDuration - oldDuration) / averageLoopSceneDuration)\n            // let sceneIncreaseText = sceneIncreaseCountToBalance !== 0\n            // \t? `此外你还可以通过 ${sceneIncreaseCountToBalance > 0 ? '增加' : '减少'} <b>${Math.abs(sceneIncreaseCountToBalance)}</b> 个场景来保持当前几乎的场景几乎不缩放.`\n            // \t: ''\n            // let adjustText = adjustable.unAdjustableCount > 0\n            // \t? adjustable.count + ' / ' + (adjustable.unAdjustableCount + adjustable.count)\n            // \t: adjustable.count\n            // let btn = await dialog.confirm(\n            // \thtml`\n            // \t\t<div><b>${adjustText}</b> 个场景的时长将会${scaling > 1 ? '拉长' : '缩放'}为原先的 <b>${scaling}</b> 倍,\n            // \t\t这可能会导致场景中的动画偏${scaling > 1 ? '慢' : '快'}. ${sceneIncreaseText}</div>\n            // \t\t<div style=\"margin-top: 12px;\">你确定要应用此调整吗?</div>\n            // \t\t<div style=\"margin-top: 12px;\">你可以稍后通过 \"重置所有场景时长\" 来恢复此调整.<div>`,\n            // \t{\n            // \t\tactions: [\n            // \t\t\t{value: 'cancel', text: '取消'},\n            // \t\t\t{value: 'ok', text: '应用', primary: true},\n            // \t\t]\n            // \t}\n            // )\n            // if (btn !== 'ok') {\n            // \treturn\n            // }\n            this.editor.adjustScenesDuration(newDuration);\n        }\n        this.project.notifyTimelineUpdated();\n        flit_ui_1.notification.success(`Adjusted total duration to ${(0, ff_1.toDecimal)(this.project.data.duration, 1)} seconds.`);\n    }\n    /** 调整为音乐时长. */\n    async adjustToAudioDuration() {\n        let audioLauer = this.project.footages.getReplaceableAudioLayerData();\n        let audioDuration = audioLauer.duration;\n        await this.adjustWithTotalDuration(audioDuration);\n    }\n    /** 让场景和音乐的升高点进行卡点. */\n    // async alignToAudioRaisePoints() {\n    // \t// 只要有一个场景不能调节时长, 卡点失败.\n    // \tif (!this.editor.canAdjustAllSceneDurations()) {\n    // \t\tnotification.error(`此模板的部分场景因为包含视频素材而无法调节时长.`)\n    // \t\treturn\n    // \t}\n    // \tlet audioLayer = this.project.footages.getReplaceableAudioLayerData()\n    // \tlet audioPath = this.project.resourceLoader.getLayerPath(audioLayer)\n    // \tlet analyser = new AudioPointsAnalyser(audioPath)\n    // \tawait analyser.ready\n    // \tlet minLoopDuration = this.editor.getMinimumLoopSceneStartDuration()\n    // \tlet raisePoints = analyser.analysisAmplitudeRaisePoints(minLoopDuration)\n    // \tlet durations: number[] = []\n    // \tfor (let i = 1; i < raisePoints.length; i++) {\n    // \t\tdurations.push(raisePoints[i] - raisePoints[i - 1])\n    // \t}\n    // \tif (durations.length < this.editor.scenes.length) {\n    // \t\twhile (durations.length < this.editor.scenes.length) {\n    // \t\t\tdurations = [...durations, ...durations]\n    // \t\t}\n    // \t}\n    // \tdurations = durations.slice(0, this.editor.scenes.length)\n    // \tthis.editor.setDurations(durations)\n    // \tthis.project.notifyTimelineUpdated()\n    // \tlet sceneCountDiff = raisePoints.length - this.editor.scenes.length\n    // \tlet sceneCountText = sceneCountDiff !== 0\n    // \t\t? html`此外你还可以通过 ${sceneCountDiff > 0 ? '增加' : '减少'} <b>${Math.abs(sceneCountDiff)}</b> 个场景来刚好和音乐时长保持一致.`\n    // \t\t: ''\n    // \tif (raisePoints.length > this.editor.scenes.length) {\n    // \t\tnotification.success(html`已将场景和音乐同步. ${sceneCountText}`)\n    // \t}\n    // }\n    /** 重设总时长. */\n    resetTotalDuration() {\n        this.editor.resetTotalDuration();\n        this.project.notifyTimelineUpdated();\n        flit_ui_1.notification.success(`Reset total duration back to ${(0, ff_1.toDecimal)(this.project.data.duration, 1)} seconds.`);\n    }\n    /** 在重设项目数据之后重设所有场景. */\n    async reset() {\n        let noti = flit_ui_1.notification.unique();\n        await this.editor.reset((loaded, total) => {\n            noti.info(`Resetting scenes (${loaded} / ${total})...`);\n        });\n        noti.success(`All scenes reset.`, { hideDelay: 3000 });\n        this.project.notifyProjectUpdated();\n        this.checkCurrentScene();\n    }\n    /** 在重设项目数据之后重新加载场景数据. */\n    async reloadSceneData() {\n        let noti = flit_ui_1.notification.unique();\n        await this.editor.reloadSceneData((loaded, total) => {\n            noti.info(`Reloading scenes (${loaded} / ${total})...`);\n        });\n        noti.success(`All scenes reloaded.`, { hideDelay: 3000 });\n        this.project.notifyProjectUpdated();\n    }\n};\nexports.AEGLSceneEditor = AEGLSceneEditor;\nexports.AEGLSceneEditor = AEGLSceneEditor = __decorate([\n    (0, flit_1.define)('aegl-scene-editor')\n], AEGLSceneEditor);\nlet AEGLFontFamilySelect = class AEGLFontFamilySelect extends flit_ui_1.Select {\n    additionalFontNames = [];\n    async onCreated() {\n        let enFonts = [\n            ...fonts_list_1.FontList.getWebSafeFonts('en-US').map(v => [v, v]),\n            ...(await fonts_list_1.FontList.getFamilyListByLanguage('en-US')).map(v => [v.fontFamily, v.localizedName])\n        ]\n            .sort((a, b) => a[0].localeCompare(b[0], undefined, { numeric: true }));\n        let zhFonts = [\n            ...fonts_list_1.FontList.getWebSafeFonts('zh-CN').map(v => [v, v]),\n            ...(await fonts_list_1.FontList.getFamilyListByLanguage('zh-CN')).map(v => [v.fontFamily, v.localizedName])\n        ]\n            .sort((a, b) => a[0].localeCompare(b[0], undefined, { numeric: true }));\n        // 获得支持的字体以及系统安全字体.\n        this.data = [\n            ...enFonts,\n            ...zhFonts,\n        ]\n            .map(([fontFamily, localizedName]) => {\n            return { value: fontFamily, text: (0, flit_1.html) `<div style='font-family: \"${fontFamily}\"'>${localizedName}</div>` };\n        });\n    }\n};\nexports.AEGLFontFamilySelect = AEGLFontFamilySelect;\nexports.AEGLFontFamilySelect = AEGLFontFamilySelect = __decorate([\n    (0, flit_1.define)('aegl-font-family-select')\n], AEGLFontFamilySelect);\nlet AEGLFontWeightSelect = class AEGLFontWeightSelect extends flit_ui_1.Select {\n    family = '';\n    onCreated() {\n        this.watchImmediately(() => this.family, () => {\n            let weights = fonts_list_1.FontList.getFontWeightList(this.family) || ['Regular', 'Bold'];\n            if (!weights.includes('Bold')) {\n                weights.push('Bold');\n            }\n            this.data = weights.map(weight => {\n                return {\n                    value: weight,\n                    text: weight\n                };\n            });\n        });\n    }\n};\nexports.AEGLFontWeightSelect = AEGLFontWeightSelect;\nexports.AEGLFontWeightSelect = AEGLFontWeightSelect = __decorate([\n    (0, flit_1.define)('aegl-font-weight-select')\n], AEGLFontWeightSelect);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Search = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** Now only a input, will extend to list suggestted local or remote data in future. */\r\nlet Search = class Search extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.placeholder = '';\r\n        this.value = '';\r\n        this.focused = false;\r\n    }\r\n    static style() {\r\n        let { adjust, borderColor, borderRadius, mainColor, focusBlurRadius } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t}\n\n\t\tinput{\n\t\t\twidth: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: none;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tpadding: 0 ${adjust(26)}px 0 ${adjust(26)}px;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tborder-radius: ${borderRadius}px;\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor.alpha(0.5)};\n\t\t\t}\n\t\t}\n\n\t\t.search-icon{\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tleft: 8px;\n\t\t\tcolor: ${borderColor.toMiddle(10)};\n\t\t}\n\n\t\t.clear{\n\t\t\tdisplay: flex;\n\t\t\tposition: absolute;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 0px;\n\t\t\tcolor: ${borderColor.toMiddle(10)};\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\t\t}\n\n\t\t.close-icon{\n\t\t\tmargin: auto;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t\t<f-icon class=\"search-icon\" .type=\"search\" />\n\n\t\t\t<input type=\"text\"\n\t\t\t\tplaceholder=${this.placeholder}\n\t\t\t\t.value=${this.value}\n\t\t\t\t:ref=\"input\"\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t\t@change=${(e) => this.onChange(e)}\n\t\t\t/>\n\n\t\t\t${this.value && !this.focused ? flit_1.html `\n\t\t\t<div class=\"clear\" @click=${this.clear}>\n\t\t\t\t<f-icon class=\"close-icon\" .type=\"close\" />\n\t\t\t</div>` : ''}\n\t\t`;\r\n    }\r\n    onFocus() {\r\n        this.focused = true;\r\n        flit_1.once(this.refs.input, 'blur', () => this.focused = false);\r\n    }\r\n    onChange(e) {\r\n        let input = e.target;\r\n        let value = this.value = input.value;\r\n        this.emit('change', value);\r\n    }\r\n    clear() {\r\n        this.value = '';\r\n        this.emit('change', '');\r\n    }\r\n};\r\nSearch = __decorate([\r\n    flit_1.define('f-search')\r\n], Search);\r\nexports.Search = Search;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Switch = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Switch = class Switch extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checked = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, focusBlurRadius, backgroundColor } = theme_1.theme;\r\n        let h = adjust(18);\r\n        let w = h * 2 - 8;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\twidth: ${w}px;\n\t\t\theight: ${h}px;\n\t\t\tbackground: ${backgroundColor.toMiddle(23.3)};\n\t\t\tborder-radius: ${h / 2}px;\n\t\t\tpadding: 1px;\n\t\t\tmargin: ${(adjust(28) - h) / 2}px 0;\n\t\t\ttransition: background-color 0.2s ${flit_1.getEasing('ease-out-cubic')};\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tbackground: ${backgroundColor.toMiddle(33)};\n\t\t\t}\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t}\n\t\t}\n\t\n\t\t.ball{\n\t\t\twidth: ${h - 2}px;\n\t\t\theight: ${h - 2}px;\n\t\t\tbackground: ${backgroundColor};\n\t\t\tborder-radius: 50%;\n\t\t\ttransition: margin 0.2s ${flit_1.getEasing('ease-out-cubic')};\n\t\t}\n\t\n\t\t.on{\t\t\n\t\t\tbackground: ${mainColor};\n\n\t\t\t.ball{\n\t\t\t\tborder-color: ${backgroundColor};\n\t\t\t\tmargin-left: calc(100% - ${h - 2}px);\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tbackground: ${mainColor.darken(10)};\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template\n\t\t\ttabindex=\"0\"\n\t\t\t:class.on=${this.checked}\n\t\t\t@@click=${this.onClick}\n\t\t\t@@focus=${this.onFocus}\n\t\t\t@@blur=${this.onBlur}\n\t\t>\n\t\t\t<div class=\"ball\"></div>\n\t\t</template>\n\t\t`;\r\n    }\r\n    onClick() {\r\n        this.checked = !this.checked;\r\n        this.emit('change', this.checked);\r\n    }\r\n    onFocus() {\r\n        flit_1.on(document, 'keydown', this.onKeyDown, this);\r\n    }\r\n    onKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            this.onClick();\r\n        }\r\n        else if (e.key === 'ArrowLeft') {\r\n            if (this.checked) {\r\n                e.preventDefault();\r\n                this.onClick();\r\n            }\r\n        }\r\n        else if (e.key === 'ArrowRight') {\r\n            if (!this.checked) {\r\n                e.preventDefault();\r\n                this.onClick();\r\n            }\r\n        }\r\n    }\r\n    onBlur() {\r\n        flit_1.off(document, 'keydown', this.onKeyDown, this);\r\n    }\r\n};\r\nSwitch = __decorate([\r\n    flit_1.define('f-switch')\r\n], Switch);\r\nexports.Switch = Switch;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AEGLPreview = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst project_1 = require(\"../aegl/project/project\");\nconst json_manager_1 = require(\"../aegl/project/json-manager\");\nrequire(\"./aegl-encoding-config\");\nrequire(\"./aegl-scene-editor\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst ff_1 = require(\"@pucelle/ff\");\nlet AEGLPreview = class AEGLPreview extends flit_1.Component {\n    id = 0;\n    jsonManager;\n    project;\n    renderer;\n    encoding = false;\n    editorUI;\n    prepared = false;\n    currentAspectRatio = ff_1.storage.get('aegl_prefered_aspect_ratio', '16x9');\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"preview aegl-preview\">\n\t\t\t${this.renderCanvas()}\n\t\t\t${this.renderToolbar()}\n\t\t\t${this.renderProgress()}\n\t\t\t${this.renderEditor()}\n\t\t</template>\n\t\t`;\n    }\n    renderCanvas() {\n        return (0, flit_1.html) `\n\t\t\t<div class=\"preview-canvas\" :ref=\"canvasContainer\">\n\t\t\t\t<canvas :ref=\"canvas\" />\n\t\t\t</div>\n\t\t`;\n    }\n    renderToolbar() {\n        let ended = this.renderer ? this.renderer.ended : false;\n        let paused = this.renderer ? this.renderer.paused : false;\n        let musicDuration = this.project ? Math.round(this.project.footages.getReplaceableAudioLayerData().duration) : null;\n        // let qrCode = popup(() => html`\n        // \t<f-popup>\n        // \t\t<div style=\"font-size: 14px; line-height: 22px; max-width: 240px; padding: 8px 16px;\">\n        // \t\t\t<div>这里会放置一个二维码, 手机扫描之后会打开一个网页, 在网页中可以上传照片, 上传完成后会添加到这里.</div>\n        // \t\t\t<div style=\"margin-top: 8px;\">由于我们有能力自己编译 ffmpeg 的 wasm 版本, 所以苹果设备上的 heif 图片和 hevc 视频都不再是问题.</div>\n        // \t\t</div>\n        // \t</f-popup>`,\n        // \t{\n        // \t\talignPosition: 't',\n        // \t}\n        // )\n        let popDuration = (0, flit_ui_1.popup)(() => {\n            //let canNeverAdjust = this.editorUI && this.editorUI.editor.canNeverAdjustAllSceneDurations()\n            return (0, flit_1.html) `<f-menu>\n\t\t\t\t<f-list .data=${[\n                // {text: html`<div @click=${() => this.adjustTotalDuration()}>Adjust Total Duration</div>`},\n                { text: (0, flit_1.html) `\n\t\t\t\t\t\t<div @click=${() => this.adjustToAudioDuration()}\n\t\t\t\t\t\t\t:tooltip=\"${musicDuration} Sec\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tStretch to Audio Duration\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`\n                },\n                // {text: html`\n                // \t<div @click=${() => this.alignToAudioRaisePoints()}\n                // \t\t:style.opacity=${canNeverAdjust ? '0.4' : ''}\n                // \t\t:tooltip=${canNeverAdjust ? '由于此模板包含了背景视频素材而无法调整场景长度, 你可以尝试更换其他模板.' : ''}\n                // \t>\n                // \t\t同步场景和音乐节奏\n                // \t</div>`\n                // },\n                { text: (0, flit_1.html) `<div @click=${() => this.resetTotalDuration()}>Reset Duration of All Scenes</div>` },\n            ]} />\n\t\t\t</f-menu>\n\t\t\t`;\n        });\n        let popResolution = (0, flit_ui_1.popup)(() => (0, flit_1.html) `<f-menu>\n\t\t\t<f-list\n\t\t\t\t.selectable\n\t\t\t\t.selected=${[this.currentAspectRatio]}\n\t\t\t\t@select=${(value) => this.adjustAspectRatio(value[0])}\n\t\t\t\t.data=${Object.keys(this.jsonManager.currentAspectRatios).map(value => ({\n            value,\n            text: value,\n        }))}\n\t\t\t/>\n\t\t</f-menu>\n\t\t`);\n        return (0, flit_1.html) `\n\t\t<div class=\"preview-additional-toolbar\" :enable=${this.prepared}>\n\t\t\t<f-buttongroup>\n\t\t\t\t<button @click=${this.togglePaused}>${ended ? 'Play' : paused ? 'Play' : 'Pause'}</button>\n\n\t\t\t\t<button @click=${this.toFullscreen}>\n\t\t\t\t\tFullscreen\n\t\t\t\t</button>\n\t\t\t</f-buttongroup>\n\n\t\t\t<f-buttongroup>\n\t\t\t\t<button @click=${this.useMyPhotos}>\n\t\t\t\t\tReplace Photos\n\t\t\t\t</button>\n\n\t\t\t\t<!-- <button>\n\t\t\t\t\t扫描二维码传照片\n\t\t\t\t</button> -->\n\n\t\t\t\t<button @click=${this.changeMusic}>\n\t\t\t\t\tReplace Audio\n\t\t\t\t</button>\n\n\t\t\t\t<button @click=${this.reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</f-buttongroup>\n\n\t\t\t<button ${popDuration} :enable=${this.editorUI && this.editorUI.editor.canAdjustSomeSceneDurations()}>\n\t\t\t\tAdjust Duration\n\t\t\t\t<f-icon .type=\"down\" />\n\t\t\t</button>\n\n\t\t\t<button ${popResolution}>\n\t\t\t\tAdjust Resolution\n\t\t\t\t<f-icon .type=\"down\" />\n\t\t\t</button>\n\n\t\t\t<button @click=${this.encodeVideo} style=\"margin-left: auto\">\n\t\t\t\tExport\n\t\t\t</button>\n\t\t</div>\n\t\t`;\n    }\n    renderProgress() {\n        let time = this.renderer ? this.renderer.time : 0;\n        return (0, flit_1.html) `\n\t\t<f-slider class=\"preview-progress\" :ref=\"slider\"\n\t\t\t.min=\"0\"\n\t\t\t.max=${this.project ? this.project.data.duration : 0}\n\t\t\t.step=\"0.02\"\n\t\t\t.value=${time}\n\t\t\t.decimalCount=\"2\"\n\t\t\t@dragstart=${this.startChangingTime}\n\t\t\t@dragend=${this.endChangingTime}\n\t\t\t@change=${this.changeTime}\n\t\t/>\n\t\t`;\n    }\n    renderEditor() {\n        if (!this.project) {\n            return null;\n        }\n        return (0, flit_1.html) `\n\t\t\t<aegl-scene-editor :ref=${this.refEditor} .project=${this.project} />\n\t\t`;\n    }\n    /** 开始拖动时间轴时触发. */\n    startChangingTime() {\n        this.renderer.pause();\n    }\n    /** 结束拖动时间轴时触发. */\n    endChangingTime() {\n        if (!this.renderer.paused) {\n            this.renderer.play();\n        }\n    }\n    /** 更新渲染器的时间. */\n    changeTime(value) {\n        this.renderer.setTime(value);\n    }\n    async refEditor(el) {\n        this.editorUI = await (0, flit_1.getComponentAsync)(el);\n    }\n    async onReady() {\n        // 初始化 webgl 环境, 加载项目.\n        await this.loadProject();\n        // 更新尺寸信息, 但不实际绘制.\n        await this.adjustCanvasSize();\n        // 等待渲染完成并且生成 this.editorUI.\n        await (0, flit_1.renderComplete)();\n        // 加载资源然后开始播放.\n        let noti = flit_ui_1.notification.unique();\n        noti.info(`Loading assets of template ${this.id} ...`);\n        await this.editorUI.ready;\n        await this.renderer.play();\n        this.prepared = true;\n        noti.success(`Loaded assets of template ${this.id}.`, { hideDelay: 3000 });\n        this.on('disconnected', () => {\n            noti.hide();\n        });\n    }\n    onConnected() {\n        (0, flit_1.on)(window, 'resize', this.onResize, this);\n        (0, flit_1.on)(document, 'keydown.space.prevent', this.togglePaused, this);\n    }\n    onDisconnected() {\n        this.project.delete();\n        (0, flit_1.off)(window, 'resize', this.onResize, this);\n        (0, flit_1.off)(document, 'keydown', this.togglePaused, this);\n    }\n    /** 加载项目. */\n    async loadProject() {\n        let canvas = this.refs.canvas;\n        this.jsonManager = new json_manager_1.JSONManager(this.id);\n        await this.jsonManager.ready;\n        if (!this.jsonManager.currentAspectRatios[this.currentAspectRatio]) {\n            this.currentAspectRatio = Object.keys(this.jsonManager.currentAspectRatios)[0];\n        }\n        this.project = new project_1.Project(canvas, this.jsonManager.rootDirectory, this.jsonManager.requestProjectData(this.currentAspectRatio));\n        // 初始化渲染器.\n        // renderer 不是一个被 observed 的对象, 所以内部状态的切换需要通过事件 end 来通知.\n        this.renderer = this.project.renderer;\n        this.renderer.on('updatetime', () => this.update());\n        this.renderer.on('end', () => this.update());\n        // 根据参数降低预览分辨率.\n        let pixelRatio = devicePixelRatio;\n        let downSampling = (0, ff_1.firstMatch)(location.href, /downsampling=([\\d\\.]+)/);\n        if (downSampling) {\n            pixelRatio /= Number(downSampling);\n            this.renderer.setPixelRatio(pixelRatio);\n        }\n    }\n    /** 当页面缩放后触发. */\n    async onResize() {\n        if (this.project && !this.encoding) {\n            await this.adjustCanvasSize();\n        }\n    }\n    /** 调整 Canvas 元素的尺寸. */\n    async adjustCanvasSize() {\n        let maxWidth = this.refs.canvasContainer.offsetWidth;\n        let maxHeight = Infinity;\n        if (document.fullscreen) {\n            maxHeight = this.refs.canvasContainer.offsetHeight;\n        }\n        else {\n            maxHeight = 640;\n        }\n        let [w, h] = this.getCanvasSizeInContainMode(maxWidth, maxHeight);\n        await this.renderer.setCanvasSize(w, h);\n    }\n    /** 获得最合适的 canvas 尺寸. */\n    getCanvasSizeInContainMode(maxWidth, maxHeight) {\n        let vw = this.project.data.width;\n        let vh = this.project.data.height;\n        let w = maxWidth;\n        let h = vh / vw * w;\n        if (h > maxHeight) {\n            w *= maxHeight / h;\n            h = maxHeight;\n        }\n        w = Math.round(w / 2) * 2;\n        h = Math.round(h / 2) * 2;\n        return [w, h];\n    }\n    /** 切换暂停状态. */\n    togglePaused() {\n        if (!this.prepared) {\n            return;\n        }\n        else if (this.renderer.ended) {\n            this.renderer.playFrom(0);\n        }\n        else if (this.renderer.paused) {\n            this.renderer.play();\n        }\n        else {\n            this.renderer.pause();\n        }\n    }\n    /** 进入全屏. */\n    async toFullscreen() {\n        this.refs.canvasContainer.requestFullscreen();\n        await this.adjustCanvasSize();\n    }\n    /** 上传用户照片. */\n    async useMyPhotos() {\n        await this.editorUI.useMyPhotos();\n    }\n    /** 更换音乐. */\n    async changeMusic() {\n        // 音乐也被归类为场景数据.\n        await this.editorUI.changeMusic();\n    }\n    /** 调整总时长. */\n    // private async adjustTotalDuration() {\n    // \tawait this.editorUI.adjustTotalDuration()\n    // }\n    /** 调整为音乐时长. */\n    async adjustToAudioDuration() {\n        await this.editorUI.adjustToAudioDuration();\n    }\n    /** 让场景和音乐的升高点进行卡点. */\n    // private async alignToAudioRaisePoints() {\n    // \tawait this.editorUI.alignToAudioRaisePoints()\n    // }\n    /** 重设总时长. */\n    resetTotalDuration() {\n        this.editorUI.resetTotalDuration();\n    }\n    /** 调整分辨率. */\n    async adjustAspectRatio(aspectRatio) {\n        if (aspectRatio === this.currentAspectRatio) {\n            return;\n        }\n        // 更新当前宽高比.\n        this.currentAspectRatio = aspectRatio;\n        // 更新当前数据.\n        let newData = this.jsonManager.requestProjectData(aspectRatio);\n        this.project.data.setData(newData);\n        // 重置场景数据.\n        await this.editorUI.reloadSceneData();\n        // 调整和重绘.\n        await this.adjustCanvasSize();\n        ff_1.storage.set('aegl_prefered_aspect_ratio', aspectRatio);\n    }\n    /** 重置所有数据. */\n    async reset() {\n        let newData = this.jsonManager.requestProjectData(this.currentAspectRatio);\n        this.project.data.setData(newData);\n        await this.editorUI.reset();\n    }\n    /** 编码视频. */\n    async encodeVideo() {\n        (0, flit_1.off)(document, 'keydown.space.prevent', this.togglePaused, this);\n        this.renderer.pause();\n        let encodingConfig = (0, flit_1.renderComponent)((0, flit_1.html) `<aegl-encoding-config .project=${this.project}/>`).component;\n        encodingConfig.show();\n        encodingConfig.on('beginexport', () => {\n            this.project.clearResoures();\n            this.encoding = true;\n        });\n        encodingConfig.on('disconnected', () => {\n            (0, flit_1.on)(document, 'keydown.space.prevent', this.togglePaused, this);\n            this.encoding = false;\n            this.onResize();\n        });\n    }\n};\nexports.AEGLPreview = AEGLPreview;\nexports.AEGLPreview = AEGLPreview = __decorate([\n    (0, flit_1.define)('aegl-preview')\n], AEGLPreview);\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorCorrectionForChannelPreview = exports.ColorCorrectionPreview = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst preload_1 = require(\"../libs/util/preload\");\nconst simple_webgl_1 = require(\"../libs/webgl/simple-webgl\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst color_correction_uniforms_1 = require(\"./color-correction-uniforms\");\nconst todraw_1 = require(\"../libs/webgl/todraw\");\nconst sampler_1 = require(\"../libs/webgl/sampler\");\nconst file_1 = require(\"../libs/util/file\");\nlet ColorCorrectionPreview = class ColorCorrectionPreview extends flit_1.Component {\n    name = '';\n    imageStorageKey = 'colorCorrectionPreviewImage';\n    activeImage = '';\n    uniformSlides = [{\n            name: 'iPercent',\n            desc: 'Percent',\n            min: -100,\n            max: 100,\n            step: 1,\n            value: 0,\n        }];\n    sw;\n    uniformValues;\n    imageNaturalSize = [0, 0];\n    toDraw;\n    imageDirectory = 'color-correction';\n    images = [\n        'allef-vinicius-pa0vicn6dwe-unsplash.jpg',\n        'allef-vinicius-ttusgz8ulkk-unsplash.jpg',\n        'allef-vinicius-_ugpeypqiuc-unsplash.jpg',\n        'anastasia-dulgier-kokszzy9wsa-unsplash.jpg',\n        'anita-austvika-c-cdpe9shi4-unsplash.jpg',\n        'anthony-tran-mehojxixkdq-unsplash.jpg',\n        'benjamin-wong-4-ka5rdcesi-unsplash.jpg',\n        'deanna-alys-6lbbowkpzyq-unsplash.jpg',\n        'erol-ahmed-aiyfr0vbadk-unsplash.jpg',\n        'evie-s-vz3iqy0loaa-unsplash.jpg',\n        'floriane-vita-fyd3owbuxny-unsplash.jpg',\n        'icons8-team-7lnatqymzm4-unsplash.jpg',\n        'jacob-postuma-pxztwi015zi-unsplash.jpg',\n        'jake-peterson-vj4pn_psblo-unsplash.jpg',\n        'jessica-weiller-so4efi-d1nc-unsplash.jpg',\n        'joao-tzanno-g9_euqxpu4k-unsplash.jpg',\n        'newborn-1328454.jpg',\n        'quan-nguyen-sghnxezeo-q-unsplash.jpg',\n        'rachit-tank-2cfz_fb08um-unsplash.jpg',\n        'roksolana-zasiadko-3eaevlo2upi-unsplash.jpg',\n        'scott-webb--udznjsczse-unsplash.jpg',\n        'the-honest-company-aiade3prv90-unsplash.jpg',\n        'wyron-a-gy38n9wkjqi-unsplash.jpg',\n        'len_full.jpg',\n    ];\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"preview\">\n\t\t\t${this.renderToolbar()}\n\t\t\t${this.renderImages()}\n\t\t</template>\n\t\t`;\n    }\n    renderToolbar() {\n        return (0, flit_1.html) `\n\t\t<table class=\"preview-toolbar\">\n\t\t<tbody>\n\t\t\t${this.uniformSlides.map(({ name, desc, min, max, step, value: defaultValue }, index) => {\n            let currentValue = this.uniformValues[index];\n            return (0, flit_1.html) `\n\t\t\t\t<tr>\n\t\t\t\t\t<td>${desc}: <span class=\"preview-slide-value\">${currentValue}</span></td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<f-slider class=\"preview-slider\" .min=${min} .max=${max} .step=${step} .value=${currentValue}\n\t\t\t\t\t\t\t@change=${(value) => this.changeSliderValue(name, index, value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button class=\"preview-slider-button\" @click=${() => this.changeSliderValue(name, index, defaultValue)}>Reset</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t`;\n        })}\n\t\t</tbody>\n\t\t</table>\n\t\t`;\n    }\n    renderImages() {\n        return (0, flit_1.html) `\n\t\t\t<div class=\"preview-nav\">\n\t\t\t${this.images.map(name => (0, flit_1.html) `\n\t\t\t\t<div class=\"preview-nav-item\"\n\t\t\t\t\t:class.active=${name === this.activeImage}\n\t\t\t\t\t@click=${() => this.onClickImageNav(name)}\n\t\t\t\t>\n\t\t\t\t\t<img src=${(0, file_1.isAbsolutePath)(name) ? name : `pictures/${this.imageDirectory}/${name}`}>\n\t\t\t\t</div>\n\t\t\t`)}\n\t\t\t</div>\n\n\t\t\t<div class=\"preview-canvas\">\n\t\t\t\t<canvas :ref=\"canvas\" />\n\t\t\t</div>\n\t\t`;\n    }\n    onCreated() {\n        if (color_correction_uniforms_1.ColorCorrectionUniforms[this.name]) {\n            this.uniformSlides = color_correction_uniforms_1.ColorCorrectionUniforms[this.name];\n        }\n        this.uniformValues = this.uniformSlides.map(uniform => uniform.value);\n        this.activeImage = ff_1.storage.get(this.imageStorageKey, '');\n    }\n    async onReady() {\n        this.initGL();\n        for (let i = 0; i < this.uniformSlides.length; i++) {\n            let { name, value } = this.uniformSlides[i];\n            this.sw.setUniform(name, value);\n        }\n        await this.createToDraw();\n        await this.setImage(ff_1.storage.get(this.imageStorageKey, this.images[0]));\n    }\n    onConnected() {\n        (0, flit_1.on)(window, 'resize', this.onResize, this);\n        this.once('disconnected', () => {\n            (0, flit_1.off)(window, 'resize', this.onResize, this);\n        });\n    }\n    onResize() {\n        if (this.imageNaturalSize[0] > 0) {\n            this.adjustSize();\n            this.drawAll();\n        }\n    }\n    drawAll() {\n        this.sw.clear();\n        this.sw.drawAll();\n    }\n    adjustSize() {\n        let [iw, ih] = this.imageNaturalSize;\n        let w = this.el.offsetWidth;\n        let h = Math.round(ih / iw * w);\n        if (w > iw) {\n            w = iw;\n            h = ih;\n        }\n        this.sw.setCanvasSize(w, h);\n        this.sw.setUniform('iResolution', [w, h]);\n    }\n    onClickImageNav(name) {\n        if (!(0, file_1.isAbsolutePath)(name)) {\n            ff_1.storage.set(this.imageStorageKey, name);\n        }\n        this.setImage(name);\n    }\n    changeSliderValue(name, index, value) {\n        this.sw.setUniform(name, value);\n        this.uniformValues[index] = value;\n        this.drawAll();\n    }\n    async setImage(name) {\n        this.activeImage = name;\n        let imageURL = `pictures/${this.imageDirectory}/${name}`;\n        let image = await (0, preload_1.preloadImage)(imageURL);\n        this.imageNaturalSize = [image.naturalWidth, image.naturalHeight];\n        this.adjustSize();\n        this.toDraw.useSampler('iChannel', new sampler_1.PixelSampler(this.sw, image));\n        this.drawAll();\n    }\n    initGL() {\n        let canvas = this.refs.canvas;\n        this.sw = new simple_webgl_1.SimpleWebGL(canvas);\n        this.onGLReady();\n    }\n    async createToDraw() {\n        let vertCode = this.getVertexCode();\n        let fragCode = await this.loadCurrentFragmentCode();\n        this.toDraw = new todraw_1.ToDraw(this.sw, {\n            vertCode,\n            fragCode,\n            vertices: {\n                data: this.getDefaultVerticesData(),\n                count: 4,\n            },\n        });\n    }\n    getVertexCode() {\n        return `#version 300 es\n\t\tprecision mediump float;\n\t\tin vec4 vPosition;\n\t\tout vec2 fTextureCoord;\n\t\tvoid main() {\n\t\t\tgl_Position = vPosition;\n\t\t\tfTextureCoord = vPosition.xy / 2.0 + 0.5;\n\t\t}\n\t\t`;\n    }\n    getDefaultVerticesData() {\n        return {\n            vPosition: [\n                -1, 1,\n                -1, -1,\n                1, 1,\n                1, -1,\n            ]\n        };\n    }\n    async getDefaultFragCode() {\n        return `#version 300 es\n\t\t#ifdef GL_ES\n\t\tprecision mediump float;\n\t\t#endif\n\t\tin vec2 fTextureCoord;\n\t\tout vec4 fragColor;\n\t\tuniform sampler2D iChannel[1];\n\t\tvec4 getFragColor() {\n\t\t\treturn texture(iChannel[0], fTextureCoord);\n\t\t}\n\t\tvoid main() {\n\t\t\tfragColor = getFragColor(); \n\t\t}\n\t`;\n    }\n    async loadCurrentFragmentCode() {\n        return (await fetch(`shaders/color-corrections/out/${this.name}.frag`)).text();\n    }\n    onGLReady() { }\n};\nexports.ColorCorrectionPreview = ColorCorrectionPreview;\nexports.ColorCorrectionPreview = ColorCorrectionPreview = __decorate([\n    (0, flit_1.define)('color-correction-preview')\n], ColorCorrectionPreview);\nlet ColorCorrectionForChannelPreview = class ColorCorrectionForChannelPreview extends ColorCorrectionPreview {\n    colors = ['rgb(222, 56, 60)', 'rgb(222, 221, 60)', 'rgb(128, 217, 38)', 'rgb(60, 204, 225)', 'rgb(103, 103, 230)', 'rgb(221, 60, 221)'];\n    activeColor = 'rgb(222, 56, 60)';\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"preview\">\n\t\t\t${this.renderColors()}\n\t\t\t${this.renderToolbar()}\n\t\t\t${this.renderImages()}\n\t\t</template>\n\t\t`;\n    }\n    renderColors() {\n        return (0, flit_1.html) `\n\t\t<div class=\"preview-channels\">\n\t\t\t${this.colors.map((channel, index) => (0, flit_1.html) `\n\t\t\t\t<div :style.background=${channel}\n\t\t\t\t\t:class.active=${channel === this.activeColor}\n\t\t\t\t\t@click=${() => this.activeChannelInIndex(index)}\n\t\t\t\t />\n\t\t\t`)}\n\t\t</div>\n\t\t`;\n    }\n    onGLReady() {\n        this.sw.setUniform('colorToAdjust', new flit_ui_1.Color(this.activeColor).getRGB());\n    }\n    activeChannelInIndex(index) {\n        this.activeColor = this.colors[index];\n        this.sw.setUniform('colorToAdjust', new flit_ui_1.Color(this.activeColor).getRGB());\n        this.drawAll();\n    }\n};\nexports.ColorCorrectionForChannelPreview = ColorCorrectionForChannelPreview;\nexports.ColorCorrectionForChannelPreview = ColorCorrectionForChannelPreview = __decorate([\n    (0, flit_1.define)('color-correction-preview-for-channel')\n], ColorCorrectionForChannelPreview);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CheckboxGroup = exports.Checkbox = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nlet Checkbox = class Checkbox extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checked = false;\r\n        this.indeterminate = false;\r\n        // Used to compare with `checkboxGroup.value`\r\n        this.value = null;\r\n        this.checkboxGroup = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, focusBlurRadius, adjust } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.icon{\n\t\t\tmargin-right: ${adjust(6)}px;\n\t\t\tborder-radius: 4px;\n\t\t}\n\n\t\t.indeterminate, .checked{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.label{\n\t\t\tflex: 1;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let iconType = this.checked ? 'checkbox-checked' : this.indeterminate ? 'checkbox-indeterminate' : 'checkbox-unchecked';\r\n        return flit_1.html `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.checked=${this.checked}\n\t\t\t\t:class.indeterminate=${this.indeterminate}\n\t\t\t\t@@click=${this.onClick}\n\t\t\t\t@@focus=${this.onFocus}\n\t\t\t\t@@blur=${this.onBlur}\n\t\t\t>\n\t\t\t\t<f-icon class=\"icon\" .type=${iconType} />\n\t\t\t\t<div class=\"label\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        let group = flit_1.getClosestComponent(this.el, CheckboxGroup);\r\n        if (group) {\r\n            this.checkboxGroup = group;\r\n            this.checked = this.checkboxGroup.value === this.value;\r\n            this.checkboxGroup.register(this);\r\n        }\r\n    }\r\n    onClick() {\r\n        this.checked = !this.checked;\r\n        this.indeterminate = false;\r\n        this.emit('change', this.checked);\r\n    }\r\n    onFocus() {\r\n        flit_1.on(document, 'keydown.enter', this.onEnter, this);\r\n    }\r\n    onEnter(e) {\r\n        e.preventDefault();\r\n        this.onClick();\r\n    }\r\n    onBlur() {\r\n        flit_1.off(document, 'keydown', this.onEnter, this);\r\n    }\r\n};\r\nCheckbox = __decorate([\r\n    flit_1.define('f-checkbox')\r\n], Checkbox);\r\nexports.Checkbox = Checkbox;\r\nlet CheckboxGroup = class CheckboxGroup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.value = [];\r\n        this.ordered = false;\r\n        this.checkboxs = [];\r\n    }\r\n    register(checkbox) {\r\n        this.checkboxs.push(checkbox);\r\n        checkbox.on('change', this.onCheckboxChange.bind(this, checkbox));\r\n    }\r\n    onCheckboxChange(checkbox) {\r\n        if (checkbox.checked) {\r\n            this.value.push(checkbox.value);\r\n        }\r\n        else {\r\n            ff_1.removeWhere(this.value, value => value == checkbox.value);\r\n        }\r\n        if (this.ordered) {\r\n            let values = this.checkboxs.map(checkbox => checkbox.value);\r\n            ff_1.orderBy(this.value, item => values.findIndex(value => value == item));\r\n        }\r\n        this.emit('change', this.value);\r\n    }\r\n};\r\nCheckboxGroup = __decorate([\r\n    flit_1.define('f-checkboxgroup')\r\n], CheckboxGroup);\r\nexports.CheckboxGroup = CheckboxGroup;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierFunction = exports.FunctionCurve = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst sampling_1 = require(\"../libs/math/sampling\");\nconst ff_1 = require(\"@pucelle/ff\");\nlet FunctionCurve = class FunctionCurve extends flit_1.Component {\n    fn = (x) => x;\n    compiled;\n    xRange = [0, 1];\n    width = 100;\n    render() {\n        let [minX, maxX] = this.xRange;\n        let scale = Math.floor(this.width / (maxX - minX));\n        let step = Math.max(1 / scale, 0.001);\n        let coords = []; // in normal math axis\n        for (let x = minX; x <= maxX; x += step) {\n            x = (0, ff_1.toDecimal)(x, 4);\n            let y = (0, ff_1.toDecimal)(this.compiled(x), 4);\n            coords.push([x, y]);\n        }\n        let yValues = coords.map(coord => coord[1]);\n        let minY = Math.min(...yValues);\n        let maxY = Math.max(...yValues);\n        if (minY > 0) {\n            minY = 0;\n        }\n        else if (maxY < 0) {\n            maxY = 0;\n        }\n        coords = (0, sampling_1.simpleSamplingCoords)(coords, 0.001);\n        let d = joinCoordsToCurve(coords);\n        let axisLines = this.createAxisLines(minX, maxX, minY, maxY);\n        let w = this.width;\n        let h = Math.ceil((maxY - minY) * scale);\n        let transform = `matrix(${scale}, 0, 0, -${scale}, 0, ${Math.round((maxY + minY) * scale)})`; // to map math axis to SVG axis, so we can easily implement more fetures in future.\n        let viewBoxLeft = Math.round(minX * scale) - 4.5;\n        let viewBoxTop = Math.round(minY * scale) - 4.5;\n        let axisArrowWidth = 6 * step;\n        let axisArrowHeight = 6 * step;\n        return (0, flit_1.html) `\n\t\t<template class=\"function-curve\">\n\t\t\t<svg viewBox=\"${viewBoxLeft} ${viewBoxTop} ${w + 9} ${h + 9}\" width=\"${w + 9}\" height=\"${h + 9}\">\n\t\t\t\t<g style=\"transform: ${transform}\">\n\t\t\t\t\t${axisLines.map(([coord1, coord2]) => (0, flit_1.svg) `\n\t\t\t\t\t\t<line x1=\"${coord1[0]}\" y1=\"${coord1[1]}\" x2=\"${coord2[0]}\" y2=\"${coord2[1]}\"\n\t\t\t\t\t\t\tstroke-width=${step}\n\t\t\t\t\t\t\tstyle=\"stroke: #888; stroke-opacity: 0.5; stroke-dasharray: 0.05; stroke-dashoffset: 0.025\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\n\t\t\t\t\t<line x1=\"${minX}\" y1=\"0\" x2=\"${maxX}\" y2=\"0\" style=\"stroke: #888; stroke-width: ${step}; stroke-linecap: square;\"/>\n\t\t\t\t\t<line x1=\"0\" y1=\"${minY}\" x2=\"0\" y2=\"${maxY}\" style=\"stroke: #888; stroke-width: ${step}; stroke-linecap: square;\" />\n\n\t\t\t\t\t<path d=\"M${maxX + axisArrowWidth / 2} 0 l-${axisArrowWidth} ${axisArrowHeight / 2} l0 -${axisArrowHeight}Z\" style=\"fill: #888;\" />\n\t\t\t\t\t<path d=\"M0 ${maxY + axisArrowWidth / 2} l-${axisArrowWidth / 2} ${-axisArrowHeight} l${axisArrowWidth} 0Z\" style=\"fill: #888;\" />\n\n\t\t\t\t\t<path d=${d} style=\"stroke: currentColor; fill: none; stroke-width: ${step * 2};\" />\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t</template>\n\t\t`;\n    }\n    onCreated() {\n        this.watchImmediately(() => this.fn, (fn) => {\n            if (typeof fn === 'string') {\n                this.compiled = new Function('x', fn.replace(/^\\s*y\\s*=\\s*/, 'return '));\n            }\n            else {\n                this.compiled = fn;\n            }\n        });\n    }\n    createAxisLines(minX, maxX, minY, maxY) {\n        let axisLines = [];\n        for (let x = Math.ceil(minX); x <= maxX; x++) {\n            if (x === 0) {\n                continue;\n            }\n            axisLines.push([\n                [x, minY],\n                [x, maxY],\n            ]);\n        }\n        for (let y = Math.ceil(minY); y <= maxY; y++) {\n            if (y === 0) {\n                continue;\n            }\n            axisLines.push([\n                [minX, y],\n                [maxX, y],\n            ]);\n        }\n        return axisLines;\n    }\n};\nexports.FunctionCurve = FunctionCurve;\nexports.FunctionCurve = FunctionCurve = __decorate([\n    (0, flit_1.define)('function-curve')\n], FunctionCurve);\nlet BezierFunction = class BezierFunction extends FunctionCurve {\n    name = 'linear';\n    onCreated() {\n        this.compiled = (0, ff_1.getEasingFunction)(this.name);\n    }\n};\nexports.BezierFunction = BezierFunction;\nexports.BezierFunction = BezierFunction = __decorate([\n    (0, flit_1.define)('bezier-function')\n], BezierFunction);\n/** 输出连接多个点为直线的 SVG 代码. */\nfunction joinCoordsToCurve(coords) {\n    coords = coords.map(coord => [\n        (0, ff_1.toDecimal)(coord[0], 3),\n        (0, ff_1.toDecimal)(coord[1], 3),\n    ]);\n    let d = '';\n    for (let i = 0; i < coords.length; i++) {\n        let coord = coords[i];\n        if (i === 0) {\n            d += 'M' + coord[0] + ' ' + coord[1];\n        }\n        else {\n            d += ' L' + coord[0] + ' ' + coord[1];\n        }\n    }\n    return d;\n}\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FixVideoBlackSurrounding = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst ffmpeg_1 = require(\"../libs/ffmpeg/ffmpeg\");\nconst video_frames_extractor_1 = require(\"../aegl/helpers/video-frames-extractor\");\nconst simple_webgl_1 = require(\"../libs/webgl/simple-webgl\");\nconst todraw_1 = require(\"../libs/webgl/todraw\");\nconst sampler_1 = require(\"../libs/webgl/sampler\");\nconst media_1 = require(\"../aegl/helpers/media\");\nconst file_1 = require(\"../libs/util/file\");\nconst fix_video_black_surrounding_blend_frag_1 = require(\"./fix-video-black-surrounding-blend.frag\");\nconst fix_video_black_surrounding_smooth_frag_1 = require(\"./fix-video-black-surrounding-smooth.frag\");\nconst preload_1 = require(\"../libs/util/preload\");\nlet FixVideoBlackSurrounding = class FixVideoBlackSurrounding extends flit_1.Component {\n    processing = false;\n    drawProgress = 0;\n    encodingProgress = 0;\n    videoFiles = null;\n    toDraws;\n    video;\n    mask;\n    time = 0;\n    render() {\n        return (0, flit_1.html) `\n\t\t<canvas :show=${this.videoFiles} :ref=\"canvas\" />\n\n\t\t<div :show=${this.videoFiles}>\n\t\t\t<f-slider style=\"width: 300px;\" .min=${0} .max=${this.video ? this.video.duration : 0} .step=${0.04}\n\t\t\t\t.value=${this.time} @change=${(time) => this.drawFrameAtTime(time)}\n\t\t\t/>\n\t\t</div>\n\n\t\t<div style=\"margin-top: 10px\"><button @click=${this.selectVideos}>选择视频和蒙版视频</button></div>\n\n\t\t<div style=\"margin-top: 10px\" :show=${this.videoFiles}><button @click=${this.process}>开始处理</button></div>\n\t\t<div style=\"font-size: 20px; margin-top: 30px\" :show=${this.processing}>绘制进度: ${(0, ff_1.toDecimal)(this.drawProgress * 100, 0)}%</div>\n\t\t<div style=\"font-size: 20px; margin-top: 10px\" :show=${this.processing}>编码进度: ${(0, ff_1.toDecimal)(this.encodingProgress * 100, 0)}%</div>\n\t\t`;\n    }\n    onReady() {\n        this.showTestVideo();\n    }\n    async showTestVideo() {\n        let videoURL = 'videos/1008-loop-720p-1.mp4';\n        let maskURL = 'videos/1008-loop-720p-1-mask.mp4';\n        let videoFile = await (0, file_1.getFilefromURL)(videoURL);\n        let maskFile = await (0, file_1.getFilefromURL)(maskURL);\n        this.videoFiles = [videoFile, maskFile];\n        await this.preparePrviewVideo();\n        await this.drawFrameAtTime(0.8);\n    }\n    async selectVideos() {\n        let files = await (0, ff_1.selectMultipleFile)('video/mp4');\n        if (!files) {\n            return;\n        }\n        if (files.length !== 2) {\n            flit_ui_1.notification.error(`请选择两个文件, 其中之一为原视频, 另一个为名称中包含 \"mask\" 的蒙版视频.`);\n            return;\n        }\n        let maskFile = files.find(file => file.name.includes('mask'));\n        if (!maskFile) {\n            flit_ui_1.notification.error(`请选择两个文件, 其中之一为原视频, 另一个为名称中包含 \"mask\" 的蒙版视频.`);\n            return;\n        }\n        let videoFile = files.find(file => file !== maskFile);\n        this.videoFiles = [videoFile, maskFile];\n        await this.preparePrviewVideo();\n        await this.drawFrameAtTime(0);\n    }\n    async preparePrviewVideo() {\n        let [videoFile, maskFile] = this.videoFiles;\n        let videoURL = URL.createObjectURL(videoFile);\n        let maskURL = URL.createObjectURL(maskFile);\n        this.video = await (0, preload_1.preloadVideo)(videoURL);\n        this.mask = await (0, preload_1.preloadVideo)(maskURL);\n        let canvas = this.refs.canvas;\n        let width = this.video.videoWidth;\n        let height = this.video.videoHeight;\n        if (width > 960) {\n            height = Math.round(960 / width * height);\n            width = 960;\n        }\n        this.toDraws = this.createToDraws(canvas, width, height);\n        let [toDrawBlend] = this.toDraws;\n        let videoSampler = new sampler_1.PixelSampler(toDrawBlend.sw, this.video, { filter: sampler_1.SamplerFilter.Linear });\n        let maskSampler = new sampler_1.PixelSampler(toDrawBlend.sw, this.mask, { filter: sampler_1.SamplerFilter.Linear });\n        toDrawBlend.useSampler('iChannel', videoSampler, maskSampler);\n    }\n    async drawFrameAtTime(time) {\n        this.time = time;\n        let [toDrawBlend, toDrawSmooth] = this.toDraws;\n        let sw = toDrawBlend.sw;\n        this.video.currentTime = time;\n        this.mask.currentTime = time;\n        await (0, media_1.waitForVideoDecoded)(this.video);\n        await (0, media_1.waitForVideoDecoded)(this.mask);\n        let textureFrame = sw.textureFrameManager.requestFull();\n        toDrawBlend.getSubSampler('iChannel', 0).updateData(this.video);\n        toDrawBlend.getSubSampler('iChannel', 1).updateData(this.mask);\n        textureFrame.active();\n        toDrawBlend.draw();\n        textureFrame.deactive();\n        sw.clear();\n        toDrawSmooth.useSampler('iChannel', textureFrame.getSampler());\n        toDrawSmooth.draw();\n        toDrawSmooth.unuseSampler('iChannel');\n    }\n    async process() {\n        let [videoFile, maskFile] = this.videoFiles;\n        this.processing = true;\n        this.drawProgress = 0;\n        this.encodingProgress = 0;\n        let videoURL = URL.createObjectURL(videoFile);\n        let maskURL = URL.createObjectURL(maskFile);\n        let videoExtractor = new video_frames_extractor_1.VideoFramesExtractor(videoURL, 'png', false);\n        let maskExtractor = new video_frames_extractor_1.VideoFramesExtractor(maskURL, 'png', false);\n        await videoExtractor.ready;\n        await maskExtractor.ready;\n        let frameCount = videoExtractor.totalFrameCount;\n        let frameRate = videoExtractor.mediaInfo.video.frameRate;\n        let canvas = document.createElement('canvas');\n        let width = videoExtractor.mediaInfo.video.width;\n        let height = videoExtractor.mediaInfo.video.height;\n        let [toDrawBlend, toDrawSmooth] = this.createToDraws(canvas, width, height);\n        let sw = toDrawBlend.sw;\n        let videoFrames = [];\n        let maskFrames = [];\n        let videoSampler = new sampler_1.PixelSampler(sw, (await videoExtractor.getFrameAtIndex(0)).image);\n        let maskSampler = new sampler_1.PixelSampler(sw, (await maskExtractor.getFrameAtIndex(0)).image);\n        toDrawBlend.useSampler('iChannel', videoSampler, maskSampler);\n        for (let i = 0; i < frameCount; i++) {\n            let videoFrame = (await videoExtractor.getFrameAtIndex(i)).image;\n            let maskFrame = (await maskExtractor.getFrameAtIndex(i)).image;\n            let textureFrame = toDrawBlend.sw.textureFrameManager.requestFull();\n            if (i > 0) {\n                videoSampler.updateData(videoFrame);\n                maskSampler.updateData(maskFrame);\n            }\n            textureFrame.active();\n            toDrawBlend.draw();\n            textureFrame.deactive();\n            sw.clear();\n            toDrawSmooth.useSampler('iChannel', textureFrame.getSampler());\n            toDrawSmooth.draw();\n            toDrawSmooth.unuseSampler('iChannel');\n            sw.waitDrawingCompleted();\n            let pngBlob = await (0, media_1.readCanvasAsImage)(sw.canvas, 'png', 1);\n            let arrayBuffer = await (0, file_1.readBlobAsArrayBuffer)(pngBlob);\n            videoFrames.push(arrayBuffer);\n            let maskBlob = (await maskExtractor.getBlobsAtIndex(i))[0];\n            maskFrames.push(await (0, file_1.readBlobAsArrayBuffer)(maskBlob));\n            this.drawProgress = (i + 1) / frameCount;\n        }\n        let files = videoFrames.map((data, index) => {\n            return {\n                name: String(index).padStart(5, '0') + '.png',\n                data,\n            };\n        });\n        let args = [\n            '-hide_banner',\n            '-framerate', frameRate,\n            '-i', '%05d.png',\n            '-an',\n            '-c:v', 'libx264',\n            '-pix_fmt', 'yuv420p',\n            '-crf', 18,\n            '-vf', 'scale=out_color_matrix=bt709',\n            '-color_primaries', 'bt709',\n            '-color_trc', 'bt709',\n            '-colorspace', 'bt709',\n            videoFile.name,\n        ];\n        let outFiles = await ffmpeg_1.ffmpeg.execWithProgress(files, args, (loaded) => {\n            this.encodingProgress = loaded / frameCount / 2;\n        });\n        ffmpeg_1.ffmpeg.downloadFile(outFiles[0]);\n        await this.processMask(maskFrames, maskFile, frameRate);\n        this.processing = false;\n    }\n    async processMask(maskFrames, maskFile, frameRate) {\n        let files = maskFrames.map((data, index) => {\n            return {\n                name: String(index).padStart(5, '0') + '.png',\n                data,\n            };\n        });\n        let args = [\n            '-hide_banner',\n            '-framerate', frameRate,\n            '-i', '%05d.png',\n            '-an',\n            '-c:v', 'libx264',\n            '-crf', 18,\n            '-pix_fmt', 'yuv420p',\n            '-vf', 'scale=out_color_matrix=bt709',\n            '-color_primaries', 'bt709',\n            '-color_trc', 'bt709',\n            '-colorspace', 'bt709',\n            maskFile.name,\n        ];\n        let outFiles = await ffmpeg_1.ffmpeg.execWithProgress(files, args, (loaded) => {\n            this.encodingProgress = 0.5 + loaded / maskFrames.length / 2;\n        });\n        ffmpeg_1.ffmpeg.downloadFile(outFiles[0]);\n    }\n    createToDraws(canvas, width, height) {\n        let sw = new simple_webgl_1.SimpleWebGL(canvas, { alpha: true });\n        let vertCode = this.getVertexCode();\n        sw.setCanvasSize(width, height, 1);\n        sw.setClearColor([0, 0, 0, 0]);\n        let toDrawBlend = new todraw_1.ToDraw(sw, {\n            vertCode,\n            fragCode: fix_video_black_surrounding_blend_frag_1.default,\n            vertices: {\n                data: this.getVerticesData(),\n                count: 4,\n            },\n        });\n        toDrawBlend.setUniform('maxSearchingFgRadius', 10);\n        toDrawBlend.setUniform('maxMaskErrorPixels', 2);\n        toDrawBlend.setUniform('iResolution', [width, height]);\n        let toDrawSmooth = new todraw_1.ToDraw(sw, {\n            vertCode,\n            fragCode: fix_video_black_surrounding_smooth_frag_1.default,\n            vertices: {\n                data: this.getVerticesData(),\n                count: 4,\n            },\n        });\n        toDrawSmooth.setUniform('blurRadius', 5);\n        toDrawSmooth.setUniform('luminanceRadius', 0.05);\n        toDrawSmooth.setUniform('iResolution', [width, height]);\n        return [toDrawBlend, toDrawSmooth];\n    }\n    getVertexCode() {\n        return `#version 300 es\n\t\tprecision mediump float;\n\t\tin vec4 vPosition;\n\t\tout vec2 fTextureCoord;\n\t\tvoid main() {\n\t\t\tgl_Position = vPosition;\n\t\t\tfTextureCoord = vPosition.xy / 2.0 + 0.5;\n\t\t}\n\t\t`;\n    }\n    getVerticesData() {\n        return {\n            vPosition: [\n                -1, 1,\n                -1, -1,\n                1, 1,\n                1, -1,\n            ]\n        };\n    }\n};\nexports.FixVideoBlackSurrounding = FixVideoBlackSurrounding;\nexports.FixVideoBlackSurrounding = FixVideoBlackSurrounding = __decorate([\n    (0, flit_1.define)('fix-video-black-surrounding')\n], FixVideoBlackSurrounding);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.notification = exports.UniqueNotification = exports.QuickNotification = exports.Notification = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nlet Notification = class Notification extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hideDelay = 10000;\r\n        this.appendTo = 'body';\r\n        this.seed = 1;\r\n        this.items = [];\r\n    }\r\n    static style() {\r\n        let { infoColor, adjust, successColor, errorColor, warningColor, popupBorderRadius, popupShadowBlurRadius, adjustFontSize, backgroundColor, textColor, popupShadowColor } = theme_1.theme;\r\n        let types = [\r\n            ['info', infoColor],\r\n            ['warning', warningColor],\r\n            ['error', errorColor],\r\n            ['success', successColor]\r\n        ];\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tright: ${adjust(12)}px;\n\t\t\tbottom: ${adjust(12)}px;\n\t\t\tmin-width: ${adjust(280)}px;\n\t\t\tmax-width: ${adjust(480)}px;\n\t\t\tz-index: 1200;\t// Higher than message\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t}\n\n\t\t.item{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\tmargin-top: ${adjust(12)}px;\n\t\t\tbackground: ${backgroundColor};\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tcursor: pointer;\n\t\t\toverflow: hidden;\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t}\n\n\t\t.stripe{\n\t\t\twidth: 4px;\n\t\t}\n\n\t\t.left{\n\t\t\tpadding: ${adjust(16)}px ${adjust(14)}px ${adjust(16)}px ${adjust(16)}px;\n\t\t}\n\n\t\t.type-icon{\n\t\t\tdisplay: block;\n\t\t\twidth: ${adjust(20)}px;\n\t\t\theight: ${adjust(20)}px;\n\n\t\t\tsvg{\n\t\t\t\twidth: ${adjust(20)}px;\n\t\t\t\theight: ${adjust(20)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: ${adjust(16)}px ${adjust(16)}px ${adjust(8)}px 0;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tcolor: ${textColor};\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${textColor.toMiddle(10)};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\t\t}\n\n\t\t.title{\n\t\t\tfont-weight: bold;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tmargin-bottom: ${adjust(4)}px;\n\t\t}\n\n\t\t.message{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tmargin-bottom: ${adjust(4)}px;\n\t\t\ttext-align: left;\n\t\t\tword-wrap: break-word;\n\n\t\t\ta{\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t}\n\n\t\t.list{\n\t\t\tmargin: ${adjust(8)}px 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tlist-style-type: square;\n\t\t\tpadding-left: ${adjust(28)}px;\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-top: ${adjust(8)}px;\n\t\t}\n\n\t\t.action{\n\t\t\tmargin-right: ${adjust(6)}px;\n\t\t\theight: ${adjust(22)}px;\n\t\t\tline-height: ${20}px;\n\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t}\n\n\t\t${types.map(([type, color]) => flit_1.css `\n\t\t\t.type-${type}{\n\t\t\t\t&:hover{\n\t\t\t\t\tbackground: ${color.mix(backgroundColor, 95)};\n\t\t\t\t}\n\n\t\t\t\t.stripe{\n\t\t\t\t\tbackground: ${color};\n\t\t\t\t}\n\t\t\t}\n\t\t`)}\n\t\t\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.repeat(this.items, (item) => flit_1.html `<div class=\"item\"\n\t\t\t\t:class=\"type-${item.type}\"\n\t\t\t\t@mouseenter=${() => this.onMouseEnter(item)}\n\t\t\t\t@mouseleave=${() => this.onMouseLeave(item)}\n\t\t\t>\n\t\t\t\t<div class=\"stripe\" />\n\n\t\t\t\t<div class=\"left\">\n\t\t\t\t\t<f-icon class=\"type-icon\" .type=${item.type} />\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t${item.title ? flit_1.html `<div class=\"title\">${item.title}</div>` : ''}\n\n\t\t\t\t\t<div class=\"message\">${item.message}</div>\n\t\t\t\t\t\n\t\t\t\t\t${item.list && item.list.length > 0 ? flit_1.html `\n\t\t\t\t\t\t<ul class=\"list\">\n\t\t\t\t\t\t\t${item.list.map(text => flit_1.html `<li>${text}</li>`)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t` : ''}\n\n\t\t\t\t\t${this.renderActions(item)}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"close\" @click=${() => this.onClickClose(item)}>\n\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t</div>\n\t\t\t</div>`, { transition: 'fade', enterAtStart: true, onend: this.onTransitionEnd });\r\n    }\r\n    renderActions(item) {\r\n        let actions = item.actions;\r\n        if (actions && actions.length > 0) {\r\n            let results = actions.map(action => flit_1.html `\n\t\t\t\t<button class=\"action\"\n\t\t\t\t\t?primary=${action.primary}\n\t\t\t\t\t@click=${() => this.onClickActionButton(action, item)}>\n\t\t\t\t\t${action.text}\n\t\t\t\t</button>\n\t\t\t`);\r\n            return flit_1.html `<div class=\"actions\">${results}</div>`;\r\n        }\r\n        return '';\r\n    }\r\n    async onClickActionButton(action, item) {\r\n        if (action.handler) {\r\n            action.handler();\r\n        }\r\n        this.hide(item.id);\r\n    }\r\n    onMouseEnter(item) {\r\n        item.entered = true;\r\n    }\r\n    onMouseLeave(item) {\r\n        item.entered = false;\r\n        if (!item.timeout) {\r\n            this.hideLater(item);\r\n        }\r\n    }\r\n    onClickClose(item) {\r\n        this.hide(item.id);\r\n    }\r\n    onTransitionEnd(type) {\r\n        if (type === 'leave' && this.items.length === 0) {\r\n            this.el.remove();\r\n        }\r\n    }\r\n    show(options) {\r\n        if (options.id) {\r\n            let item = this.items.find(v => v.id === options.id);\r\n            if (item) {\r\n                delete item.hideDelay;\r\n                Object.assign(item, options);\r\n                this.hideLater(item);\r\n                return options.id;\r\n            }\r\n        }\r\n        let item = Object.assign({\r\n            id: this.seed++,\r\n            entered: false,\r\n            timeout: null\r\n        }, options);\r\n        this.items.unshift(item);\r\n        this.hideLater(item);\r\n        if (this.items.length === 1) {\r\n            document.body.append(this.el);\r\n        }\r\n        return item.id;\r\n    }\r\n    hideLater(item) {\r\n        if (item.timeout) {\r\n            item.timeout.cancel();\r\n        }\r\n        item.timeout = ff_1.timeout(() => {\r\n            item.timeout = null;\r\n            if (!item.entered) {\r\n                this.hide(item.id);\r\n            }\r\n        }, item.hideDelay || this.hideDelay);\r\n    }\r\n    hide(id) {\r\n        let item = this.items.find(v => v.id === id);\r\n        if (item) {\r\n            ff_1.remove(this.items, item);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hideAll() {\r\n        this.items = [];\r\n        if (this.items.length === 0) {\r\n            this.el.remove();\r\n        }\r\n    }\r\n};\r\nNotification = __decorate([\r\n    flit_1.define('f-notification')\r\n], Notification);\r\nexports.Notification = Notification;\r\nclass QuickNotification {\r\n    constructor() {\r\n        this.noti = null;\r\n    }\r\n    unique() {\r\n        return new UniqueNotification(this);\r\n    }\r\n    showNotification(options) {\r\n        if (!this.noti) {\r\n            this.noti = flit_1.renderComponent(flit_1.html `<f-notification />`).component;\r\n        }\r\n        return this.noti.show(options);\r\n    }\r\n    info(message, options = {}) {\r\n        options.type = 'info';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    warn(message, options = {}) {\r\n        options.type = 'warning';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    error(message, options = {}) {\r\n        options.type = 'error';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    success(message, options = {}) {\r\n        options.type = 'success';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    hide(id) {\r\n        return this.noti.hide(id);\r\n    }\r\n    hideAll() {\r\n        return this.noti.hideAll();\r\n    }\r\n}\r\nexports.QuickNotification = QuickNotification;\r\nclass UniqueNotification {\r\n    constructor(raw) {\r\n        this.id = null;\r\n        this.raw = raw;\r\n    }\r\n    overwriteNotificationId(options) {\r\n        if (this.id) {\r\n            options.id = this.id;\r\n        }\r\n    }\r\n    info(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.info(message, options);\r\n    }\r\n    warn(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.warn(message, options);\r\n    }\r\n    error(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.error(message, options);\r\n    }\r\n    success(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.success(message, options);\r\n    }\r\n    hide() {\r\n        if (this.id) {\r\n            return this.raw.hide(this.id);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nexports.UniqueNotification = UniqueNotification;\r\nexports.notification = new QuickNotification();\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Progress = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\n/** Now only a input, will extend to list suggestted local or remote data in future. */\r\nlet Progress = class Progress extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Betweens 0-1. */\r\n        this.value = 0;\r\n        /** Fixed decimal count of progress text. */\r\n        this.decimalCount = 1;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t}\n\n\t\t.groove{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\theight: 1px;\n\t\t\tmargin: auto 0;\n\t\t\tbackground: ${mainColor.alpha(0.2)};\n\t\t}\n\n\t\t.progress{\n\t\t\theight: 100%;\n\t\t\tbackground: ${mainColor};\n\t\t}\n\n\t\t.tooltip{\n\t\t\tfont-family: monospace;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let tip = tooltip_1.tooltip(this.renderTooltipValue(), {\r\n            alignTo: () => this.refs.progress,\r\n            alignPosition: 'bc-tr',\r\n            alignMargin: [8, 0],\r\n        });\r\n        return flit_1.html `\n\t\t<template ${tip}>\n\t\t\t<div class=\"groove\">\n\t\t\t\t<div class=\"progress\" :ref=\"progress\" :style.width.percent=${Math.min(this.value, 1) * 100}></div>\n\t\t\t</div>\n\t\t</template>\n\t\t`;\r\n    }\r\n    renderTooltipValue() {\r\n        // 0.5123 -> 51.2%\r\n        let tipText = (Math.min(this.value, 1) * 100).toFixed(this.decimalCount) + '%';\r\n        return flit_1.html `<span class=\"${this.scopeClassName('tooltip')}\">${tipText}</span>`;\r\n    }\r\n};\r\nProgress = __decorate([\r\n    flit_1.define('f-progress')\r\n], Progress);\r\nexports.Progress = Progress;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionGenerator = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst matrix_1 = require(\"../libs/math/matrix\");\nconst ff_1 = require(\"@pucelle/ff\");\nlet FunctionGenerator = class FunctionGenerator extends flit_1.Component {\n    coords = ff_1.storage.get('functionCoords', []);\n    generatedFn = x => x;\n    generatedFnDesc = 'y = x';\n    xRange = [0, 1];\n    preferQuadratic = ff_1.storage.get('preferQuadratic', false);\n    unEmptyCoordsCount = 0;\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"function-generator\">\n\t\t\t${[0, 1, 2, 3, 4].map(index => {\n            let coord = this.coords[index];\n            let x = coord && coord[0] !== null && coord[0] !== undefined ? String(coord[0]) : '';\n            let y = coord && coord[1] !== null && coord[1] !== undefined ? String(coord[1]) : '';\n            return (0, flit_1.html) `\n\t\t\t\t<f-row .gutter=\"24\">\n\t\t\t\t\t<f-col .span=\"6\">\n\t\t\t\t\t\t<span>x${index + 1}:</span>\n\t\t\t\t\t\t<f-input .value=${x} @change=${(value) => this.onInputChange(index, 0, value ? Number(value) : null)} />\n\t\t\t\t\t</f-col>\n\t\t\t\t\t<f-col .span=\"6\">\n\t\t\t\t\t\t<span>y${index + 1}:</span>\n\t\t\t\t\t\t<f-input .value=${y} @change=${(value) => this.onInputChange(index, 1, value ? Number(value) : null)} />\n\t\t\t\t\t</f-col>\n\t\t\t\t</f-row>\n\t\t\t\t`;\n        })}\n\n\t\t\t<div class=\"function-generator-switch-container\">\n\t\t\t\t<f-switch class=\"function-generator-switch\"\n\t\t\t\t\t:enable=${[3, 4].includes(this.unEmptyCoordsCount)}\n\t\t\t\t\t.checked=${this.preferQuadratic}\n\t\t\t\t\t@change=${this.onChangePreferQuadratic} />\n\t\t\t\t优先使用一般二次曲线 (穿过 3 个或者 4 个点时有效)\n\t\t\t</div>\n\n\t\t\t<code class=\"function-generator-desc\">${this.generatedFnDesc}</code>\n\t\t\t<function-curve .fn=${this.generatedFn} .xRange=${this.xRange} .width=\"200\"></function-curve>\n\t\t</template>\n\t\t`;\n    }\n    onCreated() {\n        this.generateFn();\n    }\n    onInputChange(coordIndex, axisIndex, value) {\n        this.coords[coordIndex] = this.coords[coordIndex] || [];\n        this.coords[coordIndex][axisIndex] = value;\n        this.generateFn();\n        ff_1.storage.set('functionCoords', this.coords);\n    }\n    onChangePreferQuadratic(value) {\n        ff_1.storage.set('preferQuadratic', value);\n        this.preferQuadratic = value;\n        this.generateFn();\n    }\n    generateFn() {\n        let coords = [];\n        for (let coord of this.coords) {\n            if (coord[0] !== null && coord[0] > -Infinity && coord[1] !== null && coord[1] > -Infinity) {\n                coords.push(coord);\n            }\n        }\n        if (coords.length >= 2) {\n            let xRange = [\n                Math.min(...coords.map(coord => coord[0])),\n                Math.max(...coords.map(coord => coord[0]))\n            ];\n            if (xRange[1] - xRange[0] === 0) {\n                return;\n            }\n            this.xRange = xRange;\n            this.unEmptyCoordsCount = coords.length;\n            if (this.preferQuadratic && (coords.length === 3 || coords.length === 4)) {\n                this.generateQuadraticFn(coords);\n            }\n            else {\n                this.generatePolynomialFn(coords);\n            }\n        }\n    }\n    // y = ax^n + bx^n-1 + ...\n    generatePolynomialFn(coords) {\n        // [[x^3, x^2, x^1, 1], [x2...]]\n        let matrixData = coords.map(([x]) => {\n            let a = [];\n            for (let i = coords.length - 1; i >= 0; i--) {\n                a.push(Math.pow(x, i));\n            }\n            return a;\n        });\n        let xMatrix = new matrix_1.Matrix(matrixData);\n        // [[y1], [y2], ...]\n        let ys = new matrix_1.Matrix(coords.map(coord => [coord[1]]));\n        // [a, b, c, d, ...]\n        let factors = xMatrix.inverse().multiply(ys).fix().data.map(v => v[0]);\n        this.generatedFn = (x) => {\n            let sum = 0;\n            let factorIndex = 0;\n            for (let exp = coords.length - 1; exp >= 0; exp--, factorIndex++) {\n                let factor = factors[factorIndex];\n                sum += factor * Math.pow(x, exp);\n            }\n            return sum;\n        };\n        let desc = 'y = ';\n        let factorIndex = 0;\n        for (let exp = coords.length - 1; exp >= 0; exp--, factorIndex++) {\n            let factor = factors[factorIndex];\n            if (exp > 1) {\n                desc += `${factor} * x^${exp} + `;\n            }\n            else if (exp > 0) {\n                desc += `${factor} * x + `;\n            }\n            else {\n                desc += `${factor}`;\n            }\n        }\n        this.generatedFnDesc = desc.replace(/\\+ -/g, '-');\n    }\n    generateQuadraticFn(coords) {\n        if (coords.length === 3) {\n            this.generateQuadraticFnFor3Coords(coords);\n        }\n        else {\n            this.generateQuadraticFnFor4Coords(coords);\n        }\n    }\n    // y = axy + bx + cy + d\n    generateQuadraticFnFor3Coords(coords) {\n        let [[x1, y1], [x2, y2], [x3, y3]] = coords;\n        let matrixData = [\n            [x1 * y1, x1, y1, 1],\n            [x2 * y2, x2, y2, 1],\n            [x3 * y3, x3, y3, 1],\n        ];\n        let matrix = new matrix_1.Matrix(matrixData);\n        // [a, b, c, d]\n        let factors = matrix.solveHomogeneous().fix().data[0];\n        if (!factors) {\n            return;\n        }\n        let [a, b, c, d] = factors;\n        this.generatedFn = (x) => {\n            return -(b * x + d) / (a * x + c);\n        };\n        this.generatedFnDesc = `y = (${-b} * x + ${-d}) / (${a} * x + ${c})`.replace(/\\+ -/g, '- ');\n    }\n    // y = ax^2 + bxy + cx + dy + e\n    generateQuadraticFnFor4Coords(coords) {\n        let [[x1, y1], [x2, y2], [x3, y3], [x4, y4]] = coords;\n        let matrixData = [\n            [x1 * x1, x1 * y1, x1, y1, 1],\n            [x2 * x2, x2 * y2, x2, y2, 1],\n            [x3 * x3, x3 * y3, x3, y3, 1],\n            [x4 * x4, x4 * y4, x4, y4, 1],\n        ];\n        let matrix = new matrix_1.Matrix(matrixData);\n        // [a, b, c, d, e]\n        let factors = matrix.solveHomogeneous().fix().data[0];\n        if (!factors) {\n            return;\n        }\n        let [a, b, c, d, e] = factors;\n        this.generatedFn = (x) => {\n            return -(a * x * x + c * x + e) / (b * x + d);\n        };\n        this.generatedFnDesc = `y = (${-a} * x^2 + ${-c} * x + ${-e}) / (${b} * x + ${d})`.replace(/\\+ -/g, '- ');\n    }\n};\nexports.FunctionGenerator = FunctionGenerator;\nexports.FunctionGenerator = FunctionGenerator = __decorate([\n    (0, flit_1.define)('function-generator')\n], FunctionGenerator);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.tooltip = exports.TooltipBinding = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst popup_1 = require(\"./popup\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst defaultTooltipOptions = {\r\n    name: 'tooltip',\r\n    alignPosition: 'r',\r\n    alignMargin: 3,\r\n    showDelay: 0,\r\n    hideDelay: 200,\r\n    type: 'default',\r\n};\r\n/**\r\n * `:tooltip=\"...\"`\r\n * `tooltip(title, {alignPosition: ..., ...})`\r\n */\r\nclass TooltipBinding extends popup_1.PopupBinding {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n    }\r\n    update(title, options = {}) {\r\n        this.title = title;\r\n        if (options.type && ['prompt', 'error'].includes(options.type) && options.name === undefined) {\r\n            options.name = '';\r\n        }\r\n        super.update(this.getRenderFn.bind(this), this.getPopupOptions(options));\r\n    }\r\n    async showPopupLater() {\r\n        // Not popup if no `title` specified.\r\n        if (!this.title) {\r\n            return;\r\n        }\r\n        await super.showPopupLater();\r\n    }\r\n    bindTrigger() {\r\n        if (this.shouldAlwaysKeepVisible()) {\r\n            // If not, page scrolling position may be not determinated yet.\r\n            // So element may be aligned to a wrong position.\r\n            ff_1.ensureWindowLoaded().then(() => {\r\n                this.showPopupLater();\r\n            });\r\n        }\r\n        else {\r\n            super.bindTrigger();\r\n        }\r\n    }\r\n    shouldAlwaysKeepVisible() {\r\n        return ['prompt', 'error'].includes(this.getOption('type'));\r\n    }\r\n    bindLeave() {\r\n        if (this.getOption('type') !== 'prompt') {\r\n            super.bindLeave();\r\n        }\r\n    }\r\n    onNotInViewport() {\r\n        if (!this.shouldAlwaysKeepVisible()) {\r\n            super.onNotInViewport();\r\n        }\r\n    }\r\n    getRenderFn() {\r\n        return flit_1.html `\n\t\t\t<f-tooltip\n\t\t\t\t.herizontal=${this.isHerizontal()}\n\t\t\t\t.type=${this.getOption('type')}\n\t\t\t>\n\t\t\t\t${this.title}\n\t\t\t</f-tooltip>\n\t\t`;\r\n    }\r\n    getPopupOptions(options = {}) {\r\n        return ff_1.assignIf(options, defaultTooltipOptions);\r\n    }\r\n    isHerizontal() {\r\n        let direction = ff_1.getMainAlignDirection(this.options.get('alignPosition'));\r\n        return direction === 'l' || direction === 'r';\r\n    }\r\n}\r\nexports.TooltipBinding = TooltipBinding;\r\nexports.tooltip = flit_1.defineBinding('tooltip', TooltipBinding);\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Table = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst async_store_1 = require(\"../store/async-store\");\r\nlet Table = class Table extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** If `true`, will only render the rows that in viewport. */\r\n        this.live = false;\r\n        /**\r\n         * Works only when `live` is `true`\r\n         * You can understand this as how many items to render.\r\n         */\r\n        this.pageSize = 50;\r\n        /** The index of the first item to be visible, to reflect last scrolling position. */\r\n        this.startIndex = 0;\r\n        /** If what you rendered is very complex and can't complete in an animation frame, set this to true. */\r\n        this.preRendering = false;\r\n        this.resizable = false;\r\n        this.minColumnWidth = 64;\r\n        this.orderColumnName = null;\r\n        this.orderDirection = '';\r\n        this.columnWidths = null;\r\n        this.resizingColumnWidths = null;\r\n        this.columnResized = false;\r\n        this.cachedTotalWidth = 0;\r\n        this.repeatDir = null;\r\n    }\r\n    static style() {\r\n        let { adjustFontSize, adjust, mainColor, textColor, backgroundColor } = theme_1.theme;\r\n        let scrollbarWidth = ff_1.getScrollbarWidth();\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\theight: 200px;\n\t\t}\n\n\t\t.head{\n\t\t\tpadding-right: ${scrollbarWidth}px;\t// Same with defined scrollbar width.\n\t\t\tcolor: ${textColor.toMiddle(20)};\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tfont-weight: bold;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.columns{\n\t\t\tdisplay: flex;\n\t\t}\n\n\t\t.column{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\talign-items: stretch;\n\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(20)};\n\n\t\t\t&:last-child{\n\t\t\t\tflex: 1;\n\t\t\t\tmin-width: 0;\n\t\t\t\tpadding-right: ${scrollbarWidth}px;\n\t\t\t\tmargin-right: -${scrollbarWidth}px;\n\t\t\t}\n\t\t}\n\n\t\t.column-left{\n\t\t\tdisplay: flex;\n\t\t\tflex: 1;\n\t\t\tmax-width: 100%;\n\n\t\t\t&:hover .order{\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t}\n\n\t\t.column-title{\n\t\t\tflex: 0 1 auto;\n\t\t\tmin-width: 0;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.column-ordered{\n\t\t\tborder-bottom-color: ${backgroundColor.toMiddle(40)};\n\t\t}\n\n\t\t.resizable .column-title{\n\t\t\tflex: 1;\n\t\t}\n\n\t\t.order{\n\t\t\twidth: ${adjust(16)}px;\n\t\t\tdisplay: flex;\n\t\t\tflex: none;\n\t\t\tmargin-right: ${adjust(-8)}px;\t// Gives 16 - 8 = 8px as cell padding-right.\n\t\t\tvisibility: hidden;\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\n\t\t\t&.current{\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\t\t}\n\n\t\t.resizer{\n\t\t\tposition: relative;\n\t\t\tz-index: 1;\n\t\t\twidth: 17px;\n\t\t\tmargin-left: auto;\n\t\t\tmargin-right: ${adjust(-16)}px;\n\t\t\tcursor: e-resize;\n\n\t\t\t&::before{\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 8px;\n\t\t\t\ttop: 6px;\n\t\t\t\tbottom: 6px;\n\t\t\t\twidth: 1px;\n\t\t\t\tbackground: ${backgroundColor.toMiddle(20)};\n\t\t\t}\n\t\t}\n\n\t\t.scroller{\n\t\t\tflex: 1;\n\t\t\toverflow-y: scroll;\n\t\t\toverflow-x: hidden;\n\t\t}\n\n\t\t.body{\n\t\t\tflex: 1;\n\t\t\toverflow-y: scroll;\n\t\t\toverflow-x: hidden;\n\t\t\tposition: relative;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(13)};\n\t\t}\n\n\t\t.rows{\n\t\t\ttable-layout: fixed;\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\ttr{\n\t\t\t&:hover{\n\t\t\t\tbackground: ${mainColor.alpha(0.05)};\n\t\t\t}\n\n\t\t\t&.selected{\n\t\t\t\tbackground: ${mainColor.alpha(0.1)};\n\t\t\t}\n\n\t\t\t&:last-child td{\n\t\t\t\tborder-bottom-color: transparent;\n\t\t\t}\n\t\t}\n\n\t\ttd{\n\t\t\tvertical-align: middle;\n\t\t\tpadding: ${adjust(3)}px ${adjust(8)}px;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(13)};\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tcursor: default;\n\t\t}\n\n\t\tf-checkbox{\n\t\t\tmax-width: 100%;\n\t\t\theight: 100%;\n\n\t\t\tf-icon{\n\t\t\t\tmargin-right: ${adjust(10)}px;\n\t\t\t}\n\t\t}\n\n\t\t.resizing-mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 9999;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tcursor: ew-resize;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<div class=\"head\" :ref=\"head\">\n\t\t\t<div class=\"columns\" :ref=\"columns\">\n\t\t\t\t${this.renderColumns()}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"body\">\n\t\t\t<table class=\"rows\" :ref=\"table\">\n\t\t\t\t<colgroup :ref=\"colgroup\">\n\t\t\t\t\t${this.columns.map(column => flit_1.html `\n\t\t\t\t\t\t<col :style.text-align=${column.align || ''} />\n\t\t\t\t\t`)}\n\t\t\t\t</colgroup>\n\t\t\t\t${this.renderRows()}\n\t\t\t</table>\n\t\t</div>\n\t\t`;\r\n    }\r\n    renderColumns() {\r\n        return this.columns.map((column, index) => {\r\n            let isOrdered = this.orderColumnName === column.name;\r\n            let flexAlign = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : '';\r\n            return flit_1.html `\n\t\t\t<div class=\"column\"\n\t\t\t\t:class.column-ordered=${isOrdered}\n\t\t\t\t@click=${(e) => this.doOrdering(e, index)}\n\t\t\t>\n\t\t\t\t<div class=\"column-left\" :style.justify-content=${flexAlign}>\n\t\t\t\t\t<div class=\"column-title\">${column.title}</div>\n\t\t\t\t\t${column.orderBy ? flit_1.html `\n\t\t\t\t\t\t<div class=\"order\" :class.current=${isOrdered && this.orderDirection !== ''}>\n\t\t\t\t\t\t\t<f-icon .type=${this.getOrderIcon(column.name)} />\n\t\t\t\t\t\t</div>`\r\n                : ''}\n\t\t\t\t</div>\n\n\t\t\t\t${this.resizable && index < this.columns.length - 1 ? flit_1.html `\n\t\t\t\t\t<div class=\"resizer\" @mousedown=${(e) => this.onStartResize(e, index)} />`\r\n                : ''}\n\t\t\t</div>`;\r\n        });\r\n    }\r\n    renderRows() {\r\n        if (this.store instanceof async_store_1.AsyncStore) {\r\n            return flit_1.refDirective(flit_1.liveAsyncRepeat({\r\n                key: this.store.key,\r\n                pageSize: this.pageSize,\r\n                startIndex: this.startIndex,\r\n                preRendering: this.preRendering,\r\n                dataCount: this.store.dataCount.bind(this.store),\r\n                dataGetter: this.store.dataGetter.bind(this.store),\r\n                onUpdated: this.onRepeatDataUpdated.bind(this)\r\n            }, this.renderRow.bind(this), this.transition), this.setRepeatDirective.bind(this));\r\n        }\r\n        else if (this.live) {\r\n            return flit_1.refDirective(flit_1.liveRepeat({\r\n                pageSize: this.pageSize,\r\n                startIndex: this.startIndex,\r\n                preRendering: this.preRendering,\r\n                data: this.store.currentData,\r\n                onUpdated: this.onRepeatDataUpdated.bind(this)\r\n            }, this.renderRow.bind(this), this.transition), this.setRepeatDirective.bind(this));\r\n        }\r\n        else {\r\n            return flit_1.repeat(this.store.currentData, this.renderRow.bind(this), this.transition);\r\n        }\r\n    }\r\n    /**\r\n     * Although you can specify this method,\r\n     * I would suggest to define a sub class and overwrite `renderRow`.\r\n     */\r\n    renderRow(item, index) {\r\n        let tds = this.columns.map((column) => {\r\n            let result = item && column.render ? column.render(item, index) : '\\xa0';\r\n            return flit_1.html `<td :style.text-align=${column.align || ''}>${result}</td>`;\r\n        });\r\n        return flit_1.html `<tr>${tds}</tr>`;\r\n    }\r\n    setRepeatDirective(dir) {\r\n        this.repeatDir = dir;\r\n        if (this.store instanceof async_store_1.AsyncStore) {\r\n            this.store.setRepeatDirective(dir);\r\n        }\r\n    }\r\n    onRepeatDataUpdated(data, index) {\r\n        this.emit('livedataupdated', data, index);\r\n    }\r\n    getOrderIcon(name) {\r\n        if (name === this.orderColumnName) {\r\n            if (this.orderDirection === 'asc') {\r\n                return 'order-asc';\r\n            }\r\n            else if (this.orderDirection === 'desc') {\r\n                return 'order-desc';\r\n            }\r\n        }\r\n        return 'order-default';\r\n    }\r\n    onCreated() {\r\n        if (this.store instanceof async_store_1.AsyncStore) {\r\n            for (let column of this.columns) {\r\n                if (column.orderBy && typeof column.orderBy !== 'string') {\r\n                    throw new Error(`\"orderBy\" in \"columns\" configuration must be string type when using \"liveStore\"`);\r\n                }\r\n            }\r\n        }\r\n        this.orderColumnName = this.store.orderName;\r\n        this.orderDirection = this.store.orderDirection;\r\n        this.store.on('orderchanged', this.onOrderChanged, this);\r\n    }\r\n    onReady() {\r\n        flit_1.onRenderComplete(() => {\r\n            this.updatColumnWidths();\r\n        });\r\n    }\r\n    onConnected() {\r\n        this.watch(() => flit_1.observeGetter(this, 'columns'), async () => {\r\n            this.restoreOrderedColumn();\r\n            // Here we need it render new `<col>`s.\r\n            await flit_1.renderComplete();\r\n            this.updatColumnWidthsRoughly();\r\n        });\r\n        flit_1.onRenderComplete(() => {\r\n            let unwatchSize = ff_1.watchLayout(this.el, 'size', () => this.updatColumnWidths());\r\n            this.once('disconnected', unwatchSize);\r\n        });\r\n    }\r\n    doOrdering(e, index) {\r\n        if (e.target.closest(this.scopeClassName('.resizer'))) {\r\n            return;\r\n        }\r\n        let columns = this.columns;\r\n        let column = columns[index];\r\n        let canOrder = column.orderBy;\r\n        if (!canOrder) {\r\n            return;\r\n        }\r\n        let direction = '';\r\n        let descFirst = column.descFirst;\r\n        if (column.name === this.orderColumnName) {\r\n            if (descFirst) {\r\n                direction = this.orderDirection === '' ? 'desc' : this.orderDirection === 'desc' ? 'asc' : 'desc';\r\n            }\r\n            else {\r\n                direction = this.orderDirection === '' ? 'asc' : this.orderDirection === 'asc' ? 'desc' : 'asc';\r\n            }\r\n        }\r\n        else {\r\n            direction = descFirst ? 'desc' : 'asc';\r\n        }\r\n        this.orderStore(column, direction);\r\n    }\r\n    orderStore(column, direction) {\r\n        if (direction === '') {\r\n            this.store.clearOrder();\r\n        }\r\n        else {\r\n            this.store.setNamedOrder(column.name, column.orderBy || column.render, direction);\r\n        }\r\n        this.store.reload();\r\n    }\r\n    onOrderChanged(name, direction = '') {\r\n        let columns = this.columns;\r\n        let index = -1;\r\n        for (let i = 0; i < columns.length; i++) {\r\n            if (columns[i].name === name) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index > -1) {\r\n            this.orderColumnName = columns[index].name;\r\n            this.orderDirection = direction;\r\n        }\r\n        else {\r\n            this.orderColumnName = '';\r\n            this.orderDirection = '';\r\n        }\r\n    }\r\n    restoreOrderedColumn() {\r\n        if (this.orderColumnName) {\r\n            let index = this.columns.findIndex(column => column.name === this.orderColumnName);\r\n            if (index === -1) {\r\n                this.orderColumnName = '';\r\n                this.orderDirection = '';\r\n            }\r\n        }\r\n    }\r\n    // Resizing part\r\n    updatColumnWidths() {\r\n        let totalWidth = this.refs.head.clientWidth - ff_1.getStyleAsNumber(this.refs.head, 'paddingLeft') - ff_1.getStyleAsNumber(this.refs.head, 'paddingRight');\r\n        this.cachedTotalWidth = totalWidth;\r\n        this.updatColumnWidthsWithTotalWidth(totalWidth);\r\n    }\r\n    // Used to adjust column widths after columns changed.\r\n    // Many elements will be relayout after columns changed, \r\n    // And `updatColumnWidths` will cause force relayout.\r\n    updatColumnWidthsRoughly() {\r\n        this.updatColumnWidthsWithTotalWidth(this.cachedTotalWidth);\r\n    }\r\n    updatColumnWidthsWithTotalWidth(totalWidth) {\r\n        let widthAndFlexArray = this.columns.map(({ flex, width }, index) => {\r\n            let baseWidthInColumnConfig = Math.max(width || 0, this.minColumnWidth);\r\n            // If column resized, we use the column width percentage to calculate new column width.\r\n            let baseWidth = this.columnResized ? this.columnWidths[index] : baseWidthInColumnConfig;\r\n            let extendFlex = 0;\r\n            let shrinkFlex = 0;\r\n            if (typeof flex === 'string') {\r\n                let flexs = flex.split(/\\s+/).map(Number);\r\n                extendFlex = flexs[0] >= 0 ? flexs[0] : 0;\r\n                shrinkFlex = flexs[1] >= 0 ? flexs[1] : extendFlex;\r\n            }\r\n            else if (typeof flex === 'number' && flex >= 0) {\r\n                extendFlex = shrinkFlex = flex;\r\n            }\r\n            return [baseWidth, extendFlex, shrinkFlex];\r\n        });\r\n        let widths = columnWidthCalculator(widthAndFlexArray, totalWidth, this.minColumnWidth);\r\n        this.columnWidths = widths;\r\n        this.setColumnWidths(widths);\r\n    }\r\n    setColumnWidths(widths) {\r\n        let totalWidth = ff_1.sum(widths);\r\n        for (let index = 0; index < widths.length; index++) {\r\n            let isLastColumn = index === widths.length - 1;\r\n            let percent = widths[index] / totalWidth;\r\n            let col = this.refs.colgroup.children[index];\r\n            col.style.width = percent * 100 + '%';\r\n            if (!isLastColumn) {\r\n                let col = this.refs.columns.children[index];\r\n                col.style.width = percent * 100 + '%';\r\n            }\r\n        }\r\n    }\r\n    onStartResize(e, index) {\r\n        let startX = e.clientX;\r\n        let onMouseMove = (e) => {\r\n            e.preventDefault();\r\n            this.resizeColumnByMovementX(e.clientX - startX, index);\r\n        };\r\n        let onMouseUp = () => {\r\n            if (this.resizingColumnWidths) {\r\n                this.columnWidths = this.resizingColumnWidths;\r\n                this.resizingColumnWidths = null;\r\n            }\r\n            flit_1.off(document, 'mousemove', onMouseMove);\r\n            cursorMask.remove();\r\n            this.columnResized = true;\r\n        };\r\n        let cursorMask = flit_1.render(flit_1.html `<div class=\"resizing-mask\" />`, this).fragment.firstElementChild;\r\n        document.body.append(cursorMask);\r\n        flit_1.on(document, 'mousemove', onMouseMove);\r\n        flit_1.once(document, 'mouseup', onMouseUp);\r\n    }\r\n    resizeColumnByMovementX(movementX, index) {\r\n        let widths = [...this.columnWidths];\r\n        let needShrink = Math.abs(movementX);\r\n        let moveLeft = movementX < 0;\r\n        let expandIndex = moveLeft ? index + 1 : index;\r\n        let firstShrinkIndex = moveLeft ? index : index + 1;\r\n        // When move to left, we reduce the width of current and previous columns until the `minWidth`,\r\n        // then we add the reduced width to next column.\r\n        // When move to right, we reduce the width of next columns until the `minWidth`,\r\n        // then we add the reduced width to current column.\r\n        for (let i = firstShrinkIndex; (moveLeft ? i >= 0 : i < this.columns.length) && needShrink > 0; moveLeft ? i-- : i++) {\r\n            let width = widths[i];\r\n            let shrink = needShrink;\r\n            if (width - shrink < this.minColumnWidth) {\r\n                shrink = width - this.minColumnWidth;\r\n            }\r\n            widths[i] -= shrink;\r\n            widths[expandIndex] += shrink; // index <= column count - 2\r\n            needShrink -= shrink;\r\n        }\r\n        this.resizingColumnWidths = widths;\r\n        this.setColumnWidths(widths);\r\n    }\r\n    setStartIndex(index) {\r\n        let isLive = this.live || this.store instanceof async_store_1.AsyncStore;\r\n        if (this.repeatDir) {\r\n            this.repeatDir.setStartIndex(index);\r\n        }\r\n        else if (!isLive) {\r\n            index = Math.min(index, this.store.data.length - 1);\r\n            let row = this.refs.table.rows[index];\r\n            if (row) {\r\n                ff_1.scrollToTop(row);\r\n            }\r\n        }\r\n    }\r\n    scrollToViewIndex(index) {\r\n        let isLive = this.live || this.store instanceof async_store_1.AsyncStore;\r\n        if (this.repeatDir) {\r\n            this.repeatDir.scrollToViewIndex(index);\r\n        }\r\n        else if (!isLive) {\r\n            index = Math.min(index, this.store.data.length - 1);\r\n            let row = this.refs.table.rows[index];\r\n            if (row) {\r\n                ff_1.scrollToView(row);\r\n            }\r\n        }\r\n    }\r\n};\r\nTable = __decorate([\r\n    flit_1.define('f-table')\r\n], Table);\r\nexports.Table = Table;\r\n/**\r\n    Calculate column widths from `{width, minWidth, flex}` values in column config.\r\n    The algorithm is nearly same with the flex layout,\r\n    except that the total column widths will always equal the available client width,\r\n    and no column width should less than `minColumnWidth`.\r\n*/\r\nfunction columnWidthCalculator(widthAndFlexArray, clientWidth, minColumnWidth) {\r\n    // Not enough space for even `minColumnWidth`, then average `clientWidth` to each column.\r\n    if (clientWidth < minColumnWidth * widthAndFlexArray.length) {\r\n        return ff_1.repeatTimes(clientWidth / widthAndFlexArray.length, widthAndFlexArray.length);\r\n    }\r\n    let totalBaseWidth = 0;\r\n    let totalExtendFlex = 0;\r\n    let totalShrinkFlex = 0;\r\n    let widths = ff_1.repeatTimes(minColumnWidth, widthAndFlexArray.length);\r\n    let excludedIndexSet = new Set();\r\n    for (let [baseWidth, extendFlex, shrinkFlex] of widthAndFlexArray) {\r\n        totalBaseWidth += baseWidth;\r\n        totalExtendFlex += extendFlex;\r\n        totalShrinkFlex += shrinkFlex;\r\n    }\r\n    // If no `flex` set for any column, set `flex` to `1` for all the columns.\r\n    if (totalExtendFlex === 0) {\r\n        totalExtendFlex = widthAndFlexArray.length;\r\n        widthAndFlexArray.forEach(a => a[1] = 1);\r\n    }\r\n    if (totalShrinkFlex === 0) {\r\n        totalShrinkFlex = widthAndFlexArray.length;\r\n        widthAndFlexArray.forEach(a => a[2] = 1);\r\n    }\r\n    while (true) {\r\n        let totalFlex = clientWidth >= totalBaseWidth ? totalExtendFlex : totalShrinkFlex;\r\n        let widthPerFlex = (clientWidth - totalBaseWidth) / totalFlex;\r\n        let moreColumnExcluded = false;\r\n        for (let index = 0; index < widthAndFlexArray.length; index++) {\r\n            if (excludedIndexSet.has(index)) {\r\n                continue;\r\n            }\r\n            let [baseWidth, extendFlex, shrinkFlex] = widthAndFlexArray[index];\r\n            let flex = widthPerFlex >= 0 ? extendFlex : shrinkFlex;\r\n            let width = flex * widthPerFlex + baseWidth;\r\n            if (width < minColumnWidth) {\r\n                clientWidth -= minColumnWidth;\r\n                totalBaseWidth -= minColumnWidth;\r\n                totalExtendFlex -= flex;\r\n                excludedIndexSet.add(index);\r\n                moreColumnExcluded = true;\r\n            }\r\n            else {\r\n                widths[index] = width;\r\n            }\r\n        }\r\n        if (!moreColumnExcluded) {\r\n            break;\r\n        }\r\n    }\r\n    return widths;\r\n}\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Modal = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nlet Modal = class Modal extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n        this.opened = true;\r\n        this.appendTo = 'body';\r\n    }\r\n    static style() {\r\n        let { adjustFontSize, textColor, popupBorderRadius, popupShadowBlurRadius, popupBackgroundColor, popupShadowColor, adjust } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tz-index: 1000;\t// Same with popup\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tmax-width: 100%;\n\t\t\tmax-height: 100%;\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\toverflow: hidden;\n\t\t}\n\n\t\t.mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 1000;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tflex: none;\n\t\t\theight: ${adjust(34) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: -${adjust(-6)}px;\n\t\t\tmargin-right: ${adjust(-9)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-left: ${adjust(16)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(8)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{\n\t\t\tflex: 1;\n\t\t\tmin-height: 0;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\toverflow-y: auto;\n\t\t\tmargin-right: ${adjust(-16)}px;\n\t\t\tpadding-right: ${adjust(16)}px;\n\t\t}\n\t`;\r\n    }\r\n    //extensions may make win wrapped by a mask, so we need a win el\r\n    render() {\r\n        let shouldRenderClose = !this.slots.action;\r\n        return flit_1.html `\n\t\t<template\n\t\t\ttabindex=\"0\"\n\t\t\t${flit_1.show(this.opened, { transition: 'fade', enterAtStart: true, onend: this.onTransitionEnd })}\n\t\t>\n\t\t\t<div class=\"mask\"\n\t\t\t\t:ref=\"mask\"\n\t\t\t\t${flit_1.show(this.opened, { transition: 'fade', enterAtStart: true })}\n\t\t\t/>\n\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"title\">${this.title}</div>\n\n\t\t\t\t<div class=\"actions\" :show=${this.slots.action}>\n\t\t\t\t\t<slot name=\"action\" />\n\t\t\t\t</div>\n\n\t\t\t\t${shouldRenderClose ? flit_1.html `\n\t\t\t\t\t<div class=\"close\" @click=${this.hide}>\n\t\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\t\t\t</div>\n\n\t\t\t<div class=\"content\">\n\t\t\t\t<slot />\n\t\t\t</div>\n\t\t</template>\n\t\t`;\r\n    }\r\n    onTransitionEnd(type, finish) {\r\n        if (type === 'leave' && finish) {\r\n            if (this.refs.mask) {\r\n                this.refs.mask.remove();\r\n            }\r\n            this.el.remove();\r\n        }\r\n    }\r\n    async onConnected() {\r\n        await flit_1.renderComplete();\r\n        if (this.refs.mask && this.el.previousElementSibling !== this.refs.mask) {\r\n            this.el.before(this.refs.mask);\r\n        }\r\n        this.toCenter();\r\n        flit_1.on(window, 'resize', ff_1.debounce(this.onWindowResize, 200).wrapped, this);\r\n    }\r\n    onDisconnected() {\r\n        flit_1.off(window, 'resize', this.onWindowResize, this);\r\n    }\r\n    onWindowResize() {\r\n        if (this.opened) {\r\n            this.toCenter();\r\n        }\r\n    }\r\n    toCenter() {\r\n        ff_1.align(this.el, document.documentElement, 'c');\r\n    }\r\n    /**\r\n     * To show the modal, you may `renderCoponent` and then call `show()` or append to `body`.\r\n     * If you want render modal as a child element  and append into document automatically,\r\n     * just call `show` in `onConnected`.\r\n     */\r\n    show() {\r\n        this.opened = true;\r\n        if (this.appendTo) {\r\n            flit_1.appendTo(this.el, this.appendTo);\r\n        }\r\n    }\r\n    hide() {\r\n        this.opened = false;\r\n    }\r\n};\r\nModal = __decorate([\r\n    flit_1.define('f-modal')\r\n], Modal);\r\nexports.Modal = Modal;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BackgroundErasePreview = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst color_correction_preview_1 = require(\"../color-correction/color-correction-preview\");\nconst todraw_1 = require(\"../libs/webgl/todraw\");\nconst preload_1 = require(\"../libs/util/preload\");\nconst sampler_1 = require(\"../libs/webgl/sampler\");\nconst flit_ui_1 = require(\"@pucelle/flit-ui\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst file_1 = require(\"../libs/util/file\");\nlet BackgroundErasePreview = class BackgroundErasePreview extends color_correction_preview_1.ColorCorrectionPreview {\n    name = 'bg-erase';\n    imageStorageKey = 'bgErasePreviewImage';\n    //protected toDrawForeground!: ToDraw\n    toDrawBackground;\n    toDrawBlend;\n    toDrawBackgroundBlur;\n    uniformSlides = [];\n    imageDirectory = 'bg-erase';\n    images = [\n        'icon_2020_07-02_11-00-22.jpg',\n        'icon_2020_07-02_14-26-40.jpg',\n        'icon_2020_07-04_15-12-08.jpg',\n        'icon_2020_07-02_11-40-10.jpg',\n        'icon_2020_07-02_14-29-04.jpg',\n        'icon_2020_07-04_15-19-37.jpg',\n        'icon_2020_07-02_11-40-35.jpg',\n        'icon_2020_07-02_14-29-23.jpg',\n        'icon_2020_07-06_02-22-34.jpg',\n        'icon_2020_07-02_11-40-56.jpg',\n        'icon_2020_07-02_16-55-26.jpg',\n        'icon_2020_07-06_03-53-09.jpg',\n        'icon_2020_07-02_11-41-19.jpg',\n        'icon_2020_07-03_04-25-59.jpg',\n        'icon_2020_07-06_04-07-41.jpg',\n        'icon_2020_07-02_11-41-28.jpg',\n        'icon_2020_07-03_17-33-47.jpg',\n        'icon_2020_07-06_07-58-31.jpg',\n        'icon_2020_07-02_11-47-17.jpg',\n        'icon_2020_07-03_22-11-24.jpg',\n        'icon_2020_07-02_11-47-21.jpg',\n        'icon_2020_07-04_08-06-32.jpg',\n        'icon_2020_07-02_12-43-35.jpg',\n        'icon_2020_07-04_10-15-31.jpg',\n        'icon_2020_07-02_12-50-06.jpg',\n        'icon_2020_07-04_13-37-20.jpg',\n        'icon_2020_07-06_17-15-52.jpg',\n        'icon3_0125.jpg',\n        'icon3_0126.jpg',\n        'icon3_0127.jpg',\n        'icon3_0138.jpg',\n        '499.jpg',\n    ].sort();\n    imageMaskMap = {};\n    bgColors = ['#000000', '#ffffff', '#ff3333', '#33ff33', '#3333ff'];\n    activeBGColor = ff_1.storage.get('bg_erase_active_bg_color', '#000000');\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"preview\">\n\t\t\t${this.renderColors()}\n\t\t\t${this.renderImages()}\n\t\t</template>\n\t\t`;\n    }\n    renderColors() {\n        return (0, flit_1.html) `\n\t\t<div class=\"preview-channels\">\n\t\t\t<button @click=${() => this.setBgColor('original')} style=\"margin-top: 12px; margin-right: 4px;\">原图</button>\n\t\t\t<button @click=${() => this.setBgColor('mask')} style=\"margin-top: 12px; margin-right: 4px;\">蒙版</button>\n\n\t\t\t${this.bgColors.map((color) => (0, flit_1.html) `\n\t\t\t\t<div :style.background=${color}\n\t\t\t\t\t:class.active=${color === this.activeBGColor}\n\t\t\t\t\t@click=${() => this.setBgColor(color)}\n\t\t\t\t />\n\t\t\t`)}\n\n\t\t\t<button @click=${this.addMoreImages} style=\"margin-top: 12px; margin-left: auto;\">添加图片</button>\n\t\t</div>\n\t\t`;\n    }\n    async createToDraw() {\n        this.updateSWClearColor();\n        let vertCode = this.getVertexCode();\n        //let foregroundFragCode = await (await fetch(`shaders/color-corrections/bg-erase-foreground-filter.frag`)).text()\n        let backgroundFragCode = await (await fetch(`shaders/bg-erase/bg-erase-background-filter.frag`)).text();\n        let blurFragCode = await (await fetch(`shaders/bg-erase/bg-erase-blur.frag`)).text();\n        let blendFragCode = await (await fetch(`shaders/bg-erase/bg-erase-blend.frag`)).text();\n        // 不需要再绘制前景, 但是代码仍保留, 因为未来将会对前景做平滑处理来改善局部的效果.\n        // 提取前景颜色.\n        // this.toDrawForeground = new ToDraw(this.sw, {\n        // \tvertCode,\n        // \tfragCode: foregroundFragCode,\n        // \tvertices: {\n        // \t\tdata: this.getDefaultVerticesData(),\n        // \t\tcount: 4,\n        // \t},\n        // })\n        // 提取背景颜色.\n        this.toDrawBackground = new todraw_1.ToDraw(this.sw, {\n            vertCode,\n            fragCode: backgroundFragCode,\n            vertices: {\n                data: this.getDefaultVerticesData(),\n                count: 4,\n            },\n        });\n        // 模糊背景.\n        this.toDrawBackgroundBlur = new todraw_1.ToDraw(this.sw, {\n            vertCode,\n            fragCode: blurFragCode,\n            vertices: {\n                data: this.getDefaultVerticesData(),\n                count: 4,\n            },\n        });\n        this.toDrawBlend = new todraw_1.ToDraw(this.sw, {\n            vertCode,\n            fragCode: blendFragCode,\n            vertices: {\n                data: this.getDefaultVerticesData(),\n                count: 4,\n            },\n        });\n        this.toDraw = new todraw_1.ToDraw(this.sw, {\n            vertCode,\n            fragCode: await this.getDefaultFragCode(),\n            vertices: {\n                data: this.getDefaultVerticesData(),\n                count: 4,\n            },\n        });\n        this.onGLReady();\n    }\n    async setImage(name) {\n        this.activeImage = name;\n        let imageURL = (0, file_1.isAbsolutePath)(name) ? name : `pictures/${this.imageDirectory}/${name}`;\n        let maskURL = this.imageMaskMap[imageURL] || `pictures/${this.imageDirectory}/${name.replace(/\\.(\\w+)$/, '_v2_mask.png')}`;\n        let image = await (0, preload_1.preloadImage)(imageURL);\n        let maskImage = await (0, preload_1.preloadImage)(maskURL);\n        this.imageNaturalSize = [image.naturalWidth, image.naturalHeight];\n        this.adjustSize();\n        let samplers = [new sampler_1.PixelSampler(this.sw, image), new sampler_1.PixelSampler(this.sw, maskImage)];\n        this.toDrawBackground.useSampler('iChannel', ...samplers);\n        //this.toDrawForeground.useSampler('iChannel', ...samplers)\n        this.toDrawBlend.useSampler('iChannel', ...samplers);\n        this.drawAll();\n    }\n    setBgColor(color) {\n        this.activeBGColor = color;\n        ff_1.storage.set('bg_erase_active_bg_color', color);\n        this.updateSWClearColor();\n        this.drawAll();\n    }\n    async addMoreImages() {\n        let files = await (0, ff_1.selectMultipleFile)('image/*');\n        if (!files) {\n            return;\n        }\n        if (files.length !== 2) {\n            flit_ui_1.notification.error(`请选择两个文件, 其中之一为原图, 另一个为名称中包含 \"mask\" 的蒙版图.`);\n            return;\n        }\n        let maskFile = files.find(file => file.name.includes('mask'));\n        if (!maskFile) {\n            flit_ui_1.notification.error(`请选择两个文件, 其中之一为原图, 另一个为名称中包含 \"mask\" 的蒙版图.`);\n            return;\n        }\n        let originalFile = files.find(file => file !== maskFile);\n        let imageURL = URL.createObjectURL(originalFile);\n        let maskURL = URL.createObjectURL(maskFile);\n        this.images.push(imageURL);\n        this.imageMaskMap[imageURL] = maskURL;\n        this.setImage(imageURL);\n    }\n    updateSWClearColor() {\n        if (this.activeBGColor.startsWith('#')) {\n            this.sw.setClearColor(new flit_ui_1.Color(this.activeBGColor).getRGBA());\n        }\n    }\n    drawAll() {\n        this.sw.clear();\n        if (this.activeBGColor === 'original') {\n            this.toDraw.useSampler('iChannel', this.toDrawBlend.getSampler('iChannel')[0]);\n            this.toDraw.draw();\n            this.toDraw.unuseSampler('iChannel');\n        }\n        else if (this.activeBGColor === 'mask') {\n            this.toDraw.useSampler('iChannel', this.toDrawBlend.getSampler('iChannel')[1]);\n            this.toDraw.draw();\n            this.toDraw.unuseSampler('iChannel');\n        }\n        else {\n            // 绘制背景.\n            let backgroundSampler = this.drawBackgroundBlur();\n            //this.toDrawForeground.useSubSampler('iChannel', 2, backgroundSampler)\n            this.toDrawBlend.useSubSampler('iChannel', 2, backgroundSampler);\n            // 绘制前景.\n            //let foregroundSampler = this.drawForeground()\n            //this.toDrawBlend.useSubSampler('iChannel', 3, foregroundSampler)\n            this.drawBlend();\n        }\n    }\n    drawBackgroundBlur(blurRadius = 50, iterateCount = 2, maxMaskErrorPixels = 2) {\n        let outputSampler;\n        // 拆解为 iterateCount / 2 个半径, 其平方和等于原始半径的平方.\n        let subRadius = blurRadius * Math.sqrt(1 / iterateCount);\n        // 提取背景.\n        let textureFrame = this.sw.textureFrameManager.requestFull();\n        textureFrame.active();\n        this.toDrawBackground.draw();\n        textureFrame.deactive();\n        this.toDrawBackgroundBlur.useSampler('iChannel', textureFrame.getSampler());\n        this.toDrawBackgroundBlur.setUniform('maxMaskErrorPixels', maxMaskErrorPixels);\n        // 横竖来回进行绘制.\n        for (let i = 0; i < iterateCount * 2; i++) {\n            if (i % 2 === 0) {\n                this.toDrawBackgroundBlur.setUniform('samplingRadius', [subRadius, 0]);\n            }\n            else {\n                this.toDrawBackgroundBlur.setUniform('samplingRadius', [0, subRadius]);\n            }\n            let textureFrame = this.sw.textureFrameManager.requestFull();\n            textureFrame.active();\n            this.toDrawBackgroundBlur.draw();\n            textureFrame.deactive();\n            this.toDrawBackgroundBlur.unuseSampler('iChannel');\n            // 前面的绘制完成后再度作为绘制的输入.\n            if (i < iterateCount * 2 - 1) {\n                this.toDrawBackgroundBlur.useSampler('iChannel', textureFrame.getSampler());\n            }\n            else {\n                outputSampler = textureFrame.getSampler();\n            }\n        }\n        return outputSampler;\n    }\n    drawBlend(maxSearchingFgRadius = 5, maxMaskErrorPixels = 2) {\n        this.toDrawBlend.setUniform('maxSearchingFgRadius', maxSearchingFgRadius);\n        this.toDrawBlend.setUniform('maxMaskErrorPixels', maxMaskErrorPixels);\n        this.toDrawBlend.draw();\n    }\n};\nexports.BackgroundErasePreview = BackgroundErasePreview;\nexports.BackgroundErasePreview = BackgroundErasePreview = __decorate([\n    (0, flit_1.define)('bg-erase-preview')\n], BackgroundErasePreview);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Dropdown = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../bindings/popup\");\r\n/**\r\n * Contains trigger element and popup content.\r\n * You should extend it to implement some dropdown type components, like `Select`.\r\n  */\r\nclass Dropdown extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.opened = false;\r\n        this.trigger = 'click';\r\n        this.triangle = true;\r\n        this.alignPosition = 'b';\r\n        this.alignMargin = 3;\r\n        this.transition = 'fade';\r\n        this.showDelay = 100;\r\n        this.hideDelay = 100;\r\n        this.popupBinding = null;\r\n    }\r\n    static style() {\r\n        let { mainColor } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t}\n\n\t\t.opened{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.down-icon{\n\t\t\tmargin-right: 6px;\n\t\t}\n\n\t\t.popup{\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.list{\n\t\t\toverflow-y: auto;\n\t\t\tmax-height: 100%;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let { trigger, triangle, alignPosition, alignMargin, transition, showDelay, hideDelay } = this;\r\n        let onOpenedChanged = this.setOpened.bind(this);\r\n        let toPopup = flit_1.refBinding(popup_1.popup(() => this.renderPopup(), { trigger, triangle, alignPosition, alignMargin, transition, showDelay, hideDelay, onOpenedChanged }), (v) => { this.popupBinding = v; });\r\n        return flit_1.html `\n\t\t<template :class.opened=${this.opened} ${toPopup}>\n\t\t\t<slot />\n\t\t\t<f-icon class=\"down-icon\" .type=\"down\" />\n\t\t</template>\n\t\t`;\r\n    }\r\n    renderPopup() {\r\n        return flit_1.html `\n\t\t<f-popup\n\t\t\tclass=\"popup\"\n\t\t\t.triangle=${this.triangle}\n\t\t/>\n\t\t`;\r\n    }\r\n    setOpened(opened) {\r\n        this.opened = opened;\r\n        if (opened) {\r\n            this.onPopupOpened();\r\n        }\r\n    }\r\n    onPopupOpened() { }\r\n    async showPopup() {\r\n        if (this.popupBinding) {\r\n            await this.popupBinding.showPopupLater();\r\n        }\r\n    }\r\n    hidePopup() {\r\n        if (this.popupBinding) {\r\n            this.popupBinding.hidePopupLater();\r\n        }\r\n    }\r\n}\r\nexports.Dropdown = Dropdown;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ContextMenu = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../components/popup\");\r\nlet ContextMenu = class ContextMenu extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.triangle = false;\r\n    }\r\n    static style() {\r\n        let { adjust } = theme_1.theme;\r\n        return flit_1.css `\n\t\t${super.style()}\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tborder-radius: 0;\n\t\t\t\n\t\t\t.option__f-list{\n\t\t\t\tpadding: ${adjust(2)}px ${adjust(8)}px;\n\t\t\t}\n\n\t\t\tf-list{\n\t\t\t\tborder-bottom: none;\n\t\t\t}\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n};\r\nContextMenu = __decorate([\r\n    flit_1.define('f-contextmenu')\r\n], ContextMenu);\r\nexports.ContextMenu = ContextMenu;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RadioGroup = exports.Radio = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Radio = class Radio extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checked = false;\r\n        this.radioGroup = null;\r\n        // Used to compare with `RadioGroup.value`\r\n        this.value = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, focusBlurRadius } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.icon{\n\t\t\tborder-radius: 50%;\n\t\t\tmargin-right: ${adjust(6)}px;\n\t\t}\n\n\t\t.checked{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\t\n\t\t.label{\n\t\t\tflex: 1;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.checked=${this.checked}\n\t\t\t\t@@click=${this.onClick}\n\t\t\t\t@@focus=${this.onFocus}\n\t\t\t>\n\t\t\t\t<f-icon class=\"icon\" .type=${this.checked ? 'radio-checked' : 'radio-unchecked'} />\n\t\t\t\t<div class=\"label\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        let group = flit_1.getClosestComponent(this.el, RadioGroup);\r\n        if (group) {\r\n            this.radioGroup = group;\r\n            this.checked = this.radioGroup.value == this.value;\r\n            this.radioGroup.register(this);\r\n        }\r\n    }\r\n    onClick() {\r\n        if (!this.checked) {\r\n            this.checked = true;\r\n            this.emit('change', true);\r\n        }\r\n    }\r\n    onFocus() {\r\n        if (!this.checked) {\r\n            flit_1.once(this.el, 'blur', this.onBlur, this);\r\n            flit_1.once(document, 'keydown.enter', this.onEnter, this);\r\n        }\r\n    }\r\n    onBlur() {\r\n        flit_1.off(document, 'keydown', this.onEnter, this);\r\n    }\r\n    onEnter() {\r\n        this.onClick();\r\n    }\r\n};\r\nRadio = __decorate([\r\n    flit_1.define('f-radio')\r\n], Radio);\r\nexports.Radio = Radio;\r\n// Not `radio-group` because we want to correspond with `radiogroup` with `https://www.w3.org/TR/wai-aria-practices-1.2/`.\r\nlet RadioGroup = class RadioGroup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.value = null;\r\n        this.radios = [];\r\n    }\r\n    register(radio) {\r\n        this.radios.push(radio);\r\n        radio.on('change', this.onRadioChange.bind(this, radio));\r\n    }\r\n    onRadioChange(changedRadio) {\r\n        for (let radio of this.radios) {\r\n            if (radio !== changedRadio) {\r\n                radio.checked = false;\r\n            }\r\n        }\r\n        this.value = changedRadio.value;\r\n        this.emit('change', this.value);\r\n    }\r\n};\r\nRadioGroup = __decorate([\r\n    flit_1.define('f-radiogroup')\r\n], RadioGroup);\r\nexports.RadioGroup = RadioGroup;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tag = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nlet Tag = class Tag extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closable = false;\r\n    }\r\n    static style() {\r\n        let { borderColor, borderRadius, adjust, adjustFontSize } = theme_1.theme;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tborder-radius: ${borderRadius}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tline-height: ${adjust(18)}px;\n\t\t\theight: ${adjust(20)}px;\n\t\t\tpadding: 0 ${adjust(6)}px 0 ${adjust(6)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\topacity: 0.9;\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\topacity: 0.8;\n\t\t\t}\n\t\t}\n\t\n\t\t.icon{\n\t\t\tmargin-left: ${adjust(4)}px;\n\t\t\tdisplay: inline-flex;\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t\t<slot />\n\t\t\t${this.closable ? flit_1.html `<div class=\"icon\" @@click=${this.close}><f-icon .type=\"close\" /></div>` : ''}\n\t\t`;\r\n    }\r\n    close() {\r\n        this.emit('close');\r\n    }\r\n};\r\nTag = __decorate([\r\n    flit_1.define('f-tag')\r\n], Tag);\r\nexports.Tag = Tag;\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransitionPreview = void 0;\nconst flit_1 = require(\"@pucelle/flit\");\nconst ff_1 = require(\"@pucelle/ff\");\nconst preload_1 = require(\"../libs/util/preload\");\nconst simple_webgl_1 = require(\"../libs/webgl/simple-webgl\");\nconst transition_processor_1 = require(\"./transition-processor\");\nconst sampler_1 = require(\"../libs/webgl/sampler\");\nlet TransitionPreview = class TransitionPreview extends flit_1.Component {\n    names = [];\n    toImageIndex = 1;\n    transitionName = '';\n    sw;\n    intervalSeconds = ff_1.storage.get('transitionIntervalTime', 5);\n    imageNaturalSize = [0, 0];\n    endPlaying = () => { };\n    paused = false;\n    easing = ff_1.storage.get('transitionEasing', 'ease-in-out');\n    uniforms;\n    uniformValues;\n    linearProgress = 0;\n    transitionTimePercent = 0.9;\n    progress = 0;\n    processor;\n    easingData = [\n        { value: 'linear', text: 'linear' },\n        { value: 'ease-in-out', text: 'ease in out' },\n        { value: 'ease-in-out-quad', text: 'ease in out quad' },\n        { value: 'ease-in-out-cubic', text: 'ease in out cubic' },\n        { value: 'ease-in-out-quart', text: 'ease in out quart' },\n        { value: 'ease-in-out-quint', text: 'ease in out quint' },\n        { value: 'ease-in-out-sine', text: 'ease in out sine' },\n        { value: 'ease-in-out-expo', text: 'ease in out expo' },\n        { value: 'ease-in-out-circ', text: 'ease in out circ' },\n        { value: 'ease-in-out-back', text: 'ease in out back' },\n        { value: 'ease-in', text: 'ease in' },\n        { value: 'ease-in-quad', text: 'ease in quad' },\n        { value: 'ease-in-cubic', text: 'ease in cubic' },\n        { value: 'ease-in-quart', text: 'ease in quart' },\n        { value: 'ease-in-quint', text: 'ease in quint' },\n        { value: 'ease-in-sine', text: 'ease in sine' },\n        { value: 'ease-in-expo', text: 'ease in expo' },\n        { value: 'ease-in-circ', text: 'ease in circ' },\n        { value: 'ease-in-back', text: 'ease in back' },\n        { value: 'ease-out', text: 'ease out' },\n        { value: 'ease-out-quad', text: 'ease out quad' },\n        { value: 'ease-out-cubic', text: 'ease out cubic' },\n        { value: 'ease-out-quart', text: 'ease out quart' },\n        { value: 'ease-out-quint', text: 'ease out quint' },\n        { value: 'ease-out-sine', text: 'ease out sine' },\n        { value: 'ease-out-expo', text: 'ease out expo' },\n        { value: 'ease-out-circ', text: 'ease out circ' },\n        { value: 'ease-out-back', text: 'ease out back' },\n    ];\n    images = [\n        'allef-vinicius-pa0vicn6dwe-unsplash.jpg',\n        'allef-vinicius-ttusgz8ulkk-unsplash.jpg',\n        'allef-vinicius-_ugpeypqiuc-unsplash.jpg',\n        'anastasia-dulgier-kokszzy9wsa-unsplash.jpg',\n        'anthony-tran-mehojxixkdq-unsplash.jpg',\n        'deanna-alys-6lbbowkpzyq-unsplash.jpg',\n        'erol-ahmed-aiyfr0vbadk-unsplash.jpg',\n        'floriane-vita-fyd3owbuxny-unsplash.jpg',\n        'icons8-team-7lnatqymzm4-unsplash.jpg',\n        'jessica-weiller-so4efi-d1nc-unsplash.jpg',\n        'newborn-1328454.jpg',\n        'quan-nguyen-sghnxezeo-q-unsplash.jpg',\n        'scott-webb--udznjsczse-unsplash.jpg',\n    ];\n    imageDirectory = 'color-correction';\n    render() {\n        return (0, flit_1.html) `\n\t\t<template class=\"preview\">\n\t\t\t${this.renderTransitionNames()}\n\t\t\t${this.renderToolbar()}\n\t\t\t${this.renderImages()}\n\t\t\t${this.renderAdditionalToolbar()}\n\t\t</template>\n\t\t`;\n    }\n    renderTransitionNames() {\n        if (this.names.length < 2) {\n            return '';\n        }\n        return (0, flit_1.html) `\n\t\t<div class=\"preview-names\">\n\t\t\t${this.names.map((name) => (0, flit_1.html) `\n\t\t\t\t<div\n\t\t\t\t\t:class.active=${name === this.transitionName}\n\t\t\t\t\t@click=${() => this.onClickTransitionName(name)}\n\t\t\t\t>\n\t\t\t\t\t${name}\n\t\t\t\t</div>\n\t\t\t`)}\n\t\t</div>\n\t\t`;\n    }\n    renderToolbar() {\n        return (0, flit_1.html) `\n\t\t<table class=\"preview-toolbar\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\tDuration: <span class=\"preview-slide-value\">${this.intervalSeconds}s</span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<f-slider class=\"preview-slider\" .min=\"1\" .max=\"30\" .step=\"1\" .value=${this.intervalSeconds} @change=${this.changeIntervalTime} />\n\t\t\t\t\t<button class=\"preview-slider-button\" @click=${this.togglePaused}>${this.paused ? 'Play' : 'Pause'}</button>\n\t\t\t\t\t<f-select class=\"preview-easing-select\" .value=${this.easing} .data=${this.easingData} @change=${this.onChangeEasing} />\n\t\t\t\t</td>\n\t\t\t</tr>\n\n\t\t\t${this.uniforms.map(({ name, desc, min, max, step, value: defaultValue }, index) => {\n            let currentValue = this.uniformValues[index];\n            return (0, flit_1.html) `\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t${desc}: <span class=\"preview-slide-value\">${currentValue}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<f-slider class=\"preview-slider\" .min=${min} .max=${max} .step=${step} .value=${currentValue}\n\t\t\t\t\t\t\t@change=${(value) => this.changeSliderValue(name, index, value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button class=\"preview-slider-button\" @click=${() => this.changeSliderValue(name, index, defaultValue)}>Reset</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t`;\n        })}\n\t\t</tbody>\n\t\t</table>\n\t\t`;\n    }\n    renderImages() {\n        return (0, flit_1.html) `\n\t\t\t<div class=\"preview-nav\">\n\t\t\t${this.images.map((name, index) => (0, flit_1.html) `\n\t\t\t\t<div class=\"preview-nav-item\"\n\t\t\t\t\t:class.active=${index === this.toImageIndex}\n\t\t\t\t\t@click=${() => this.onClickImageInIndex(index)}\n\t\t\t\t>\n\t\t\t\t\t<img src=\"pictures/${this.imageDirectory}/${name}\">\n\t\t\t\t</div>\n\t\t\t`)}\n\t\t\t</div>\n\n\t\t\t<div class=\"preview-canvas\" :ref=\"canvasContainer\">\n\t\t\t\t<canvas :ref=\"canvas\" />\n\t\t\t</div>\n\t\t`;\n    }\n    renderAdditionalToolbar() {\n        return (0, flit_1.html) `\n\t\t<div class=\"preview-additional-toolbar\">\n\t\t\t<f-slider class=\"preview-progress\" :ref=\"slider\" .min=\"0\" .max=\"1\" .step=\"0.01\" .value=${this.linearProgress}\n\t\t\t\t.renderTooltipValue=${() => (0, flit_1.html) `<div style=\"min-width: 40px; text-align: center;\">${Math.round(this.linearProgress * 100)}%`}\n\t\t\t\t@dragstart=${this.startChangingProgress}\n\t\t\t\t@dragend=${this.endChangingProgress}\n\t\t\t\t@change=${this.changeProgress}\n\t\t\t/>\n\t\t\t<button class=\"preview-slider-button\" @click=${this.toFullscreen}>Fullscreen</button>\n\t\t</div>\n\t\t`;\n    }\n    changeIntervalTime(value) {\n        this.intervalSeconds = value;\n        ff_1.storage.set('transitionIntervalTime', value);\n    }\n    changeSliderValue(name, index, value) {\n        this.sw.setUniform(name, value);\n        this.uniformValues[index] = value;\n        this.drawAll();\n    }\n    startChangingProgress() {\n        this.endPlaying();\n    }\n    endChangingProgress() {\n        if (!this.paused) {\n            this.startPlaying();\n        }\n    }\n    changeProgress(value) {\n        this.updateProgress(value);\n    }\n    onCreated() {\n        this.transitionName = this.names[0];\n        this.uniforms = (0, transition_processor_1.getUniformSlides)(this.transitionName) || [];\n        this.uniformValues = this.uniforms.map(uniform => uniform.value);\n    }\n    async onReady() {\n        this.initGL();\n        for (let i = 0; i < this.uniforms.length; i++) {\n            let { name, value } = this.uniforms[i];\n            this.sw.setUniform(name, value);\n        }\n        await this.setTransitionName(this.transitionName);\n        await this.setToImageIndex(this.toImageIndex);\n        if (!this.paused) {\n            this.startPlaying();\n        }\n    }\n    initGL() {\n        let canvas = this.refs.canvas;\n        this.sw = new simple_webgl_1.SimpleWebGL(canvas);\n    }\n    onConnected() {\n        (0, flit_1.on)(window, 'resize', this.onResize, this);\n        (0, flit_1.on)(document, 'keydown.space.prevent', this.togglePaused, this);\n    }\n    onDisconnected() {\n        this.endPlaying();\n        (0, flit_1.off)(window, 'resize', this.onResize, this);\n        (0, flit_1.off)(document, 'keydown', this.togglePaused, this);\n    }\n    onResize() {\n        if (this.imageNaturalSize[0] > 0) {\n            this.adjustSize();\n            this.drawAll();\n        }\n    }\n    adjustSize() {\n        let [iw, ih] = this.imageNaturalSize;\n        let w = this.refs.canvasContainer.offsetWidth;\n        let h = Math.round(ih / iw * w);\n        if (w > iw) {\n            w = iw;\n            h = ih;\n        }\n        this.sw.setCanvasSize(w, h);\n        this.sw.setUniform('iResolution', [w, h]);\n    }\n    togglePaused() {\n        this.paused = !this.paused;\n        if (this.paused) {\n            this.endPlaying();\n        }\n        else {\n            this.startPlaying();\n        }\n    }\n    toFullscreen() {\n        this.refs.canvasContainer.requestFullscreen();\n        this.adjustSize();\n    }\n    onChangeEasing(value) {\n        this.easing = value;\n        ff_1.storage.set('transitionEasing', value);\n    }\n    async onClickImageInIndex(index) {\n        await this.setToImageIndex(index);\n        this.restartPlaying();\n    }\n    async setToImageIndex(index) {\n        this.toImageIndex = index;\n        // 加载图片.\n        let fromIndex = (index + this.images.length - 1) % this.images.length;\n        let fromImageURL = `pictures/${this.imageDirectory}/${this.images[fromIndex]}`;\n        let toImageURL = `pictures/${this.imageDirectory}/${this.images[index]}`;\n        // 此处可以缓存图片, 这样采样器不会重复上传纹理.\n        // 由于这只是一个临时的演示, 之后再考虑优化.\n        let fromImage = await (0, preload_1.preloadImage)(fromImageURL);\n        let toImage = await (0, preload_1.preloadImage)(toImageURL);\n        this.imageNaturalSize = [fromImage.naturalWidth, fromImage.naturalHeight];\n        this.adjustSize();\n        // 上传纹理和设置纹理单元.\n        let sourceSampler = new sampler_1.PixelSampler(this.sw, fromImage, this.processor.getSourceParams());\n        let targetSampler = new sampler_1.PixelSampler(this.sw, toImage, this.processor.getTargetParams());\n        this.processor.useSamplers(sourceSampler, targetSampler);\n        // 调用图片更改之后的扩展处理.\n        await this.onChangeImage();\n    }\n    /** 从头开始播放转场. */\n    restartPlaying() {\n        this.linearProgress = 0;\n        this.progress = 0;\n        this.startPlaying();\n    }\n    async onChangeImage() { }\n    startPlaying() {\n        this.endPlaying();\n        if (this.paused) {\n            this.drawAll();\n            return;\n        }\n        let startTime = performance.now();\n        let pastTime = 0;\n        let frameId = 0;\n        let playedOut = false;\n        let ended = false;\n        if (this.progress > 0) {\n            startTime -= this.getDuration() * this.linearProgress;\n        }\n        let drawFrame = async () => {\n            pastTime = performance.now() - startTime;\n            if (pastTime > this.intervalSeconds * 1000) {\n                await this.setToImageIndex((this.toImageIndex + 1) % this.images.length);\n                this.restartPlaying();\n                return;\n            }\n            // 由于上面有一个 await, 期间如果 endTransition, 这里会无法结束动画, 所以需要判断 ended.\n            if (ended) {\n                return;\n            }\n            if (pastTime < this.getDuration()) {\n                this.updateProgress(pastTime / this.getDuration());\n            }\n            else if (!playedOut) {\n                this.updateProgress(1);\n                playedOut = true;\n            }\n            frameId = requestAnimationFrame(drawFrame);\n        };\n        drawFrame();\n        this.endPlaying = () => {\n            cancelAnimationFrame(frameId);\n            ended = true;\n        };\n    }\n    getDuration() {\n        return this.transitionTimePercent * this.intervalSeconds * 1000;\n    }\n    updateProgress(linearProgress) {\n        this.linearProgress = linearProgress;\n        this.progress = (0, ff_1.getEasingFunction)(this.easing)(linearProgress);\n        this.sw.setUniform('iProgress', this.progress);\n        this.drawAll();\n    }\n    drawAll() {\n        this.processor.updateProgress(this.progress);\n        this.sw.clear();\n        this.sw.drawAll();\n    }\n    async onClickTransitionName(name) {\n        await this.setTransitionName(name);\n        await this.setToImageIndex(this.toImageIndex);\n        if (this.paused) {\n            this.startPlaying();\n        }\n        else {\n            this.restartPlaying();\n        }\n    }\n    async setTransitionName(name) {\n        this.transitionName = name;\n        this.endPlaying();\n        // 重置转场处理器.\n        await this.prepareProcessor();\n    }\n    async prepareProcessor() {\n        if (this.processor) {\n            this.processor.delete();\n        }\n        this.processor = new transition_processor_1.TransitionProcessor(this.transitionName, this.sw);\n        await this.processor.ready;\n    }\n};\nexports.TransitionPreview = TransitionPreview;\nexports.TransitionPreview = TransitionPreview = __decorate([\n    (0, flit_1.define)('transition-preview')\n], TransitionPreview);\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Slider = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\nlet Slider = class Slider extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.vertical = false;\r\n        this.min = 0;\r\n        this.max = 100;\r\n        this.step = 1;\r\n        this.value = 0;\r\n        /** Fixed decimal count of progress text. */\r\n        this.decimalCount = null;\r\n        this.draging = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, borderColor, adjust, adjustFontSize, focusBlurRadius, backgroundColor } = theme_1.theme;\r\n        let grooveSize = 1;\r\n        let ballSize = Math.ceil(adjust(7)) * 2 + grooveSize;\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(150)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:focus .ball{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t}\n\t\t}\n\n\t\t.groove{\n\t\t\tposition: relative;\n\t\t\theight: ${grooveSize}px;\n\t\t}\n\n\t\t.groove-bg{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: ${borderColor};\n\t\t}\n\t\n\t\t.progress{\n\t\t\tposition: relative;\n\t\t\tbackground: ${mainColor};\n\t\t\theight: 100%;\n\t\t}\n\t\n\t\t.ball{\n\t\t\tposition: absolute;\n\t\t\ttop: -${(ballSize - grooveSize) / 2}px;\n\t\t\tright: -${Math.round(ballSize / 2)}px;\n\t\t\twill-change: top right;\n\t\t\tborder-radius: 50%;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tbackground: ${backgroundColor};\n\t\t\tfloat: right;\n\t\t\twidth: ${ballSize}px;\n\t\t\theight: ${ballSize}px;\n\n\t\t\t&:hover{\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t}\n\t\t}\n\n\t\t.dragging{\n\t\t\t.ball{\n\t\t\t\tborder-color: ${mainColor.darken(10)};\n\t\t\t\tbackground: ${mainColor.darken(10)};\n\t\t\t}\n\t\t}\n\n\t\t:host[vertical]{\n\t\t\twidth: ${adjust(30)}px;\n\t\t\theight: ${adjust(150)}px;\n\t\t\tflex-direction: row;\n\n\t\t\t.groove{\n\t\t\t\twidth: ${grooveSize}px;\n\t\t\t\theight: 100%;\n\t\t\t}\n\n\t\t\t.progress{\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 0;\n\t\t\t}\n\n\t\t\t.ball{\n\t\t\t\tmargin: -${Math.round(ballSize / 2)}px -${(ballSize - grooveSize) / 2}px;\n\t\t\t}\n\t\t}\n\n\t\t.tooltip{\n\t\t\tfont-family: monospace;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let tip = tooltip_1.tooltip(this.renderTooltipValue(), {\r\n            alignTo: () => this.refs.ball,\r\n            alignPosition: this.vertical ? 'r' : 't'\r\n        });\r\n        return flit_1.html `\n\t\t<template\n\t\t\ttabindex=\"0\"\n\t\t\t:class.dragging=${this.draging}\n\t\t\t${tip}\n\t\t\t@@mousedown=${this.onMouseDown}\n\t\t\t@@focus=${this.onFocus}\n\t\t\t@@blur=${this.onBlur}\n\t\t>\n\t\t\t<div class=\"groove\" :ref=\"groove\">\n\t\t\t\t<div class=\"groove-bg\" />\n\t\t\t\t<div class=\"progress\"\n\t\t\t\t\t:style.width.percent=${this.vertical ? '' : this.getPercent()}\n\t\t\t\t\t:style.height.percent=${this.vertical ? this.getPercent() : ''}\n\t\t\t\t>\n\t\t\t\t\t<div class=\"ball\" :ref=\"ball\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</template>\n\t\t`;\r\n    }\r\n    renderTooltipValue() {\r\n        let decimalCount = this.decimalCount;\r\n        if (decimalCount === null) {\r\n            decimalCount = String(this.step).replace(/^\\d+\\.?/, '').length;\r\n        }\r\n        let tipText = this.value.toFixed(decimalCount);\r\n        return flit_1.html `<span class=\"${this.scopeClassName('tooltip')}\">${tipText}</span>`;\r\n    }\r\n    getPercent() {\r\n        if (this.value === this.min) {\r\n            return 0;\r\n        }\r\n        let percentage = (this.value - this.min) / (this.max - this.min) * 100;\r\n        return ff_1.constrain(percentage, 0, 100);\r\n    }\r\n    onMouseDown(e) {\r\n        let rect = ff_1.getRect(this.refs.groove);\r\n        let unkeep = ff_1.MouseLeave.keep(this.el);\r\n        this.draging = true;\r\n        // If clicked the ball, not move; only move when clicked the groove.\r\n        if (!e.target.matches(this.scopeClassName('.ball'))) {\r\n            this.changeValueByEvent(e, rect);\r\n        }\r\n        let onMouseMove = (e) => {\r\n            // Disable selecting text unexpectedly, and makesure ball not lose focus.\r\n            e.preventDefault();\r\n            this.changeValueByEvent(e, rect);\r\n        };\r\n        flit_1.on(document, 'mousemove', onMouseMove);\r\n        flit_1.once(document, 'mouseup', () => {\r\n            flit_1.off(document, 'mousemove', onMouseMove);\r\n            unkeep();\r\n            this.draging = false;\r\n            this.emit('dragend');\r\n        });\r\n        this.emit('dragstart');\r\n    }\r\n    changeValueByEvent(e, rect) {\r\n        let rate;\r\n        if (this.vertical) {\r\n            rate = ff_1.constrain(1 - (e.clientY - rect.top) / rect.height, 0, 1);\r\n        }\r\n        else {\r\n            rate = ff_1.constrain((e.clientX - rect.left) / rect.width, 0, 1);\r\n        }\r\n        let diff = (this.max - this.min) * rate;\r\n        if (this.step) {\r\n            diff = Math.round(diff / this.step) * this.step;\r\n        }\r\n        let oldValue = this.value;\r\n        let newValue = ff_1.toDecimal(this.min + diff, 4);\r\n        if (newValue !== oldValue) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onWheel(e) {\r\n        if (!this.step || document.activeElement !== this.el) {\r\n            return;\r\n        }\r\n        let newValue;\r\n        // deltaY < 0 when wheel up\r\n        if (e.deltaY < 0 && this.vertical || e.deltaY > 0 && !this.vertical) {\r\n            newValue = ff_1.toDecimal(Math.min(this.value + this.step, this.max), 4);\r\n        }\r\n        else {\r\n            newValue = ff_1.toDecimal(Math.max(this.value - this.step, this.min), 4);\r\n        }\r\n        if (newValue !== this.value) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.onBlur();\r\n        flit_1.on(document, 'keydown', this.onKeyDown, this);\r\n        flit_1.on(document, 'wheel.prevent', this.onWheel, this);\r\n    }\r\n    onKeyDown(e) {\r\n        let newValue;\r\n        if (this.vertical) {\r\n            if (e.key === 'ArrowUp') {\r\n                e.preventDefault();\r\n                newValue = Math.min(this.value + this.step, this.max);\r\n            }\r\n            else if (e.key === 'ArrowDown') {\r\n                e.preventDefault();\r\n                newValue = Math.max(this.value - this.step, this.min);\r\n            }\r\n        }\r\n        else {\r\n            if (e.key === 'ArrowLeft') {\r\n                e.preventDefault();\r\n                newValue = Math.max(this.value - this.step, this.min);\r\n            }\r\n            else if (e.key === 'ArrowRight') {\r\n                e.preventDefault();\r\n                newValue = Math.min(this.value + this.step, this.max);\r\n            }\r\n        }\r\n        if (newValue !== undefined && newValue !== this.value) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onBlur() {\r\n        flit_1.off(document, 'keydown', this.onKeyDown, this);\r\n        flit_1.off(document, 'wheel', this.onWheel, this);\r\n    }\r\n};\r\nSlider = __decorate([\r\n    flit_1.define('f-slider')\r\n], Slider);\r\nexports.Slider = Slider;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Popup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/**It's the base class for all the popup which will align with another element. */\r\nlet Popup = class Popup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.herizontal = false;\r\n        this.triangle = true;\r\n        /**\r\n         * The selector to get HTML element to append to or the HTML element.\r\n         * Note that don't specify this value to `document.body`, it may not prepared when class initialize.\r\n         */\r\n        this.appendTo = 'body';\r\n        /**\r\n         * Used for sub classes to specify default popup options,\r\n         * Such that no need to specify them each time in the `popup()`.\r\n         * Will be overwrite by options in `popup()`.\r\n         */\r\n        this.defaultPopupOptions = null;\r\n        this.binding = null;\r\n    }\r\n    static style() {\r\n        let { popupBorderRadius, popupBackgroundColor, popupShadowBlurRadius, popupShadowColor, adjust } = theme_1.theme;\r\n        let w = adjust(10);\r\n        let h = adjust(7);\r\n        let x = adjust(11);\r\n        return flit_1.css `\n\t\t:host{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tz-index: 1000;\t// Same with window, so if in window, we must move it behind the window\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t\tfilter: drop-shadow(0 0 ${popupShadowBlurRadius / 2}px ${popupShadowColor});\t// 3px nearly equals 6px in box-shadow.\n\t\t}\n\n\t\t.triangle{\n\t\t\t// Must be the styles in top position\n\t\t\tposition: absolute;\n\t\t\tborder-left: ${w / 2}px solid transparent;\n\t\t\tborder-right: ${w / 2}px solid transparent;\n\t\t\tborder-bottom: ${h}px solid ${popupBackgroundColor};\n\t\t\ttop: -${h}px;\n\t\t\tleft: ${x}px;\t// 11 + 5 = 16\n\n\t\t\t&-herizontal{\n\t\t\t\tborder-top: ${w / 2}px solid transparent;\n\t\t\t\tborder-bottom: ${w / 2}px solid transparent;\n\t\t\t\tborder-right: ${h}px solid ${popupBackgroundColor};\n\t\t\t\tborder-left: 0;\n\t\t\t\ttop: ${x}px;\n\t\t\t\tleft: -${h}px;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return flit_1.html `\n\t\t<template tabindex=\"0\">\n\t\t\t${this.triangle ? flit_1.html `\n\t\t\t\t<div class=\"triangle\" :ref=\"triangle\" :class.triangle-herizontal=${this.herizontal} />\n\t\t\t` : ''}\n\t\t\t<slot />\n\t\t</template>\n\t\t`;\r\n    }\r\n    // Call `update` every time after restored from `cache(...)`.\r\n    onConnected() {\r\n        // Why render `<popup>` to body?\r\n        // It's very common that the `el` is covered or clipped,\r\n        // which will cause the `<popup>` is not fully visible.\r\n        // You can still render the `<popup>` in the same scroller with `<popup>`.\r\n        // Why inserted into body every time?\r\n        // Most popups share same `z-index`, append newly opened `<popup>` will makesure it covers others.\r\n        // Note that:\r\n        // The template `content` can't pass into `<popup>` as an argument,\r\n        // it will cause the template was parsed in `<popup>` context.\r\n        // The `<popup>` will be cached in `<popup>`, and element will be removed when not in use.\r\n        // After restored from `cache`, it will be inserted back into `<popup>`.\r\n        // So here we need to move it to `body` after every time rendered.\r\n        // If there are serval nodes which belong to an template you need to append into another element,\r\n        // Don't forget to move the anchor nodes, or the whole template nodes into the target element,\r\n        // or they will can't be removed because they are outside of the template node ranges.\r\n        // In the future, we may implement a flit directive `renderTo(..., ...)`, \r\n        // to render elements and it's anchor node to another element.\r\n        this.applyAppendTo();\r\n    }\r\n    applyAppendTo() {\r\n        if (this.appendTo) {\r\n            flit_1.appendTo(this.el, this.appendTo);\r\n        }\r\n    }\r\n    setPopupBinding(binding) {\r\n        this.binding = binding;\r\n    }\r\n    close() {\r\n        if (this.binding) {\r\n            this.binding.hidePopupLater();\r\n        }\r\n        else {\r\n            this.el.remove();\r\n        }\r\n    }\r\n};\r\nPopup = __decorate([\r\n    flit_1.define('f-popup')\r\n], Popup);\r\nexports.Popup = Popup;\r\n"],"names":[],"sourceRoot":""}